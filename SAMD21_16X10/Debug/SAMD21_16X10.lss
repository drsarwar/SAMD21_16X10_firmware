
SAMD21_16X10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000710  20000000  00002ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d6c  20000710  000031e0  00020710  2**2
                  ALLOC
  3 .stack        00002004  2000147c  00003f4c  00020710  2**0
                  ALLOC
  4 .ARM.attributes 0000002d  00000000  00000000  00020710  2**0
                  CONTENTS, READONLY
  5 .comment      000000c7  00000000  00000000  0002073d  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023f7b  00000000  00000000  00020804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000299a  00000000  00000000  0004477f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b4c5  00000000  00000000  00047119  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009c0  00000000  00000000  000525de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f80  00000000  00000000  00052f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a03f  00000000  00000000  00053f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f4d8  00000000  00000000  0006df5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008ff54  00000000  00000000  0007d435  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001984  00000000  00000000  0010d38c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 34 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     .4. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	61 11 00 00 29 01 00 00 29 01 00 00 29 01 00 00     a...)...)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	d5 12 00 00 29 01 00 00 29 01 00 00 29 01 00 00     ....)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 91 17 00 00     )...)...).......
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000710 	.word	0x20000710
      d4:	00000000 	.word	0x00000000
      d8:	00002ad0 	.word	0x00002ad0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000714 	.word	0x20000714
     108:	00002ad0 	.word	0x00002ad0
     10c:	00002ad0 	.word	0x00002ad0
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3

	touch_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	000002a9 	.word	0x000002a9
     124:	000016c9 	.word	0x000016c9

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     12e:	4a2a      	ldr	r2, [pc, #168]	; (1d8 <Reset_Handler+0xac>)
     130:	4b2a      	ldr	r3, [pc, #168]	; (1dc <Reset_Handler+0xb0>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <Reset_Handler+0xb4>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a29      	ldr	r2, [pc, #164]	; (1e4 <Reset_Handler+0xb8>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4823      	ldr	r0, [pc, #140]	; (1dc <Reset_Handler+0xb0>)
     14e:	4922      	ldr	r1, [pc, #136]	; (1d8 <Reset_Handler+0xac>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xbc>)
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <Reset_Handler+0xc0>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xc0>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a1d      	ldr	r2, [pc, #116]	; (1f0 <Reset_Handler+0xc4>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b1d      	ldr	r3, [pc, #116]	; (1f4 <Reset_Handler+0xc8>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     182:	39fd      	subs	r1, #253	; 0xfd
     184:	2390      	movs	r3, #144	; 0x90
     186:	005b      	lsls	r3, r3, #1
     188:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <Reset_Handler+0xcc>)
     18a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18c:	4a1b      	ldr	r2, [pc, #108]	; (1fc <Reset_Handler+0xd0>)
     18e:	78d3      	ldrb	r3, [r2, #3]
     190:	2503      	movs	r5, #3
     192:	43ab      	bics	r3, r5
     194:	2402      	movs	r4, #2
     196:	4323      	orrs	r3, r4
     198:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	270c      	movs	r7, #12
     19e:	43bb      	bics	r3, r7
     1a0:	2608      	movs	r6, #8
     1a2:	4333      	orrs	r3, r6
     1a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xd4>)
     1a8:	7b98      	ldrb	r0, [r3, #14]
     1aa:	2230      	movs	r2, #48	; 0x30
     1ac:	4390      	bics	r0, r2
     1ae:	2220      	movs	r2, #32
     1b0:	4310      	orrs	r0, r2
     1b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b4:	7b99      	ldrb	r1, [r3, #14]
     1b6:	43b9      	bics	r1, r7
     1b8:	4331      	orrs	r1, r6
     1ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1bc:	7b9a      	ldrb	r2, [r3, #14]
     1be:	43aa      	bics	r2, r5
     1c0:	4322      	orrs	r2, r4
     1c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c4:	4a0f      	ldr	r2, [pc, #60]	; (204 <Reset_Handler+0xd8>)
     1c6:	6853      	ldr	r3, [r2, #4]
     1c8:	2180      	movs	r1, #128	; 0x80
     1ca:	430b      	orrs	r3, r1
     1cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <Reset_Handler+0xdc>)
     1d0:	4798      	blx	r3
        main();
     1d2:	4b0e      	ldr	r3, [pc, #56]	; (20c <Reset_Handler+0xe0>)
     1d4:	4798      	blx	r3
     1d6:	e7fe      	b.n	1d6 <Reset_Handler+0xaa>
     1d8:	00002ad0 	.word	0x00002ad0
     1dc:	20000000 	.word	0x20000000
     1e0:	20000710 	.word	0x20000710
     1e4:	20000004 	.word	0x20000004
     1e8:	20000710 	.word	0x20000710
     1ec:	2000147c 	.word	0x2000147c
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	0000285d 	.word	0x0000285d
     20c:	00001415 	.word	0x00001415

00000210 <USART_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     210:	4a04      	ldr	r2, [pc, #16]	; (224 <USART_CLOCK_init+0x14>)
     212:	6a13      	ldr	r3, [r2, #32]
     214:	2110      	movs	r1, #16
     216:	430b      	orrs	r3, r1
     218:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     21a:	4a03      	ldr	r2, [pc, #12]	; (228 <USART_CLOCK_init+0x18>)
     21c:	4b03      	ldr	r3, [pc, #12]	; (22c <USART_CLOCK_init+0x1c>)
     21e:	805a      	strh	r2, [r3, #2]
void USART_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     220:	4770      	bx	lr
     222:	46c0      	nop			; (mov r8, r8)
     224:	40000400 	.word	0x40000400
     228:	00004216 	.word	0x00004216
     22c:	40000c00 	.word	0x40000c00

00000230 <USART_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_PORT_init()
{
     230:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     232:	4b0e      	ldr	r3, [pc, #56]	; (26c <USART_PORT_init+0x3c>)
     234:	224c      	movs	r2, #76	; 0x4c
     236:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     238:	2501      	movs	r5, #1
     23a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     23c:	2401      	movs	r4, #1
     23e:	4321      	orrs	r1, r4
     240:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     242:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     244:	2036      	movs	r0, #54	; 0x36
     246:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     248:	3a3d      	subs	r2, #61	; 0x3d
     24a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     24c:	3a0d      	subs	r2, #13
     24e:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     250:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     252:	214d      	movs	r1, #77	; 0x4d
     254:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     256:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     258:	4322      	orrs	r2, r4
     25a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     25c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     25e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     260:	393e      	subs	r1, #62	; 0x3e
     262:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     264:	3111      	adds	r1, #17
     266:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     268:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);

	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
}
     26a:	bd30      	pop	{r4, r5, pc}
     26c:	41004400 	.word	0x41004400

00000270 <USART_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_init(void)
{
     270:	b510      	push	{r4, lr}
     272:	b082      	sub	sp, #8
	USART_CLOCK_init();
     274:	4b06      	ldr	r3, [pc, #24]	; (290 <USART_init+0x20>)
     276:	4798      	blx	r3
	usart_async_init(&USART, SERCOM2, USART_buffer, USART_BUFFER_SIZE, (void *)NULL);
     278:	2300      	movs	r3, #0
     27a:	9300      	str	r3, [sp, #0]
     27c:	3310      	adds	r3, #16
     27e:	4a05      	ldr	r2, [pc, #20]	; (294 <USART_init+0x24>)
     280:	4905      	ldr	r1, [pc, #20]	; (298 <USART_init+0x28>)
     282:	4806      	ldr	r0, [pc, #24]	; (29c <USART_init+0x2c>)
     284:	4c06      	ldr	r4, [pc, #24]	; (2a0 <USART_init+0x30>)
     286:	47a0      	blx	r4
	USART_PORT_init();
     288:	4b06      	ldr	r3, [pc, #24]	; (2a4 <USART_init+0x34>)
     28a:	4798      	blx	r3
}
     28c:	b002      	add	sp, #8
     28e:	bd10      	pop	{r4, pc}
     290:	00000211 	.word	0x00000211
     294:	2000072c 	.word	0x2000072c
     298:	42001000 	.word	0x42001000
     29c:	20000798 	.word	0x20000798
     2a0:	00000d2d 	.word	0x00000d2d
     2a4:	00000231 	.word	0x00000231

000002a8 <system_init>:
	_pm_enable_bus_clock(PM_BUS_APBC, PTC);
	_gclk_enable_channel(PTC_GCLK_ID, CONF_GCLK_PTC_SRC);
}

void system_init(void)
{
     2a8:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2aa:	4b0d      	ldr	r3, [pc, #52]	; (2e0 <system_init+0x38>)
     2ac:	4798      	blx	r3
	init_mcu();

	USART_init();
     2ae:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <system_init+0x3c>)
     2b0:	4798      	blx	r3
		PM->APBAMASK.reg |= 1 << peripheral;
     2b2:	4c0d      	ldr	r4, [pc, #52]	; (2e8 <system_init+0x40>)
     2b4:	69a3      	ldr	r3, [r4, #24]
     2b6:	2220      	movs	r2, #32
     2b8:	4313      	orrs	r3, r2
     2ba:	61a3      	str	r3, [r4, #24]
     2bc:	4d0b      	ldr	r5, [pc, #44]	; (2ec <system_init+0x44>)
     2be:	4b0c      	ldr	r3, [pc, #48]	; (2f0 <system_init+0x48>)
     2c0:	806b      	strh	r3, [r5, #2]
	timer_init(&Timer, RTC, _rtc_get_timer());
     2c2:	4b0c      	ldr	r3, [pc, #48]	; (2f4 <system_init+0x4c>)
     2c4:	4798      	blx	r3
     2c6:	0002      	movs	r2, r0
     2c8:	490b      	ldr	r1, [pc, #44]	; (2f8 <system_init+0x50>)
     2ca:	480c      	ldr	r0, [pc, #48]	; (2fc <system_init+0x54>)
     2cc:	4b0c      	ldr	r3, [pc, #48]	; (300 <system_init+0x58>)
     2ce:	4798      	blx	r3
		PM->APBCMASK.reg |= 1 << peripheral;
     2d0:	6a22      	ldr	r2, [r4, #32]
     2d2:	2380      	movs	r3, #128	; 0x80
     2d4:	031b      	lsls	r3, r3, #12
     2d6:	4313      	orrs	r3, r2
     2d8:	6223      	str	r3, [r4, #32]
     2da:	4b0a      	ldr	r3, [pc, #40]	; (304 <system_init+0x5c>)
     2dc:	806b      	strh	r3, [r5, #2]

	Timer_init();

	PTC_clock_init();
}
     2de:	bd70      	pop	{r4, r5, r6, pc}
     2e0:	00000fc9 	.word	0x00000fc9
     2e4:	00000271 	.word	0x00000271
     2e8:	40000400 	.word	0x40000400
     2ec:	40000c00 	.word	0x40000c00
     2f0:	00004104 	.word	0x00004104
     2f4:	0000115b 	.word	0x0000115b
     2f8:	40001400 	.word	0x40001400
     2fc:	2000077c 	.word	0x2000077c
     300:	00000999 	.word	0x00000999
     304:	00004222 	.word	0x00004222

00000308 <touch_status_display>:
Input  : none
Output : none
Notes  : none
============================================================================*/
void touch_status_display(void)
{
     308:	b570      	push	{r4, r5, r6, lr}
	key_status = get_sensor_state(0) & KEY_TOUCHED_MASK;
     30a:	2000      	movs	r0, #0
     30c:	4efe      	ldr	r6, [pc, #1016]	; (708 <touch_status_display+0x400>)
     30e:	47b0      	blx	r6
     310:	4cfe      	ldr	r4, [pc, #1016]	; (70c <touch_status_display+0x404>)
     312:	257f      	movs	r5, #127	; 0x7f
     314:	43a8      	bics	r0, r5
     316:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(1) & KEY_TOUCHED_MASK;
     318:	2001      	movs	r0, #1
     31a:	47b0      	blx	r6
     31c:	43a8      	bics	r0, r5
     31e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(2) & KEY_TOUCHED_MASK;
     320:	2002      	movs	r0, #2
     322:	47b0      	blx	r6
     324:	43a8      	bics	r0, r5
     326:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(3) & KEY_TOUCHED_MASK;
     328:	2003      	movs	r0, #3
     32a:	47b0      	blx	r6
     32c:	43a8      	bics	r0, r5
     32e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(4) & KEY_TOUCHED_MASK;
     330:	2004      	movs	r0, #4
     332:	47b0      	blx	r6
     334:	43a8      	bics	r0, r5
     336:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(5) & KEY_TOUCHED_MASK;
     338:	2005      	movs	r0, #5
     33a:	47b0      	blx	r6
     33c:	43a8      	bics	r0, r5
     33e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(6) & KEY_TOUCHED_MASK;
     340:	2006      	movs	r0, #6
     342:	47b0      	blx	r6
     344:	43a8      	bics	r0, r5
     346:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(7) & KEY_TOUCHED_MASK;
     348:	2007      	movs	r0, #7
     34a:	47b0      	blx	r6
     34c:	43a8      	bics	r0, r5
     34e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(8) & KEY_TOUCHED_MASK;
     350:	2008      	movs	r0, #8
     352:	47b0      	blx	r6
     354:	43a8      	bics	r0, r5
     356:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(9) & KEY_TOUCHED_MASK;
     358:	2009      	movs	r0, #9
     35a:	47b0      	blx	r6
     35c:	43a8      	bics	r0, r5
     35e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(10) & KEY_TOUCHED_MASK;
     360:	200a      	movs	r0, #10
     362:	47b0      	blx	r6
     364:	43a8      	bics	r0, r5
     366:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(11) & KEY_TOUCHED_MASK;
     368:	200b      	movs	r0, #11
     36a:	47b0      	blx	r6
     36c:	43a8      	bics	r0, r5
     36e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(12) & KEY_TOUCHED_MASK;
     370:	200c      	movs	r0, #12
     372:	47b0      	blx	r6
     374:	43a8      	bics	r0, r5
     376:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(13) & KEY_TOUCHED_MASK;
     378:	200d      	movs	r0, #13
     37a:	47b0      	blx	r6
     37c:	43a8      	bics	r0, r5
     37e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(14) & KEY_TOUCHED_MASK;
     380:	200e      	movs	r0, #14
     382:	47b0      	blx	r6
     384:	43a8      	bics	r0, r5
     386:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(15) & KEY_TOUCHED_MASK;
     388:	200f      	movs	r0, #15
     38a:	47b0      	blx	r6
     38c:	43a8      	bics	r0, r5
     38e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(16) & KEY_TOUCHED_MASK;
     390:	2010      	movs	r0, #16
     392:	47b0      	blx	r6
     394:	43a8      	bics	r0, r5
     396:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(17) & KEY_TOUCHED_MASK;
     398:	2011      	movs	r0, #17
     39a:	47b0      	blx	r6
     39c:	43a8      	bics	r0, r5
     39e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(18) & KEY_TOUCHED_MASK;
     3a0:	2012      	movs	r0, #18
     3a2:	47b0      	blx	r6
     3a4:	43a8      	bics	r0, r5
     3a6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(19) & KEY_TOUCHED_MASK;
     3a8:	2013      	movs	r0, #19
     3aa:	47b0      	blx	r6
     3ac:	43a8      	bics	r0, r5
     3ae:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(20) & KEY_TOUCHED_MASK;
     3b0:	2014      	movs	r0, #20
     3b2:	47b0      	blx	r6
     3b4:	43a8      	bics	r0, r5
     3b6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(21) & KEY_TOUCHED_MASK;
     3b8:	2015      	movs	r0, #21
     3ba:	47b0      	blx	r6
     3bc:	43a8      	bics	r0, r5
     3be:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(22) & KEY_TOUCHED_MASK;
     3c0:	2016      	movs	r0, #22
     3c2:	47b0      	blx	r6
     3c4:	43a8      	bics	r0, r5
     3c6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(23) & KEY_TOUCHED_MASK;
     3c8:	2017      	movs	r0, #23
     3ca:	47b0      	blx	r6
     3cc:	43a8      	bics	r0, r5
     3ce:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(24) & KEY_TOUCHED_MASK;
     3d0:	2018      	movs	r0, #24
     3d2:	47b0      	blx	r6
     3d4:	43a8      	bics	r0, r5
     3d6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(25) & KEY_TOUCHED_MASK;
     3d8:	2019      	movs	r0, #25
     3da:	47b0      	blx	r6
     3dc:	43a8      	bics	r0, r5
     3de:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(26) & KEY_TOUCHED_MASK;
     3e0:	201a      	movs	r0, #26
     3e2:	47b0      	blx	r6
     3e4:	43a8      	bics	r0, r5
     3e6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(27) & KEY_TOUCHED_MASK;
     3e8:	201b      	movs	r0, #27
     3ea:	47b0      	blx	r6
     3ec:	43a8      	bics	r0, r5
     3ee:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(28) & KEY_TOUCHED_MASK;
     3f0:	201c      	movs	r0, #28
     3f2:	47b0      	blx	r6
     3f4:	43a8      	bics	r0, r5
     3f6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(29) & KEY_TOUCHED_MASK;
     3f8:	201d      	movs	r0, #29
     3fa:	47b0      	blx	r6
     3fc:	43a8      	bics	r0, r5
     3fe:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(30) & KEY_TOUCHED_MASK;
     400:	201e      	movs	r0, #30
     402:	47b0      	blx	r6
     404:	43a8      	bics	r0, r5
     406:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(31) & KEY_TOUCHED_MASK;
     408:	201f      	movs	r0, #31
     40a:	47b0      	blx	r6
     40c:	43a8      	bics	r0, r5
     40e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(32) & KEY_TOUCHED_MASK;
     410:	2020      	movs	r0, #32
     412:	47b0      	blx	r6
     414:	43a8      	bics	r0, r5
     416:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(33) & KEY_TOUCHED_MASK;
     418:	2021      	movs	r0, #33	; 0x21
     41a:	47b0      	blx	r6
     41c:	43a8      	bics	r0, r5
     41e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(34) & KEY_TOUCHED_MASK;
     420:	2022      	movs	r0, #34	; 0x22
     422:	47b0      	blx	r6
     424:	43a8      	bics	r0, r5
     426:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(35) & KEY_TOUCHED_MASK;
     428:	2023      	movs	r0, #35	; 0x23
     42a:	47b0      	blx	r6
     42c:	43a8      	bics	r0, r5
     42e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(36) & KEY_TOUCHED_MASK;
     430:	2024      	movs	r0, #36	; 0x24
     432:	47b0      	blx	r6
     434:	43a8      	bics	r0, r5
     436:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(37) & KEY_TOUCHED_MASK;
     438:	2025      	movs	r0, #37	; 0x25
     43a:	47b0      	blx	r6
     43c:	43a8      	bics	r0, r5
     43e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(38) & KEY_TOUCHED_MASK;
     440:	2026      	movs	r0, #38	; 0x26
     442:	47b0      	blx	r6
     444:	43a8      	bics	r0, r5
     446:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(39) & KEY_TOUCHED_MASK;
     448:	2027      	movs	r0, #39	; 0x27
     44a:	47b0      	blx	r6
     44c:	43a8      	bics	r0, r5
     44e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(40) & KEY_TOUCHED_MASK;
     450:	2028      	movs	r0, #40	; 0x28
     452:	47b0      	blx	r6
     454:	43a8      	bics	r0, r5
     456:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(41) & KEY_TOUCHED_MASK;
     458:	2029      	movs	r0, #41	; 0x29
     45a:	47b0      	blx	r6
     45c:	43a8      	bics	r0, r5
     45e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(42) & KEY_TOUCHED_MASK;
     460:	202a      	movs	r0, #42	; 0x2a
     462:	47b0      	blx	r6
     464:	43a8      	bics	r0, r5
     466:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(43) & KEY_TOUCHED_MASK;
     468:	202b      	movs	r0, #43	; 0x2b
     46a:	47b0      	blx	r6
     46c:	43a8      	bics	r0, r5
     46e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(44) & KEY_TOUCHED_MASK;
     470:	202c      	movs	r0, #44	; 0x2c
     472:	47b0      	blx	r6
     474:	43a8      	bics	r0, r5
     476:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(45) & KEY_TOUCHED_MASK;
     478:	202d      	movs	r0, #45	; 0x2d
     47a:	47b0      	blx	r6
     47c:	43a8      	bics	r0, r5
     47e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(46) & KEY_TOUCHED_MASK;
     480:	202e      	movs	r0, #46	; 0x2e
     482:	47b0      	blx	r6
     484:	43a8      	bics	r0, r5
     486:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(47) & KEY_TOUCHED_MASK;
     488:	202f      	movs	r0, #47	; 0x2f
     48a:	47b0      	blx	r6
     48c:	43a8      	bics	r0, r5
     48e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(48) & KEY_TOUCHED_MASK;
     490:	2030      	movs	r0, #48	; 0x30
     492:	47b0      	blx	r6
     494:	43a8      	bics	r0, r5
     496:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(49) & KEY_TOUCHED_MASK;
     498:	2031      	movs	r0, #49	; 0x31
     49a:	47b0      	blx	r6
     49c:	43a8      	bics	r0, r5
     49e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(50) & KEY_TOUCHED_MASK;
     4a0:	2032      	movs	r0, #50	; 0x32
     4a2:	47b0      	blx	r6
     4a4:	43a8      	bics	r0, r5
     4a6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(51) & KEY_TOUCHED_MASK;
     4a8:	2033      	movs	r0, #51	; 0x33
     4aa:	47b0      	blx	r6
     4ac:	43a8      	bics	r0, r5
     4ae:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(52) & KEY_TOUCHED_MASK;
     4b0:	2034      	movs	r0, #52	; 0x34
     4b2:	47b0      	blx	r6
     4b4:	43a8      	bics	r0, r5
     4b6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(53) & KEY_TOUCHED_MASK;
     4b8:	2035      	movs	r0, #53	; 0x35
     4ba:	47b0      	blx	r6
     4bc:	43a8      	bics	r0, r5
     4be:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(54) & KEY_TOUCHED_MASK;
     4c0:	2036      	movs	r0, #54	; 0x36
     4c2:	47b0      	blx	r6
     4c4:	43a8      	bics	r0, r5
     4c6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(55) & KEY_TOUCHED_MASK;
     4c8:	2037      	movs	r0, #55	; 0x37
     4ca:	47b0      	blx	r6
     4cc:	43a8      	bics	r0, r5
     4ce:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(56) & KEY_TOUCHED_MASK;
     4d0:	2038      	movs	r0, #56	; 0x38
     4d2:	47b0      	blx	r6
     4d4:	43a8      	bics	r0, r5
     4d6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(57) & KEY_TOUCHED_MASK;
     4d8:	2039      	movs	r0, #57	; 0x39
     4da:	47b0      	blx	r6
     4dc:	43a8      	bics	r0, r5
     4de:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(58) & KEY_TOUCHED_MASK;
     4e0:	203a      	movs	r0, #58	; 0x3a
     4e2:	47b0      	blx	r6
     4e4:	43a8      	bics	r0, r5
     4e6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(59) & KEY_TOUCHED_MASK;
     4e8:	203b      	movs	r0, #59	; 0x3b
     4ea:	47b0      	blx	r6
     4ec:	43a8      	bics	r0, r5
     4ee:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(60) & KEY_TOUCHED_MASK;
     4f0:	203c      	movs	r0, #60	; 0x3c
     4f2:	47b0      	blx	r6
     4f4:	43a8      	bics	r0, r5
     4f6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(61) & KEY_TOUCHED_MASK;
     4f8:	203d      	movs	r0, #61	; 0x3d
     4fa:	47b0      	blx	r6
     4fc:	43a8      	bics	r0, r5
     4fe:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(62) & KEY_TOUCHED_MASK;
     500:	203e      	movs	r0, #62	; 0x3e
     502:	47b0      	blx	r6
     504:	43a8      	bics	r0, r5
     506:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(63) & KEY_TOUCHED_MASK;
     508:	203f      	movs	r0, #63	; 0x3f
     50a:	47b0      	blx	r6
     50c:	43a8      	bics	r0, r5
     50e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(64) & KEY_TOUCHED_MASK;
     510:	2040      	movs	r0, #64	; 0x40
     512:	47b0      	blx	r6
     514:	43a8      	bics	r0, r5
     516:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(65) & KEY_TOUCHED_MASK;
     518:	2041      	movs	r0, #65	; 0x41
     51a:	47b0      	blx	r6
     51c:	43a8      	bics	r0, r5
     51e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(66) & KEY_TOUCHED_MASK;
     520:	2042      	movs	r0, #66	; 0x42
     522:	47b0      	blx	r6
     524:	43a8      	bics	r0, r5
     526:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(67) & KEY_TOUCHED_MASK;
     528:	2043      	movs	r0, #67	; 0x43
     52a:	47b0      	blx	r6
     52c:	43a8      	bics	r0, r5
     52e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(68) & KEY_TOUCHED_MASK;
     530:	2044      	movs	r0, #68	; 0x44
     532:	47b0      	blx	r6
     534:	43a8      	bics	r0, r5
     536:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(69) & KEY_TOUCHED_MASK;
     538:	2045      	movs	r0, #69	; 0x45
     53a:	47b0      	blx	r6
     53c:	43a8      	bics	r0, r5
     53e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(70) & KEY_TOUCHED_MASK;
     540:	2046      	movs	r0, #70	; 0x46
     542:	47b0      	blx	r6
     544:	43a8      	bics	r0, r5
     546:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(71) & KEY_TOUCHED_MASK;
     548:	2047      	movs	r0, #71	; 0x47
     54a:	47b0      	blx	r6
     54c:	43a8      	bics	r0, r5
     54e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(72) & KEY_TOUCHED_MASK;
     550:	2048      	movs	r0, #72	; 0x48
     552:	47b0      	blx	r6
     554:	43a8      	bics	r0, r5
     556:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(73) & KEY_TOUCHED_MASK;
     558:	2049      	movs	r0, #73	; 0x49
     55a:	47b0      	blx	r6
     55c:	43a8      	bics	r0, r5
     55e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(74) & KEY_TOUCHED_MASK;
     560:	204a      	movs	r0, #74	; 0x4a
     562:	47b0      	blx	r6
     564:	43a8      	bics	r0, r5
     566:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(75) & KEY_TOUCHED_MASK;
     568:	204b      	movs	r0, #75	; 0x4b
     56a:	47b0      	blx	r6
     56c:	43a8      	bics	r0, r5
     56e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(76) & KEY_TOUCHED_MASK;
     570:	204c      	movs	r0, #76	; 0x4c
     572:	47b0      	blx	r6
     574:	43a8      	bics	r0, r5
     576:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(77) & KEY_TOUCHED_MASK;
     578:	204d      	movs	r0, #77	; 0x4d
     57a:	47b0      	blx	r6
     57c:	43a8      	bics	r0, r5
     57e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(78) & KEY_TOUCHED_MASK;
     580:	204e      	movs	r0, #78	; 0x4e
     582:	47b0      	blx	r6
     584:	43a8      	bics	r0, r5
     586:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(79) & KEY_TOUCHED_MASK;
     588:	204f      	movs	r0, #79	; 0x4f
     58a:	47b0      	blx	r6
     58c:	43a8      	bics	r0, r5
     58e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(80) & KEY_TOUCHED_MASK;
     590:	2050      	movs	r0, #80	; 0x50
     592:	47b0      	blx	r6
     594:	43a8      	bics	r0, r5
     596:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(81) & KEY_TOUCHED_MASK;
     598:	2051      	movs	r0, #81	; 0x51
     59a:	47b0      	blx	r6
     59c:	43a8      	bics	r0, r5
     59e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(82) & KEY_TOUCHED_MASK;
     5a0:	2052      	movs	r0, #82	; 0x52
     5a2:	47b0      	blx	r6
     5a4:	43a8      	bics	r0, r5
     5a6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(83) & KEY_TOUCHED_MASK;
     5a8:	2053      	movs	r0, #83	; 0x53
     5aa:	47b0      	blx	r6
     5ac:	43a8      	bics	r0, r5
     5ae:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(84) & KEY_TOUCHED_MASK;
     5b0:	2054      	movs	r0, #84	; 0x54
     5b2:	47b0      	blx	r6
     5b4:	43a8      	bics	r0, r5
     5b6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(85) & KEY_TOUCHED_MASK;
     5b8:	2055      	movs	r0, #85	; 0x55
     5ba:	47b0      	blx	r6
     5bc:	43a8      	bics	r0, r5
     5be:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(86) & KEY_TOUCHED_MASK;
     5c0:	2056      	movs	r0, #86	; 0x56
     5c2:	47b0      	blx	r6
     5c4:	43a8      	bics	r0, r5
     5c6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(87) & KEY_TOUCHED_MASK;
     5c8:	2057      	movs	r0, #87	; 0x57
     5ca:	47b0      	blx	r6
     5cc:	43a8      	bics	r0, r5
     5ce:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(88) & KEY_TOUCHED_MASK;
     5d0:	2058      	movs	r0, #88	; 0x58
     5d2:	47b0      	blx	r6
     5d4:	43a8      	bics	r0, r5
     5d6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(89) & KEY_TOUCHED_MASK;
     5d8:	2059      	movs	r0, #89	; 0x59
     5da:	47b0      	blx	r6
     5dc:	43a8      	bics	r0, r5
     5de:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(90) & KEY_TOUCHED_MASK;
     5e0:	205a      	movs	r0, #90	; 0x5a
     5e2:	47b0      	blx	r6
     5e4:	43a8      	bics	r0, r5
     5e6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(91) & KEY_TOUCHED_MASK;
     5e8:	205b      	movs	r0, #91	; 0x5b
     5ea:	4e47      	ldr	r6, [pc, #284]	; (708 <touch_status_display+0x400>)
     5ec:	47b0      	blx	r6
     5ee:	4c47      	ldr	r4, [pc, #284]	; (70c <touch_status_display+0x404>)
     5f0:	43a8      	bics	r0, r5
     5f2:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(92) & KEY_TOUCHED_MASK;
     5f4:	205c      	movs	r0, #92	; 0x5c
     5f6:	47b0      	blx	r6
     5f8:	43a8      	bics	r0, r5
     5fa:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(93) & KEY_TOUCHED_MASK;
     5fc:	205d      	movs	r0, #93	; 0x5d
     5fe:	47b0      	blx	r6
     600:	43a8      	bics	r0, r5
     602:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(94) & KEY_TOUCHED_MASK;
     604:	205e      	movs	r0, #94	; 0x5e
     606:	47b0      	blx	r6
     608:	43a8      	bics	r0, r5
     60a:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(95) & KEY_TOUCHED_MASK;
     60c:	205f      	movs	r0, #95	; 0x5f
     60e:	47b0      	blx	r6
     610:	43a8      	bics	r0, r5
     612:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(96) & KEY_TOUCHED_MASK;
     614:	2060      	movs	r0, #96	; 0x60
     616:	47b0      	blx	r6
     618:	43a8      	bics	r0, r5
     61a:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(97) & KEY_TOUCHED_MASK;
     61c:	2061      	movs	r0, #97	; 0x61
     61e:	47b0      	blx	r6
     620:	43a8      	bics	r0, r5
     622:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(98) & KEY_TOUCHED_MASK;
     624:	2062      	movs	r0, #98	; 0x62
     626:	47b0      	blx	r6
     628:	43a8      	bics	r0, r5
     62a:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(99) & KEY_TOUCHED_MASK;
     62c:	2063      	movs	r0, #99	; 0x63
     62e:	47b0      	blx	r6
     630:	43a8      	bics	r0, r5
     632:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(100) & KEY_TOUCHED_MASK;
     634:	2064      	movs	r0, #100	; 0x64
     636:	47b0      	blx	r6
     638:	43a8      	bics	r0, r5
     63a:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(101) & KEY_TOUCHED_MASK;
     63c:	2065      	movs	r0, #101	; 0x65
     63e:	47b0      	blx	r6
     640:	43a8      	bics	r0, r5
     642:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(102) & KEY_TOUCHED_MASK;
     644:	2066      	movs	r0, #102	; 0x66
     646:	47b0      	blx	r6
     648:	43a8      	bics	r0, r5
     64a:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(103) & KEY_TOUCHED_MASK;
     64c:	2067      	movs	r0, #103	; 0x67
     64e:	47b0      	blx	r6
     650:	43a8      	bics	r0, r5
     652:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(104) & KEY_TOUCHED_MASK;
     654:	2068      	movs	r0, #104	; 0x68
     656:	47b0      	blx	r6
     658:	43a8      	bics	r0, r5
     65a:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(105) & KEY_TOUCHED_MASK;
     65c:	2069      	movs	r0, #105	; 0x69
     65e:	47b0      	blx	r6
     660:	43a8      	bics	r0, r5
     662:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(106) & KEY_TOUCHED_MASK;
     664:	206a      	movs	r0, #106	; 0x6a
     666:	47b0      	blx	r6
     668:	43a8      	bics	r0, r5
     66a:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(107) & KEY_TOUCHED_MASK;
     66c:	206b      	movs	r0, #107	; 0x6b
     66e:	47b0      	blx	r6
     670:	43a8      	bics	r0, r5
     672:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(108) & KEY_TOUCHED_MASK;
     674:	206c      	movs	r0, #108	; 0x6c
     676:	47b0      	blx	r6
     678:	43a8      	bics	r0, r5
     67a:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(109) & KEY_TOUCHED_MASK;
     67c:	206d      	movs	r0, #109	; 0x6d
     67e:	47b0      	blx	r6
     680:	43a8      	bics	r0, r5
     682:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(110) & KEY_TOUCHED_MASK;
     684:	206e      	movs	r0, #110	; 0x6e
     686:	47b0      	blx	r6
     688:	43a8      	bics	r0, r5
     68a:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(111) & KEY_TOUCHED_MASK;
     68c:	206f      	movs	r0, #111	; 0x6f
     68e:	47b0      	blx	r6
     690:	43a8      	bics	r0, r5
     692:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(112) & KEY_TOUCHED_MASK;
     694:	2070      	movs	r0, #112	; 0x70
     696:	47b0      	blx	r6
     698:	43a8      	bics	r0, r5
     69a:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(113) & KEY_TOUCHED_MASK;
     69c:	2071      	movs	r0, #113	; 0x71
     69e:	47b0      	blx	r6
     6a0:	43a8      	bics	r0, r5
     6a2:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(114) & KEY_TOUCHED_MASK;
     6a4:	2072      	movs	r0, #114	; 0x72
     6a6:	47b0      	blx	r6
     6a8:	43a8      	bics	r0, r5
     6aa:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(115) & KEY_TOUCHED_MASK;
     6ac:	2073      	movs	r0, #115	; 0x73
     6ae:	47b0      	blx	r6
     6b0:	43a8      	bics	r0, r5
     6b2:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(116) & KEY_TOUCHED_MASK;
     6b4:	2074      	movs	r0, #116	; 0x74
     6b6:	47b0      	blx	r6
     6b8:	43a8      	bics	r0, r5
     6ba:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(117) & KEY_TOUCHED_MASK;
     6bc:	2075      	movs	r0, #117	; 0x75
     6be:	47b0      	blx	r6
     6c0:	43a8      	bics	r0, r5
     6c2:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(118) & KEY_TOUCHED_MASK;
     6c4:	2076      	movs	r0, #118	; 0x76
     6c6:	47b0      	blx	r6
     6c8:	43a8      	bics	r0, r5
     6ca:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(119) & KEY_TOUCHED_MASK;
     6cc:	2077      	movs	r0, #119	; 0x77
     6ce:	47b0      	blx	r6
     6d0:	43a8      	bics	r0, r5
     6d2:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(120) & KEY_TOUCHED_MASK;
     6d4:	2078      	movs	r0, #120	; 0x78
     6d6:	47b0      	blx	r6
     6d8:	43a8      	bics	r0, r5
     6da:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(121) & KEY_TOUCHED_MASK;
     6dc:	2079      	movs	r0, #121	; 0x79
     6de:	47b0      	blx	r6
     6e0:	43a8      	bics	r0, r5
     6e2:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(122) & KEY_TOUCHED_MASK;
     6e4:	207a      	movs	r0, #122	; 0x7a
     6e6:	47b0      	blx	r6
     6e8:	43a8      	bics	r0, r5
     6ea:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(123) & KEY_TOUCHED_MASK;
     6ec:	207b      	movs	r0, #123	; 0x7b
     6ee:	47b0      	blx	r6
     6f0:	43a8      	bics	r0, r5
     6f2:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(124) & KEY_TOUCHED_MASK;
     6f4:	207c      	movs	r0, #124	; 0x7c
     6f6:	47b0      	blx	r6
     6f8:	43a8      	bics	r0, r5
     6fa:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(125) & KEY_TOUCHED_MASK;
     6fc:	207d      	movs	r0, #125	; 0x7d
     6fe:	47b0      	blx	r6
     700:	43a8      	bics	r0, r5
     702:	7020      	strb	r0, [r4, #0]
     704:	e004      	b.n	710 <touch_status_display+0x408>
     706:	46c0      	nop			; (mov r8, r8)
     708:	0000177d 	.word	0x0000177d
     70c:	2000073c 	.word	0x2000073c
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(126) & KEY_TOUCHED_MASK;
     710:	207e      	movs	r0, #126	; 0x7e
     712:	47b0      	blx	r6
     714:	43a8      	bics	r0, r5
     716:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(127) & KEY_TOUCHED_MASK;
     718:	207f      	movs	r0, #127	; 0x7f
     71a:	47b0      	blx	r6
     71c:	43a8      	bics	r0, r5
     71e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(128) & KEY_TOUCHED_MASK;
     720:	2080      	movs	r0, #128	; 0x80
     722:	47b0      	blx	r6
     724:	43a8      	bics	r0, r5
     726:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(129) & KEY_TOUCHED_MASK;
     728:	2081      	movs	r0, #129	; 0x81
     72a:	47b0      	blx	r6
     72c:	43a8      	bics	r0, r5
     72e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(130) & KEY_TOUCHED_MASK;
     730:	2082      	movs	r0, #130	; 0x82
     732:	47b0      	blx	r6
     734:	43a8      	bics	r0, r5
     736:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(131) & KEY_TOUCHED_MASK;
     738:	2083      	movs	r0, #131	; 0x83
     73a:	47b0      	blx	r6
     73c:	43a8      	bics	r0, r5
     73e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(132) & KEY_TOUCHED_MASK;
     740:	2084      	movs	r0, #132	; 0x84
     742:	47b0      	blx	r6
     744:	43a8      	bics	r0, r5
     746:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(133) & KEY_TOUCHED_MASK;
     748:	2085      	movs	r0, #133	; 0x85
     74a:	47b0      	blx	r6
     74c:	43a8      	bics	r0, r5
     74e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(134) & KEY_TOUCHED_MASK;
     750:	2086      	movs	r0, #134	; 0x86
     752:	47b0      	blx	r6
     754:	43a8      	bics	r0, r5
     756:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(135) & KEY_TOUCHED_MASK;
     758:	2087      	movs	r0, #135	; 0x87
     75a:	47b0      	blx	r6
     75c:	43a8      	bics	r0, r5
     75e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(136) & KEY_TOUCHED_MASK;
     760:	2088      	movs	r0, #136	; 0x88
     762:	47b0      	blx	r6
     764:	43a8      	bics	r0, r5
     766:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(137) & KEY_TOUCHED_MASK;
     768:	2089      	movs	r0, #137	; 0x89
     76a:	47b0      	blx	r6
     76c:	43a8      	bics	r0, r5
     76e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(138) & KEY_TOUCHED_MASK;
     770:	208a      	movs	r0, #138	; 0x8a
     772:	47b0      	blx	r6
     774:	43a8      	bics	r0, r5
     776:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(139) & KEY_TOUCHED_MASK;
     778:	208b      	movs	r0, #139	; 0x8b
     77a:	47b0      	blx	r6
     77c:	43a8      	bics	r0, r5
     77e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(140) & KEY_TOUCHED_MASK;
     780:	208c      	movs	r0, #140	; 0x8c
     782:	47b0      	blx	r6
     784:	43a8      	bics	r0, r5
     786:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(141) & KEY_TOUCHED_MASK;
     788:	208d      	movs	r0, #141	; 0x8d
     78a:	47b0      	blx	r6
     78c:	43a8      	bics	r0, r5
     78e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(142) & KEY_TOUCHED_MASK;
     790:	208e      	movs	r0, #142	; 0x8e
     792:	47b0      	blx	r6
     794:	43a8      	bics	r0, r5
     796:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(143) & KEY_TOUCHED_MASK;
     798:	208f      	movs	r0, #143	; 0x8f
     79a:	47b0      	blx	r6
     79c:	43a8      	bics	r0, r5
     79e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(144) & KEY_TOUCHED_MASK;
     7a0:	2090      	movs	r0, #144	; 0x90
     7a2:	47b0      	blx	r6
     7a4:	43a8      	bics	r0, r5
     7a6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(145) & KEY_TOUCHED_MASK;
     7a8:	2091      	movs	r0, #145	; 0x91
     7aa:	47b0      	blx	r6
     7ac:	43a8      	bics	r0, r5
     7ae:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(146) & KEY_TOUCHED_MASK;
     7b0:	2092      	movs	r0, #146	; 0x92
     7b2:	47b0      	blx	r6
     7b4:	43a8      	bics	r0, r5
     7b6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(147) & KEY_TOUCHED_MASK;
     7b8:	2093      	movs	r0, #147	; 0x93
     7ba:	47b0      	blx	r6
     7bc:	43a8      	bics	r0, r5
     7be:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(148) & KEY_TOUCHED_MASK;
     7c0:	2094      	movs	r0, #148	; 0x94
     7c2:	47b0      	blx	r6
     7c4:	43a8      	bics	r0, r5
     7c6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(149) & KEY_TOUCHED_MASK;
     7c8:	2095      	movs	r0, #149	; 0x95
     7ca:	47b0      	blx	r6
     7cc:	43a8      	bics	r0, r5
     7ce:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(150) & KEY_TOUCHED_MASK;
     7d0:	2096      	movs	r0, #150	; 0x96
     7d2:	47b0      	blx	r6
     7d4:	43a8      	bics	r0, r5
     7d6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(151) & KEY_TOUCHED_MASK;
     7d8:	2097      	movs	r0, #151	; 0x97
     7da:	47b0      	blx	r6
     7dc:	43a8      	bics	r0, r5
     7de:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(152) & KEY_TOUCHED_MASK;
     7e0:	2098      	movs	r0, #152	; 0x98
     7e2:	47b0      	blx	r6
     7e4:	43a8      	bics	r0, r5
     7e6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(153) & KEY_TOUCHED_MASK;
     7e8:	2099      	movs	r0, #153	; 0x99
     7ea:	47b0      	blx	r6
     7ec:	43a8      	bics	r0, r5
     7ee:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(154) & KEY_TOUCHED_MASK;
     7f0:	209a      	movs	r0, #154	; 0x9a
     7f2:	47b0      	blx	r6
     7f4:	43a8      	bics	r0, r5
     7f6:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(155) & KEY_TOUCHED_MASK;
     7f8:	209b      	movs	r0, #155	; 0x9b
     7fa:	47b0      	blx	r6
     7fc:	43a8      	bics	r0, r5
     7fe:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(156) & KEY_TOUCHED_MASK;
     800:	209c      	movs	r0, #156	; 0x9c
     802:	47b0      	blx	r6
     804:	43a8      	bics	r0, r5
     806:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(157) & KEY_TOUCHED_MASK;
     808:	209d      	movs	r0, #157	; 0x9d
     80a:	47b0      	blx	r6
     80c:	43a8      	bics	r0, r5
     80e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(158) & KEY_TOUCHED_MASK;
     810:	209e      	movs	r0, #158	; 0x9e
     812:	47b0      	blx	r6
     814:	43a8      	bics	r0, r5
     816:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
	key_status = get_sensor_state(159) & KEY_TOUCHED_MASK;
     818:	209f      	movs	r0, #159	; 0x9f
     81a:	47b0      	blx	r6
     81c:	43a8      	bics	r0, r5
     81e:	7020      	strb	r0, [r4, #0]
	if (0u != key_status) {
		// LED_ON
	} else {
		// LED_OFF
	}
}
     820:	bd70      	pop	{r4, r5, r6, pc}
     822:	46c0      	nop			; (mov r8, r8)

00000824 <touch_example>:
{
     824:	b510      	push	{r4, lr}
	touch_process();
     826:	4b06      	ldr	r3, [pc, #24]	; (840 <touch_example+0x1c>)
     828:	4798      	blx	r3
	if (measurement_done_touch == 1) {
     82a:	4b06      	ldr	r3, [pc, #24]	; (844 <touch_example+0x20>)
     82c:	781b      	ldrb	r3, [r3, #0]
     82e:	2b01      	cmp	r3, #1
     830:	d000      	beq.n	834 <touch_example+0x10>
}
     832:	bd10      	pop	{r4, pc}
		measurement_done_touch = 0;
     834:	2200      	movs	r2, #0
     836:	4b03      	ldr	r3, [pc, #12]	; (844 <touch_example+0x20>)
     838:	701a      	strb	r2, [r3, #0]
		touch_status_display();
     83a:	4b03      	ldr	r3, [pc, #12]	; (848 <touch_example+0x24>)
     83c:	4798      	blx	r3
}
     83e:	e7f8      	b.n	832 <touch_example+0xe>
     840:	000015bd 	.word	0x000015bd
     844:	2000074b 	.word	0x2000074b
     848:	00000309 	.word	0x00000309

0000084c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     84c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     850:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     852:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     854:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     858:	4770      	bx	lr

0000085a <atomic_leave_critical>:
     85a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     85e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     860:	f383 8810 	msr	PRIMASK, r3
}
     864:	4770      	bx	lr
	...

00000868 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     868:	b570      	push	{r4, r5, r6, lr}
     86a:	0006      	movs	r6, r0
     86c:	000c      	movs	r4, r1
     86e:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     870:	2800      	cmp	r0, #0
     872:	d00d      	beq.n	890 <io_write+0x28>
     874:	0008      	movs	r0, r1
     876:	1e43      	subs	r3, r0, #1
     878:	4198      	sbcs	r0, r3
     87a:	b2c0      	uxtb	r0, r0
     87c:	2234      	movs	r2, #52	; 0x34
     87e:	4905      	ldr	r1, [pc, #20]	; (894 <io_write+0x2c>)
     880:	4b05      	ldr	r3, [pc, #20]	; (898 <io_write+0x30>)
     882:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     884:	6833      	ldr	r3, [r6, #0]
     886:	002a      	movs	r2, r5
     888:	0021      	movs	r1, r4
     88a:	0030      	movs	r0, r6
     88c:	4798      	blx	r3
}
     88e:	bd70      	pop	{r4, r5, r6, pc}
     890:	2000      	movs	r0, #0
     892:	e7f3      	b.n	87c <io_write+0x14>
     894:	0000298c 	.word	0x0000298c
     898:	00000e19 	.word	0x00000e19

0000089c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     89e:	46ce      	mov	lr, r9
     8a0:	4647      	mov	r7, r8
     8a2:	b580      	push	{r7, lr}
     8a4:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     8a6:	6803      	ldr	r3, [r0, #0]
     8a8:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     8aa:	2b00      	cmp	r3, #0
     8ac:	d005      	beq.n	8ba <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     8ae:	688e      	ldr	r6, [r1, #8]
     8b0:	001c      	movs	r4, r3
     8b2:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     8b4:	2701      	movs	r7, #1
     8b6:	1abf      	subs	r7, r7, r2
     8b8:	e00d      	b.n	8d6 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     8ba:	4b12      	ldr	r3, [pc, #72]	; (904 <timer_add_timer_task+0x68>)
     8bc:	4798      	blx	r3
		return;
     8be:	e018      	b.n	8f2 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     8c0:	18fb      	adds	r3, r7, r3
     8c2:	68a0      	ldr	r0, [r4, #8]
     8c4:	4680      	mov	r8, r0
     8c6:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     8c8:	42b3      	cmp	r3, r6
     8ca:	d20c      	bcs.n	8e6 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     8cc:	6823      	ldr	r3, [r4, #0]
     8ce:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     8d0:	2b00      	cmp	r3, #0
     8d2:	d00b      	beq.n	8ec <timer_add_timer_task+0x50>
     8d4:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     8d6:	6863      	ldr	r3, [r4, #4]
     8d8:	4293      	cmp	r3, r2
     8da:	d8f1      	bhi.n	8c0 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     8dc:	68a0      	ldr	r0, [r4, #8]
     8de:	4680      	mov	r8, r0
     8e0:	4443      	add	r3, r8
     8e2:	1a9b      	subs	r3, r3, r2
     8e4:	e7f0      	b.n	8c8 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     8e6:	45a4      	cmp	ip, r4
     8e8:	d007      	beq.n	8fa <timer_add_timer_task+0x5e>
     8ea:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     8ec:	0020      	movs	r0, r4
     8ee:	4b06      	ldr	r3, [pc, #24]	; (908 <timer_add_timer_task+0x6c>)
     8f0:	4798      	blx	r3
	}
}
     8f2:	bc0c      	pop	{r2, r3}
     8f4:	4690      	mov	r8, r2
     8f6:	4699      	mov	r9, r3
     8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     8fa:	4648      	mov	r0, r9
     8fc:	4b01      	ldr	r3, [pc, #4]	; (904 <timer_add_timer_task+0x68>)
     8fe:	4798      	blx	r3
     900:	e7f7      	b.n	8f2 <timer_add_timer_task+0x56>
     902:	46c0      	nop			; (mov r8, r8)
     904:	00000e45 	.word	0x00000e45
     908:	00000e71 	.word	0x00000e71

0000090c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     90c:	b5f0      	push	{r4, r5, r6, r7, lr}
     90e:	46c6      	mov	lr, r8
     910:	b500      	push	{lr}
     912:	b082      	sub	sp, #8
     914:	0007      	movs	r7, r0
	return (void *)list->head;
     916:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     918:	6903      	ldr	r3, [r0, #16]
     91a:	3301      	adds	r3, #1
     91c:	4698      	mov	r8, r3
     91e:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     920:	7e03      	ldrb	r3, [r0, #24]
     922:	07db      	lsls	r3, r3, #31
     924:	d411      	bmi.n	94a <timer_process_counted+0x3e>
     926:	7e03      	ldrb	r3, [r0, #24]
     928:	079b      	lsls	r3, r3, #30
     92a:	d40e      	bmi.n	94a <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     92c:	2c00      	cmp	r4, #0
     92e:	d010      	beq.n	952 <timer_process_counted+0x46>
     930:	4643      	mov	r3, r8
     932:	6862      	ldr	r2, [r4, #4]
     934:	1a9b      	subs	r3, r3, r2
     936:	68a2      	ldr	r2, [r4, #8]
     938:	4293      	cmp	r3, r2
     93a:	d30a      	bcc.n	952 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     93c:	2314      	movs	r3, #20
     93e:	469c      	mov	ip, r3
     940:	4484      	add	ip, r0
     942:	4663      	mov	r3, ip
     944:	9301      	str	r3, [sp, #4]
     946:	4e12      	ldr	r6, [pc, #72]	; (990 <timer_process_counted+0x84>)
     948:	e014      	b.n	974 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     94a:	7e3b      	ldrb	r3, [r7, #24]
     94c:	2202      	movs	r2, #2
     94e:	4313      	orrs	r3, r2
     950:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     952:	b002      	add	sp, #8
     954:	bc04      	pop	{r2}
     956:	4690      	mov	r8, r2
     958:	bdf0      	pop	{r4, r5, r6, r7, pc}
     95a:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     95c:	68e3      	ldr	r3, [r4, #12]
     95e:	0020      	movs	r0, r4
     960:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     962:	2d00      	cmp	r5, #0
     964:	d0f5      	beq.n	952 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     966:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     968:	4643      	mov	r3, r8
     96a:	686a      	ldr	r2, [r5, #4]
     96c:	1a9b      	subs	r3, r3, r2
     96e:	68aa      	ldr	r2, [r5, #8]
     970:	4293      	cmp	r3, r2
     972:	d3ee      	bcc.n	952 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     974:	9801      	ldr	r0, [sp, #4]
     976:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     978:	7c23      	ldrb	r3, [r4, #16]
     97a:	2b01      	cmp	r3, #1
     97c:	d1ed      	bne.n	95a <timer_process_counted+0x4e>
			tmp->time_label = time;
     97e:	4643      	mov	r3, r8
     980:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     982:	4642      	mov	r2, r8
     984:	0021      	movs	r1, r4
     986:	9801      	ldr	r0, [sp, #4]
     988:	4b02      	ldr	r3, [pc, #8]	; (994 <timer_process_counted+0x88>)
     98a:	4798      	blx	r3
     98c:	e7e5      	b.n	95a <timer_process_counted+0x4e>
     98e:	46c0      	nop			; (mov r8, r8)
     990:	00000e79 	.word	0x00000e79
     994:	0000089d 	.word	0x0000089d

00000998 <timer_init>:
{
     998:	b570      	push	{r4, r5, r6, lr}
     99a:	0005      	movs	r5, r0
     99c:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     99e:	2800      	cmp	r0, #0
     9a0:	d011      	beq.n	9c6 <timer_init+0x2e>
     9a2:	0008      	movs	r0, r1
     9a4:	1e43      	subs	r3, r0, #1
     9a6:	4198      	sbcs	r0, r3
     9a8:	b2c0      	uxtb	r0, r0
     9aa:	223b      	movs	r2, #59	; 0x3b
     9ac:	4907      	ldr	r1, [pc, #28]	; (9cc <timer_init+0x34>)
     9ae:	4b08      	ldr	r3, [pc, #32]	; (9d0 <timer_init+0x38>)
     9b0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     9b2:	0021      	movs	r1, r4
     9b4:	0028      	movs	r0, r5
     9b6:	4b07      	ldr	r3, [pc, #28]	; (9d4 <timer_init+0x3c>)
     9b8:	4798      	blx	r3
	descr->time                           = 0;
     9ba:	2300      	movs	r3, #0
     9bc:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     9be:	4b06      	ldr	r3, [pc, #24]	; (9d8 <timer_init+0x40>)
     9c0:	602b      	str	r3, [r5, #0]
}
     9c2:	2000      	movs	r0, #0
     9c4:	bd70      	pop	{r4, r5, r6, pc}
     9c6:	2000      	movs	r0, #0
     9c8:	e7ef      	b.n	9aa <timer_init+0x12>
     9ca:	46c0      	nop			; (mov r8, r8)
     9cc:	000029a0 	.word	0x000029a0
     9d0:	00000e19 	.word	0x00000e19
     9d4:	00001099 	.word	0x00001099
     9d8:	0000090d 	.word	0x0000090d

000009dc <timer_start>:
{
     9dc:	b510      	push	{r4, lr}
     9de:	0004      	movs	r4, r0
	ASSERT(descr);
     9e0:	1e43      	subs	r3, r0, #1
     9e2:	4198      	sbcs	r0, r3
     9e4:	b2c0      	uxtb	r0, r0
     9e6:	2253      	movs	r2, #83	; 0x53
     9e8:	4907      	ldr	r1, [pc, #28]	; (a08 <timer_start+0x2c>)
     9ea:	4b08      	ldr	r3, [pc, #32]	; (a0c <timer_start+0x30>)
     9ec:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     9ee:	0020      	movs	r0, r4
     9f0:	4b07      	ldr	r3, [pc, #28]	; (a10 <timer_start+0x34>)
     9f2:	4798      	blx	r3
     9f4:	2800      	cmp	r0, #0
     9f6:	d104      	bne.n	a02 <timer_start+0x26>
	_timer_start(&descr->device);
     9f8:	0020      	movs	r0, r4
     9fa:	4b06      	ldr	r3, [pc, #24]	; (a14 <timer_start+0x38>)
     9fc:	4798      	blx	r3
	return ERR_NONE;
     9fe:	2000      	movs	r0, #0
}
     a00:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     a02:	2011      	movs	r0, #17
     a04:	4240      	negs	r0, r0
     a06:	e7fb      	b.n	a00 <timer_start+0x24>
     a08:	000029a0 	.word	0x000029a0
     a0c:	00000e19 	.word	0x00000e19
     a10:	00001149 	.word	0x00001149
     a14:	000010f5 	.word	0x000010f5

00000a18 <timer_add_task>:
{
     a18:	b570      	push	{r4, r5, r6, lr}
     a1a:	b082      	sub	sp, #8
     a1c:	0004      	movs	r4, r0
     a1e:	000d      	movs	r5, r1
	ASSERT(descr && task);
     a20:	2800      	cmp	r0, #0
     a22:	d024      	beq.n	a6e <timer_add_task+0x56>
     a24:	0008      	movs	r0, r1
     a26:	1e43      	subs	r3, r0, #1
     a28:	4198      	sbcs	r0, r3
     a2a:	b2c0      	uxtb	r0, r0
     a2c:	227a      	movs	r2, #122	; 0x7a
     a2e:	491e      	ldr	r1, [pc, #120]	; (aa8 <timer_add_task+0x90>)
     a30:	4b1e      	ldr	r3, [pc, #120]	; (aac <timer_add_task+0x94>)
     a32:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     a34:	7e23      	ldrb	r3, [r4, #24]
     a36:	2201      	movs	r2, #1
     a38:	4313      	orrs	r3, r2
     a3a:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     a3c:	0026      	movs	r6, r4
     a3e:	3614      	adds	r6, #20
     a40:	0029      	movs	r1, r5
     a42:	0030      	movs	r0, r6
     a44:	4b1a      	ldr	r3, [pc, #104]	; (ab0 <timer_add_task+0x98>)
     a46:	4798      	blx	r3
     a48:	2800      	cmp	r0, #0
     a4a:	d112      	bne.n	a72 <timer_add_task+0x5a>
	task->time_label = descr->time;
     a4c:	6923      	ldr	r3, [r4, #16]
     a4e:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     a50:	6922      	ldr	r2, [r4, #16]
     a52:	0029      	movs	r1, r5
     a54:	0030      	movs	r0, r6
     a56:	4b17      	ldr	r3, [pc, #92]	; (ab4 <timer_add_task+0x9c>)
     a58:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     a5a:	7e23      	ldrb	r3, [r4, #24]
     a5c:	2201      	movs	r2, #1
     a5e:	4393      	bics	r3, r2
     a60:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     a62:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     a64:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     a66:	079b      	lsls	r3, r3, #30
     a68:	d40f      	bmi.n	a8a <timer_add_task+0x72>
}
     a6a:	b002      	add	sp, #8
     a6c:	bd70      	pop	{r4, r5, r6, pc}
     a6e:	2000      	movs	r0, #0
     a70:	e7dc      	b.n	a2c <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     a72:	7e23      	ldrb	r3, [r4, #24]
     a74:	2201      	movs	r2, #1
     a76:	4393      	bics	r3, r2
     a78:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     a7a:	327e      	adds	r2, #126	; 0x7e
     a7c:	490a      	ldr	r1, [pc, #40]	; (aa8 <timer_add_task+0x90>)
     a7e:	2000      	movs	r0, #0
     a80:	4b0a      	ldr	r3, [pc, #40]	; (aac <timer_add_task+0x94>)
     a82:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     a84:	2012      	movs	r0, #18
     a86:	4240      	negs	r0, r0
     a88:	e7ef      	b.n	a6a <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     a8a:	a801      	add	r0, sp, #4
     a8c:	4b0a      	ldr	r3, [pc, #40]	; (ab8 <timer_add_task+0xa0>)
     a8e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     a90:	7e23      	ldrb	r3, [r4, #24]
     a92:	2202      	movs	r2, #2
     a94:	4393      	bics	r3, r2
     a96:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     a98:	0020      	movs	r0, r4
     a9a:	4b08      	ldr	r3, [pc, #32]	; (abc <timer_add_task+0xa4>)
     a9c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     a9e:	a801      	add	r0, sp, #4
     aa0:	4b07      	ldr	r3, [pc, #28]	; (ac0 <timer_add_task+0xa8>)
     aa2:	4798      	blx	r3
	return ERR_NONE;
     aa4:	2000      	movs	r0, #0
     aa6:	e7e0      	b.n	a6a <timer_add_task+0x52>
     aa8:	000029a0 	.word	0x000029a0
     aac:	00000e19 	.word	0x00000e19
     ab0:	00000e21 	.word	0x00000e21
     ab4:	0000089d 	.word	0x0000089d
     ab8:	0000084d 	.word	0x0000084d
     abc:	00001159 	.word	0x00001159
     ac0:	0000085b 	.word	0x0000085b

00000ac4 <timer_remove_task>:
{
     ac4:	b570      	push	{r4, r5, r6, lr}
     ac6:	b082      	sub	sp, #8
     ac8:	0004      	movs	r4, r0
     aca:	000d      	movs	r5, r1
	ASSERT(descr && task);
     acc:	2800      	cmp	r0, #0
     ace:	d021      	beq.n	b14 <timer_remove_task+0x50>
     ad0:	0008      	movs	r0, r1
     ad2:	1e43      	subs	r3, r0, #1
     ad4:	4198      	sbcs	r0, r3
     ad6:	b2c0      	uxtb	r0, r0
     ad8:	2295      	movs	r2, #149	; 0x95
     ada:	491c      	ldr	r1, [pc, #112]	; (b4c <timer_remove_task+0x88>)
     adc:	4b1c      	ldr	r3, [pc, #112]	; (b50 <timer_remove_task+0x8c>)
     ade:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     ae0:	7e23      	ldrb	r3, [r4, #24]
     ae2:	2201      	movs	r2, #1
     ae4:	4313      	orrs	r3, r2
     ae6:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
     ae8:	0026      	movs	r6, r4
     aea:	3614      	adds	r6, #20
     aec:	0029      	movs	r1, r5
     aee:	0030      	movs	r0, r6
     af0:	4b18      	ldr	r3, [pc, #96]	; (b54 <timer_remove_task+0x90>)
     af2:	4798      	blx	r3
     af4:	2800      	cmp	r0, #0
     af6:	d00f      	beq.n	b18 <timer_remove_task+0x54>
	list_delete_element(&descr->tasks, task);
     af8:	0029      	movs	r1, r5
     afa:	0030      	movs	r0, r6
     afc:	4b16      	ldr	r3, [pc, #88]	; (b58 <timer_remove_task+0x94>)
     afe:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     b00:	7e23      	ldrb	r3, [r4, #24]
     b02:	2201      	movs	r2, #1
     b04:	4393      	bics	r3, r2
     b06:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     b08:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     b0a:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     b0c:	079b      	lsls	r3, r3, #30
     b0e:	d40e      	bmi.n	b2e <timer_remove_task+0x6a>
}
     b10:	b002      	add	sp, #8
     b12:	bd70      	pop	{r4, r5, r6, pc}
     b14:	2000      	movs	r0, #0
     b16:	e7df      	b.n	ad8 <timer_remove_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     b18:	7e23      	ldrb	r3, [r4, #24]
     b1a:	2201      	movs	r2, #1
     b1c:	4393      	bics	r3, r2
     b1e:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     b20:	3299      	adds	r2, #153	; 0x99
     b22:	490a      	ldr	r1, [pc, #40]	; (b4c <timer_remove_task+0x88>)
     b24:	4b0a      	ldr	r3, [pc, #40]	; (b50 <timer_remove_task+0x8c>)
     b26:	4798      	blx	r3
		return ERR_NOT_FOUND;
     b28:	200a      	movs	r0, #10
     b2a:	4240      	negs	r0, r0
     b2c:	e7f0      	b.n	b10 <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
     b2e:	a801      	add	r0, sp, #4
     b30:	4b0a      	ldr	r3, [pc, #40]	; (b5c <timer_remove_task+0x98>)
     b32:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     b34:	7e23      	ldrb	r3, [r4, #24]
     b36:	2202      	movs	r2, #2
     b38:	4393      	bics	r3, r2
     b3a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     b3c:	0020      	movs	r0, r4
     b3e:	4b08      	ldr	r3, [pc, #32]	; (b60 <timer_remove_task+0x9c>)
     b40:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     b42:	a801      	add	r0, sp, #4
     b44:	4b07      	ldr	r3, [pc, #28]	; (b64 <timer_remove_task+0xa0>)
     b46:	4798      	blx	r3
	return ERR_NONE;
     b48:	2000      	movs	r0, #0
     b4a:	e7e1      	b.n	b10 <timer_remove_task+0x4c>
     b4c:	000029a0 	.word	0x000029a0
     b50:	00000e19 	.word	0x00000e19
     b54:	00000e21 	.word	0x00000e21
     b58:	00000e87 	.word	0x00000e87
     b5c:	0000084d 	.word	0x0000084d
     b60:	00001159 	.word	0x00001159
     b64:	0000085b 	.word	0x0000085b

00000b68 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     b68:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     b6a:	3808      	subs	r0, #8

	descr->stat = 0;
     b6c:	2300      	movs	r3, #0
     b6e:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
     b72:	2b00      	cmp	r3, #0
     b74:	d000      	beq.n	b78 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     b76:	4798      	blx	r3
	}
}
     b78:	bd10      	pop	{r4, pc}

00000b7a <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     b7a:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     b7c:	3808      	subs	r0, #8

	descr->stat = 0;
     b7e:	2300      	movs	r3, #0
     b80:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     b82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     b84:	2b00      	cmp	r3, #0
     b86:	d000      	beq.n	b8a <usart_error+0x10>
		descr->usart_cb.error(descr);
     b88:	4798      	blx	r3
	}
}
     b8a:	bd10      	pop	{r4, pc}

00000b8c <usart_fill_rx_buffer>:
{
     b8c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     b8e:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     b90:	302c      	adds	r0, #44	; 0x2c
     b92:	4b04      	ldr	r3, [pc, #16]	; (ba4 <usart_fill_rx_buffer+0x18>)
     b94:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     b96:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     b98:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     b9a:	2b00      	cmp	r3, #0
     b9c:	d001      	beq.n	ba2 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     b9e:	0020      	movs	r0, r4
     ba0:	4798      	blx	r3
}
     ba2:	bd10      	pop	{r4, pc}
     ba4:	00000f65 	.word	0x00000f65

00000ba8 <usart_async_write>:
{
     ba8:	b570      	push	{r4, r5, r6, lr}
     baa:	0004      	movs	r4, r0
     bac:	000e      	movs	r6, r1
     bae:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     bb0:	2800      	cmp	r0, #0
     bb2:	d01d      	beq.n	bf0 <usart_async_write+0x48>
     bb4:	2900      	cmp	r1, #0
     bb6:	d01d      	beq.n	bf4 <usart_async_write+0x4c>
     bb8:	0010      	movs	r0, r2
     bba:	1e43      	subs	r3, r0, #1
     bbc:	4198      	sbcs	r0, r3
     bbe:	223c      	movs	r2, #60	; 0x3c
     bc0:	32ff      	adds	r2, #255	; 0xff
     bc2:	490f      	ldr	r1, [pc, #60]	; (c00 <usart_async_write+0x58>)
     bc4:	4b0f      	ldr	r3, [pc, #60]	; (c04 <usart_async_write+0x5c>)
     bc6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     bc8:	2344      	movs	r3, #68	; 0x44
     bca:	5ae2      	ldrh	r2, [r4, r3]
     bcc:	3308      	adds	r3, #8
     bce:	5ae3      	ldrh	r3, [r4, r3]
     bd0:	429a      	cmp	r2, r3
     bd2:	d111      	bne.n	bf8 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     bd4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     bd6:	234c      	movs	r3, #76	; 0x4c
     bd8:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     bda:	2200      	movs	r2, #0
     bdc:	3b08      	subs	r3, #8
     bde:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     be0:	3b43      	subs	r3, #67	; 0x43
     be2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     be4:	0020      	movs	r0, r4
     be6:	3008      	adds	r0, #8
     be8:	4b07      	ldr	r3, [pc, #28]	; (c08 <usart_async_write+0x60>)
     bea:	4798      	blx	r3
	return (int32_t)length;
     bec:	0028      	movs	r0, r5
}
     bee:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     bf0:	2000      	movs	r0, #0
     bf2:	e7e4      	b.n	bbe <usart_async_write+0x16>
     bf4:	2000      	movs	r0, #0
     bf6:	e7e2      	b.n	bbe <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     bf8:	201c      	movs	r0, #28
     bfa:	4240      	negs	r0, r0
     bfc:	e7f7      	b.n	bee <usart_async_write+0x46>
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	000029b8 	.word	0x000029b8
     c04:	00000e19 	.word	0x00000e19
     c08:	000012c3 	.word	0x000012c3

00000c0c <usart_process_byte_sent>:
{
     c0c:	b570      	push	{r4, r5, r6, lr}
     c0e:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     c10:	0001      	movs	r1, r0
     c12:	3908      	subs	r1, #8
     c14:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     c16:	224c      	movs	r2, #76	; 0x4c
     c18:	5a8a      	ldrh	r2, [r1, r2]
     c1a:	429a      	cmp	r2, r3
     c1c:	d00c      	beq.n	c38 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     c1e:	000a      	movs	r2, r1
     c20:	6c89      	ldr	r1, [r1, #72]	; 0x48
     c22:	1c5d      	adds	r5, r3, #1
     c24:	2044      	movs	r0, #68	; 0x44
     c26:	5215      	strh	r5, [r2, r0]
     c28:	5cc9      	ldrb	r1, [r1, r3]
     c2a:	0020      	movs	r0, r4
     c2c:	4b04      	ldr	r3, [pc, #16]	; (c40 <usart_process_byte_sent+0x34>)
     c2e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     c30:	0020      	movs	r0, r4
     c32:	4b04      	ldr	r3, [pc, #16]	; (c44 <usart_process_byte_sent+0x38>)
     c34:	4798      	blx	r3
}
     c36:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     c38:	4b03      	ldr	r3, [pc, #12]	; (c48 <usart_process_byte_sent+0x3c>)
     c3a:	4798      	blx	r3
}
     c3c:	e7fb      	b.n	c36 <usart_process_byte_sent+0x2a>
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	000012b1 	.word	0x000012b1
     c44:	000012c3 	.word	0x000012c3
     c48:	000012cb 	.word	0x000012cb

00000c4c <usart_async_read>:
{
     c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4e:	46ce      	mov	lr, r9
     c50:	4647      	mov	r7, r8
     c52:	b580      	push	{r7, lr}
     c54:	b085      	sub	sp, #20
     c56:	0005      	movs	r5, r0
     c58:	000e      	movs	r6, r1
     c5a:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     c5c:	2800      	cmp	r0, #0
     c5e:	d015      	beq.n	c8c <usart_async_read+0x40>
     c60:	2900      	cmp	r1, #0
     c62:	d013      	beq.n	c8c <usart_async_read+0x40>
     c64:	2a00      	cmp	r2, #0
     c66:	d12a      	bne.n	cbe <usart_async_read+0x72>
     c68:	22ac      	movs	r2, #172	; 0xac
     c6a:	0052      	lsls	r2, r2, #1
     c6c:	4929      	ldr	r1, [pc, #164]	; (d14 <usart_async_read+0xc8>)
     c6e:	2000      	movs	r0, #0
     c70:	4b29      	ldr	r3, [pc, #164]	; (d18 <usart_async_read+0xcc>)
     c72:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     c74:	a803      	add	r0, sp, #12
     c76:	4b29      	ldr	r3, [pc, #164]	; (d1c <usart_async_read+0xd0>)
     c78:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     c7a:	0028      	movs	r0, r5
     c7c:	3034      	adds	r0, #52	; 0x34
     c7e:	4b28      	ldr	r3, [pc, #160]	; (d20 <usart_async_read+0xd4>)
     c80:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     c82:	a803      	add	r0, sp, #12
     c84:	4b27      	ldr	r3, [pc, #156]	; (d24 <usart_async_read+0xd8>)
     c86:	4798      	blx	r3
	uint16_t                       was_read = 0;
     c88:	2500      	movs	r5, #0
	return (int32_t)was_read;
     c8a:	e03c      	b.n	d06 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     c8c:	22ac      	movs	r2, #172	; 0xac
     c8e:	0052      	lsls	r2, r2, #1
     c90:	4920      	ldr	r1, [pc, #128]	; (d14 <usart_async_read+0xc8>)
     c92:	2000      	movs	r0, #0
     c94:	4b20      	ldr	r3, [pc, #128]	; (d18 <usart_async_read+0xcc>)
     c96:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     c98:	a803      	add	r0, sp, #12
     c9a:	4b20      	ldr	r3, [pc, #128]	; (d1c <usart_async_read+0xd0>)
     c9c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     c9e:	3534      	adds	r5, #52	; 0x34
     ca0:	0028      	movs	r0, r5
     ca2:	9501      	str	r5, [sp, #4]
     ca4:	4b1e      	ldr	r3, [pc, #120]	; (d20 <usart_async_read+0xd4>)
     ca6:	4798      	blx	r3
     ca8:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     caa:	a803      	add	r0, sp, #12
     cac:	4b1d      	ldr	r3, [pc, #116]	; (d24 <usart_async_read+0xd8>)
     cae:	4798      	blx	r3
	uint16_t                       was_read = 0;
     cb0:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     cb2:	4643      	mov	r3, r8
     cb4:	2b00      	cmp	r3, #0
     cb6:	d026      	beq.n	d06 <usart_async_read+0xba>
     cb8:	2f00      	cmp	r7, #0
     cba:	d116      	bne.n	cea <usart_async_read+0x9e>
     cbc:	e023      	b.n	d06 <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     cbe:	22ac      	movs	r2, #172	; 0xac
     cc0:	0052      	lsls	r2, r2, #1
     cc2:	4914      	ldr	r1, [pc, #80]	; (d14 <usart_async_read+0xc8>)
     cc4:	2001      	movs	r0, #1
     cc6:	4b14      	ldr	r3, [pc, #80]	; (d18 <usart_async_read+0xcc>)
     cc8:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     cca:	a803      	add	r0, sp, #12
     ccc:	4b13      	ldr	r3, [pc, #76]	; (d1c <usart_async_read+0xd0>)
     cce:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     cd0:	3534      	adds	r5, #52	; 0x34
     cd2:	0028      	movs	r0, r5
     cd4:	9501      	str	r5, [sp, #4]
     cd6:	4b12      	ldr	r3, [pc, #72]	; (d20 <usart_async_read+0xd4>)
     cd8:	4798      	blx	r3
     cda:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     cdc:	a803      	add	r0, sp, #12
     cde:	4b11      	ldr	r3, [pc, #68]	; (d24 <usart_async_read+0xd8>)
     ce0:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     ce2:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     ce4:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     ce6:	2b00      	cmp	r3, #0
     ce8:	d00d      	beq.n	d06 <usart_async_read+0xba>
{
     cea:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     cec:	4b0e      	ldr	r3, [pc, #56]	; (d28 <usart_async_read+0xdc>)
     cee:	4699      	mov	r9, r3
     cf0:	1c65      	adds	r5, r4, #1
     cf2:	b2ad      	uxth	r5, r5
     cf4:	1931      	adds	r1, r6, r4
     cf6:	9801      	ldr	r0, [sp, #4]
     cf8:	47c8      	blx	r9
     cfa:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     cfc:	4544      	cmp	r4, r8
     cfe:	d202      	bcs.n	d06 <usart_async_read+0xba>
     d00:	b2a3      	uxth	r3, r4
     d02:	429f      	cmp	r7, r3
     d04:	d8f4      	bhi.n	cf0 <usart_async_read+0xa4>
}
     d06:	0028      	movs	r0, r5
     d08:	b005      	add	sp, #20
     d0a:	bc0c      	pop	{r2, r3}
     d0c:	4690      	mov	r8, r2
     d0e:	4699      	mov	r9, r3
     d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	000029b8 	.word	0x000029b8
     d18:	00000e19 	.word	0x00000e19
     d1c:	0000084d 	.word	0x0000084d
     d20:	00000fa5 	.word	0x00000fa5
     d24:	0000085b 	.word	0x0000085b
     d28:	00000f1d 	.word	0x00000f1d

00000d2c <usart_async_init>:
{
     d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d2e:	0004      	movs	r4, r0
     d30:	000d      	movs	r5, r1
     d32:	0016      	movs	r6, r2
     d34:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     d36:	2800      	cmp	r0, #0
     d38:	d026      	beq.n	d88 <usart_async_init+0x5c>
     d3a:	2900      	cmp	r1, #0
     d3c:	d026      	beq.n	d8c <usart_async_init+0x60>
     d3e:	2a00      	cmp	r2, #0
     d40:	d026      	beq.n	d90 <usart_async_init+0x64>
     d42:	0018      	movs	r0, r3
     d44:	1e43      	subs	r3, r0, #1
     d46:	4198      	sbcs	r0, r3
     d48:	223a      	movs	r2, #58	; 0x3a
     d4a:	4914      	ldr	r1, [pc, #80]	; (d9c <usart_async_init+0x70>)
     d4c:	4b14      	ldr	r3, [pc, #80]	; (da0 <usart_async_init+0x74>)
     d4e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     d50:	0020      	movs	r0, r4
     d52:	3034      	adds	r0, #52	; 0x34
     d54:	003a      	movs	r2, r7
     d56:	0031      	movs	r1, r6
     d58:	4b12      	ldr	r3, [pc, #72]	; (da4 <usart_async_init+0x78>)
     d5a:	4798      	blx	r3
     d5c:	2800      	cmp	r0, #0
     d5e:	d119      	bne.n	d94 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     d60:	0020      	movs	r0, r4
     d62:	3008      	adds	r0, #8
     d64:	0029      	movs	r1, r5
     d66:	4b10      	ldr	r3, [pc, #64]	; (da8 <usart_async_init+0x7c>)
     d68:	4798      	blx	r3
	if (init_status) {
     d6a:	2800      	cmp	r0, #0
     d6c:	d10b      	bne.n	d86 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     d6e:	4b0f      	ldr	r3, [pc, #60]	; (dac <usart_async_init+0x80>)
     d70:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     d72:	4b0f      	ldr	r3, [pc, #60]	; (db0 <usart_async_init+0x84>)
     d74:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     d76:	4b0f      	ldr	r3, [pc, #60]	; (db4 <usart_async_init+0x88>)
     d78:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     d7a:	4b0f      	ldr	r3, [pc, #60]	; (db8 <usart_async_init+0x8c>)
     d7c:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     d7e:	4b0f      	ldr	r3, [pc, #60]	; (dbc <usart_async_init+0x90>)
     d80:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     d82:	4b0f      	ldr	r3, [pc, #60]	; (dc0 <usart_async_init+0x94>)
     d84:	6163      	str	r3, [r4, #20]
}
     d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     d88:	2000      	movs	r0, #0
     d8a:	e7dd      	b.n	d48 <usart_async_init+0x1c>
     d8c:	2000      	movs	r0, #0
     d8e:	e7db      	b.n	d48 <usart_async_init+0x1c>
     d90:	2000      	movs	r0, #0
     d92:	e7d9      	b.n	d48 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     d94:	200d      	movs	r0, #13
     d96:	4240      	negs	r0, r0
     d98:	e7f5      	b.n	d86 <usart_async_init+0x5a>
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	000029b8 	.word	0x000029b8
     da0:	00000e19 	.word	0x00000e19
     da4:	00000ec9 	.word	0x00000ec9
     da8:	00001221 	.word	0x00001221
     dac:	00000c4d 	.word	0x00000c4d
     db0:	00000ba9 	.word	0x00000ba9
     db4:	00000c0d 	.word	0x00000c0d
     db8:	00000b8d 	.word	0x00000b8d
     dbc:	00000b69 	.word	0x00000b69
     dc0:	00000b7b 	.word	0x00000b7b

00000dc4 <usart_async_enable>:
{
     dc4:	b510      	push	{r4, lr}
     dc6:	0004      	movs	r4, r0
	ASSERT(descr);
     dc8:	1e43      	subs	r3, r0, #1
     dca:	4198      	sbcs	r0, r3
     dcc:	b2c0      	uxtb	r0, r0
     dce:	2261      	movs	r2, #97	; 0x61
     dd0:	4904      	ldr	r1, [pc, #16]	; (de4 <usart_async_enable+0x20>)
     dd2:	4b05      	ldr	r3, [pc, #20]	; (de8 <usart_async_enable+0x24>)
     dd4:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     dd6:	0020      	movs	r0, r4
     dd8:	3008      	adds	r0, #8
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <usart_async_enable+0x28>)
     ddc:	4798      	blx	r3
}
     dde:	2000      	movs	r0, #0
     de0:	bd10      	pop	{r4, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	000029b8 	.word	0x000029b8
     de8:	00000e19 	.word	0x00000e19
     dec:	0000129d 	.word	0x0000129d

00000df0 <usart_async_is_tx_empty>:
{
     df0:	b510      	push	{r4, lr}
     df2:	0004      	movs	r4, r0
	ASSERT(descr);
     df4:	1e43      	subs	r3, r0, #1
     df6:	4198      	sbcs	r0, r3
     df8:	b2c0      	uxtb	r0, r0
     dfa:	22f8      	movs	r2, #248	; 0xf8
     dfc:	4903      	ldr	r1, [pc, #12]	; (e0c <usart_async_is_tx_empty+0x1c>)
     dfe:	4b04      	ldr	r3, [pc, #16]	; (e10 <usart_async_is_tx_empty+0x20>)
     e00:	4798      	blx	r3
	return _usart_async_is_byte_sent(&descr->device);
     e02:	0020      	movs	r0, r4
     e04:	3008      	adds	r0, #8
     e06:	4b03      	ldr	r3, [pc, #12]	; (e14 <usart_async_is_tx_empty+0x24>)
     e08:	4798      	blx	r3
}
     e0a:	bd10      	pop	{r4, pc}
     e0c:	000029b8 	.word	0x000029b8
     e10:	00000e19 	.word	0x00000e19
     e14:	000012b9 	.word	0x000012b9

00000e18 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     e18:	2800      	cmp	r0, #0
     e1a:	d100      	bne.n	e1e <assert+0x6>
		__asm("BKPT #0");
     e1c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     e1e:	4770      	bx	lr

00000e20 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     e20:	6803      	ldr	r3, [r0, #0]
     e22:	2b00      	cmp	r3, #0
     e24:	d00a      	beq.n	e3c <is_list_element+0x1c>
		if (it == element) {
     e26:	428b      	cmp	r3, r1
     e28:	d00a      	beq.n	e40 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     e2a:	681b      	ldr	r3, [r3, #0]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d003      	beq.n	e38 <is_list_element+0x18>
		if (it == element) {
     e30:	4299      	cmp	r1, r3
     e32:	d1fa      	bne.n	e2a <is_list_element+0xa>
			return true;
     e34:	2001      	movs	r0, #1
     e36:	e000      	b.n	e3a <is_list_element+0x1a>
		}
	}

	return false;
     e38:	2000      	movs	r0, #0
}
     e3a:	4770      	bx	lr
	return false;
     e3c:	2000      	movs	r0, #0
     e3e:	e7fc      	b.n	e3a <is_list_element+0x1a>
			return true;
     e40:	2001      	movs	r0, #1
     e42:	e7fa      	b.n	e3a <is_list_element+0x1a>

00000e44 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     e44:	b570      	push	{r4, r5, r6, lr}
     e46:	0004      	movs	r4, r0
     e48:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     e4a:	4b06      	ldr	r3, [pc, #24]	; (e64 <list_insert_as_head+0x20>)
     e4c:	4798      	blx	r3
     e4e:	2301      	movs	r3, #1
     e50:	4058      	eors	r0, r3
     e52:	b2c0      	uxtb	r0, r0
     e54:	2239      	movs	r2, #57	; 0x39
     e56:	4904      	ldr	r1, [pc, #16]	; (e68 <list_insert_as_head+0x24>)
     e58:	4b04      	ldr	r3, [pc, #16]	; (e6c <list_insert_as_head+0x28>)
     e5a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     e5c:	6823      	ldr	r3, [r4, #0]
     e5e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     e60:	6025      	str	r5, [r4, #0]
}
     e62:	bd70      	pop	{r4, r5, r6, pc}
     e64:	00000e21 	.word	0x00000e21
     e68:	000029d8 	.word	0x000029d8
     e6c:	00000e19 	.word	0x00000e19

00000e70 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     e70:	6803      	ldr	r3, [r0, #0]
     e72:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     e74:	6001      	str	r1, [r0, #0]
}
     e76:	4770      	bx	lr

00000e78 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     e78:	6803      	ldr	r3, [r0, #0]
     e7a:	2b00      	cmp	r3, #0
     e7c:	d001      	beq.n	e82 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     e7e:	681a      	ldr	r2, [r3, #0]
     e80:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     e82:	0018      	movs	r0, r3
     e84:	4770      	bx	lr

00000e86 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
     e86:	2900      	cmp	r1, #0
     e88:	d019      	beq.n	ebe <list_delete_element+0x38>
		return false;
	}

	if (list->head == element) {
     e8a:	6802      	ldr	r2, [r0, #0]
     e8c:	4291      	cmp	r1, r2
     e8e:	d00b      	beq.n	ea8 <list_delete_element+0x22>
		list->head = list->head->next;
		return true;
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
     e90:	2a00      	cmp	r2, #0
     e92:	d016      	beq.n	ec2 <list_delete_element+0x3c>
     e94:	6813      	ldr	r3, [r2, #0]
     e96:	4299      	cmp	r1, r3
     e98:	d00a      	beq.n	eb0 <list_delete_element+0x2a>
     e9a:	2b00      	cmp	r3, #0
     e9c:	d00d      	beq.n	eba <list_delete_element+0x34>
     e9e:	681a      	ldr	r2, [r3, #0]
     ea0:	4291      	cmp	r1, r2
     ea2:	d006      	beq.n	eb2 <list_delete_element+0x2c>
     ea4:	0013      	movs	r3, r2
     ea6:	e7f8      	b.n	e9a <list_delete_element+0x14>
		list->head = list->head->next;
     ea8:	6813      	ldr	r3, [r2, #0]
     eaa:	6003      	str	r3, [r0, #0]
		return true;
     eac:	2001      	movs	r0, #1
     eae:	e003      	b.n	eb8 <list_delete_element+0x32>
		while (it && it->next != element) {
     eb0:	0013      	movs	r3, r2
			it = it->next;
		}
		if (it) {
			it->next = ((struct list_element *)element)->next;
     eb2:	680a      	ldr	r2, [r1, #0]
     eb4:	601a      	str	r2, [r3, #0]
			return true;
     eb6:	2001      	movs	r0, #1
		}
	}

	return false;
}
     eb8:	4770      	bx	lr
	return false;
     eba:	2000      	movs	r0, #0
     ebc:	e7fc      	b.n	eb8 <list_delete_element+0x32>
		return false;
     ebe:	2000      	movs	r0, #0
     ec0:	e7fa      	b.n	eb8 <list_delete_element+0x32>
	return false;
     ec2:	2000      	movs	r0, #0
     ec4:	e7f8      	b.n	eb8 <list_delete_element+0x32>
	...

00000ec8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     ec8:	b570      	push	{r4, r5, r6, lr}
     eca:	0004      	movs	r4, r0
     ecc:	000e      	movs	r6, r1
     ece:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     ed0:	2800      	cmp	r0, #0
     ed2:	d00b      	beq.n	eec <ringbuffer_init+0x24>
     ed4:	2900      	cmp	r1, #0
     ed6:	d018      	beq.n	f0a <ringbuffer_init+0x42>
     ed8:	2001      	movs	r0, #1
     eda:	2a00      	cmp	r2, #0
     edc:	d107      	bne.n	eee <ringbuffer_init+0x26>
     ede:	2228      	movs	r2, #40	; 0x28
     ee0:	490c      	ldr	r1, [pc, #48]	; (f14 <ringbuffer_init+0x4c>)
     ee2:	2000      	movs	r0, #0
     ee4:	4b0c      	ldr	r3, [pc, #48]	; (f18 <ringbuffer_init+0x50>)
     ee6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     ee8:	1e6b      	subs	r3, r5, #1
     eea:	e007      	b.n	efc <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
     eec:	2000      	movs	r0, #0
     eee:	2228      	movs	r2, #40	; 0x28
     ef0:	4908      	ldr	r1, [pc, #32]	; (f14 <ringbuffer_init+0x4c>)
     ef2:	4b09      	ldr	r3, [pc, #36]	; (f18 <ringbuffer_init+0x50>)
     ef4:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     ef6:	1e6b      	subs	r3, r5, #1
     ef8:	422b      	tst	r3, r5
     efa:	d108      	bne.n	f0e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     efc:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     efe:	2300      	movs	r3, #0
     f00:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     f02:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     f04:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     f06:	2000      	movs	r0, #0
}
     f08:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     f0a:	2000      	movs	r0, #0
     f0c:	e7ef      	b.n	eee <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
     f0e:	200d      	movs	r0, #13
     f10:	4240      	negs	r0, r0
     f12:	e7f9      	b.n	f08 <ringbuffer_init+0x40>
     f14:	000029f8 	.word	0x000029f8
     f18:	00000e19 	.word	0x00000e19

00000f1c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     f1c:	b570      	push	{r4, r5, r6, lr}
     f1e:	0004      	movs	r4, r0
     f20:	000d      	movs	r5, r1
	ASSERT(rb && data);
     f22:	2800      	cmp	r0, #0
     f24:	d015      	beq.n	f52 <ringbuffer_get+0x36>
     f26:	0008      	movs	r0, r1
     f28:	1e43      	subs	r3, r0, #1
     f2a:	4198      	sbcs	r0, r3
     f2c:	b2c0      	uxtb	r0, r0
     f2e:	2240      	movs	r2, #64	; 0x40
     f30:	490a      	ldr	r1, [pc, #40]	; (f5c <ringbuffer_get+0x40>)
     f32:	4b0b      	ldr	r3, [pc, #44]	; (f60 <ringbuffer_get+0x44>)
     f34:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     f36:	68a3      	ldr	r3, [r4, #8]
     f38:	68e2      	ldr	r2, [r4, #12]
     f3a:	429a      	cmp	r2, r3
     f3c:	d00b      	beq.n	f56 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
     f3e:	6862      	ldr	r2, [r4, #4]
     f40:	4013      	ands	r3, r2
     f42:	6822      	ldr	r2, [r4, #0]
     f44:	5cd3      	ldrb	r3, [r2, r3]
     f46:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     f48:	68a3      	ldr	r3, [r4, #8]
     f4a:	3301      	adds	r3, #1
     f4c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     f4e:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     f50:	bd70      	pop	{r4, r5, r6, pc}
     f52:	2000      	movs	r0, #0
     f54:	e7eb      	b.n	f2e <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     f56:	200a      	movs	r0, #10
     f58:	4240      	negs	r0, r0
     f5a:	e7f9      	b.n	f50 <ringbuffer_get+0x34>
     f5c:	000029f8 	.word	0x000029f8
     f60:	00000e19 	.word	0x00000e19

00000f64 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     f64:	b570      	push	{r4, r5, r6, lr}
     f66:	0004      	movs	r4, r0
     f68:	000d      	movs	r5, r1
	ASSERT(rb);
     f6a:	1e43      	subs	r3, r0, #1
     f6c:	4198      	sbcs	r0, r3
     f6e:	b2c0      	uxtb	r0, r0
     f70:	2251      	movs	r2, #81	; 0x51
     f72:	490a      	ldr	r1, [pc, #40]	; (f9c <ringbuffer_put+0x38>)
     f74:	4b0a      	ldr	r3, [pc, #40]	; (fa0 <ringbuffer_put+0x3c>)
     f76:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     f78:	6863      	ldr	r3, [r4, #4]
     f7a:	68e2      	ldr	r2, [r4, #12]
     f7c:	4013      	ands	r3, r2
     f7e:	6822      	ldr	r2, [r4, #0]
     f80:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     f82:	68e3      	ldr	r3, [r4, #12]
     f84:	6861      	ldr	r1, [r4, #4]
     f86:	68a2      	ldr	r2, [r4, #8]
     f88:	1a9a      	subs	r2, r3, r2
     f8a:	428a      	cmp	r2, r1
     f8c:	d901      	bls.n	f92 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     f8e:	1a59      	subs	r1, r3, r1
     f90:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     f92:	3301      	adds	r3, #1
     f94:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     f96:	2000      	movs	r0, #0
     f98:	bd70      	pop	{r4, r5, r6, pc}
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	000029f8 	.word	0x000029f8
     fa0:	00000e19 	.word	0x00000e19

00000fa4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     fa4:	b510      	push	{r4, lr}
     fa6:	0004      	movs	r4, r0
	ASSERT(rb);
     fa8:	1e43      	subs	r3, r0, #1
     faa:	4198      	sbcs	r0, r3
     fac:	b2c0      	uxtb	r0, r0
     fae:	2267      	movs	r2, #103	; 0x67
     fb0:	4903      	ldr	r1, [pc, #12]	; (fc0 <ringbuffer_num+0x1c>)
     fb2:	4b04      	ldr	r3, [pc, #16]	; (fc4 <ringbuffer_num+0x20>)
     fb4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     fb6:	68e0      	ldr	r0, [r4, #12]
     fb8:	68a3      	ldr	r3, [r4, #8]
     fba:	1ac0      	subs	r0, r0, r3
}
     fbc:	bd10      	pop	{r4, pc}
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	000029f8 	.word	0x000029f8
     fc4:	00000e19 	.word	0x00000e19

00000fc8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     fc8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     fca:	4a08      	ldr	r2, [pc, #32]	; (fec <_init_chip+0x24>)
     fcc:	6853      	ldr	r3, [r2, #4]
     fce:	2106      	movs	r1, #6
     fd0:	430b      	orrs	r3, r1
     fd2:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     fd4:	4b06      	ldr	r3, [pc, #24]	; (ff0 <_init_chip+0x28>)
     fd6:	4798      	blx	r3
	_sysctrl_init_sources();
     fd8:	4b06      	ldr	r3, [pc, #24]	; (ff4 <_init_chip+0x2c>)
     fda:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     fdc:	2008      	movs	r0, #8
     fde:	4c06      	ldr	r4, [pc, #24]	; (ff8 <_init_chip+0x30>)
     fe0:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     fe2:	4b06      	ldr	r3, [pc, #24]	; (ffc <_init_chip+0x34>)
     fe4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     fe6:	20f7      	movs	r0, #247	; 0xf7
     fe8:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     fea:	bd10      	pop	{r4, pc}
     fec:	41004000 	.word	0x41004000
     ff0:	00001079 	.word	0x00001079
     ff4:	00001341 	.word	0x00001341
     ff8:	00001001 	.word	0x00001001
     ffc:	00001389 	.word	0x00001389

00001000 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1000:	07c3      	lsls	r3, r0, #31
    1002:	d509      	bpl.n	1018 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1004:	4b16      	ldr	r3, [pc, #88]	; (1060 <_gclk_init_generators_by_fref+0x60>)
    1006:	2280      	movs	r2, #128	; 0x80
    1008:	0052      	lsls	r2, r2, #1
    100a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    100c:	4a15      	ldr	r2, [pc, #84]	; (1064 <_gclk_init_generators_by_fref+0x64>)
    100e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1010:	001a      	movs	r2, r3
    1012:	7853      	ldrb	r3, [r2, #1]
    1014:	09db      	lsrs	r3, r3, #7
    1016:	d1fc      	bne.n	1012 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    1018:	0783      	lsls	r3, r0, #30
    101a:	d509      	bpl.n	1030 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    101c:	4b10      	ldr	r3, [pc, #64]	; (1060 <_gclk_init_generators_by_fref+0x60>)
    101e:	2202      	movs	r2, #2
    1020:	32ff      	adds	r2, #255	; 0xff
    1022:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1024:	4a10      	ldr	r2, [pc, #64]	; (1068 <_gclk_init_generators_by_fref+0x68>)
    1026:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1028:	001a      	movs	r2, r3
    102a:	7853      	ldrb	r3, [r2, #1]
    102c:	09db      	lsrs	r3, r3, #7
    102e:	d1fc      	bne.n	102a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1030:	0743      	lsls	r3, r0, #29
    1032:	d509      	bpl.n	1048 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    1034:	4b0a      	ldr	r3, [pc, #40]	; (1060 <_gclk_init_generators_by_fref+0x60>)
    1036:	2281      	movs	r2, #129	; 0x81
    1038:	0052      	lsls	r2, r2, #1
    103a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    103c:	4a0b      	ldr	r2, [pc, #44]	; (106c <_gclk_init_generators_by_fref+0x6c>)
    103e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1040:	001a      	movs	r2, r3
    1042:	7853      	ldrb	r3, [r2, #1]
    1044:	09db      	lsrs	r3, r3, #7
    1046:	d1fc      	bne.n	1042 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1048:	0703      	lsls	r3, r0, #28
    104a:	d508      	bpl.n	105e <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
    104c:	4b04      	ldr	r3, [pc, #16]	; (1060 <_gclk_init_generators_by_fref+0x60>)
    104e:	4a08      	ldr	r2, [pc, #32]	; (1070 <_gclk_init_generators_by_fref+0x70>)
    1050:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1052:	4a08      	ldr	r2, [pc, #32]	; (1074 <_gclk_init_generators_by_fref+0x74>)
    1054:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1056:	001a      	movs	r2, r3
    1058:	7853      	ldrb	r3, [r2, #1]
    105a:	09db      	lsrs	r3, r3, #7
    105c:	d1fc      	bne.n	1058 <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    105e:	4770      	bx	lr
    1060:	40000c00 	.word	0x40000c00
    1064:	00010700 	.word	0x00010700
    1068:	00210301 	.word	0x00210301
    106c:	00210602 	.word	0x00210602
    1070:	00007d03 	.word	0x00007d03
    1074:	00010603 	.word	0x00010603

00001078 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    1078:	4b06      	ldr	r3, [pc, #24]	; (1094 <_pm_init+0x1c>)
    107a:	7a1a      	ldrb	r2, [r3, #8]
    107c:	b2d2      	uxtb	r2, r2
    107e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    1080:	7a5a      	ldrb	r2, [r3, #9]
    1082:	b2d2      	uxtb	r2, r2
    1084:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    1086:	7a9a      	ldrb	r2, [r3, #10]
    1088:	b2d2      	uxtb	r2, r2
    108a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    108c:	7ada      	ldrb	r2, [r3, #11]
    108e:	b2d2      	uxtb	r2, r2
    1090:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    1092:	4770      	bx	lr
    1094:	40000400 	.word	0x40000400

00001098 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1098:	b570      	push	{r4, r5, r6, lr}
    109a:	0004      	movs	r4, r0
    109c:	000d      	movs	r5, r1
	ASSERT(dev);
    109e:	1e43      	subs	r3, r0, #1
    10a0:	4198      	sbcs	r0, r3
    10a2:	b2c0      	uxtb	r0, r0
    10a4:	2233      	movs	r2, #51	; 0x33
    10a6:	4910      	ldr	r1, [pc, #64]	; (10e8 <_timer_init+0x50>)
    10a8:	4b10      	ldr	r3, [pc, #64]	; (10ec <_timer_init+0x54>)
    10aa:	4798      	blx	r3

	uint16_t register_value;
	dev->hw = hw;
    10ac:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    10ae:	2301      	movs	r3, #1
    10b0:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10b2:	7aab      	ldrb	r3, [r5, #10]
    10b4:	09db      	lsrs	r3, r3, #7
    10b6:	d1fc      	bne.n	10b2 <_timer_init+0x1a>

	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw);
    10b8:	68e2      	ldr	r2, [r4, #12]
    10ba:	7a93      	ldrb	r3, [r2, #10]
    10bc:	09db      	lsrs	r3, r3, #7
    10be:	d1fc      	bne.n	10ba <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    10c0:	3380      	adds	r3, #128	; 0x80
    10c2:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10c4:	7a93      	ldrb	r3, [r2, #10]
    10c6:	09db      	lsrs	r3, r3, #7
    10c8:	d1fc      	bne.n	10c4 <_timer_init+0x2c>
	/* clear counter on compare/timer match */
	register_value |= RTC_MODE0_CTRL_MATCHCLR;

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
    10ca:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    10cc:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    10ce:	2320      	movs	r3, #32
    10d0:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    10d2:	7a93      	ldrb	r3, [r2, #10]
    10d4:	09db      	lsrs	r3, r3, #7
    10d6:	d1fc      	bne.n	10d2 <_timer_init+0x3a>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    10d8:	3301      	adds	r3, #1
    10da:	68e2      	ldr	r2, [r4, #12]
    10dc:	71d3      	strb	r3, [r2, #7]
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	_rtc_dev = dev;
    10de:	4b04      	ldr	r3, [pc, #16]	; (10f0 <_timer_init+0x58>)
    10e0:	601c      	str	r4, [r3, #0]

	return ERR_NONE;
}
    10e2:	2000      	movs	r0, #0
    10e4:	bd70      	pop	{r4, r5, r6, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	00002a1c 	.word	0x00002a1c
    10ec:	00000e19 	.word	0x00000e19
    10f0:	20000740 	.word	0x20000740

000010f4 <_timer_start>:

/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const dev)
{
    10f4:	b510      	push	{r4, lr}
    10f6:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    10f8:	d01d      	beq.n	1136 <_timer_start+0x42>
    10fa:	68c0      	ldr	r0, [r0, #12]
    10fc:	1e43      	subs	r3, r0, #1
    10fe:	4198      	sbcs	r0, r3
    1100:	b2c0      	uxtb	r0, r0
    1102:	226a      	movs	r2, #106	; 0x6a
    1104:	490d      	ldr	r1, [pc, #52]	; (113c <_timer_start+0x48>)
    1106:	4b0e      	ldr	r3, [pc, #56]	; (1140 <_timer_start+0x4c>)
    1108:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    110a:	2208      	movs	r2, #8
    110c:	4b0d      	ldr	r3, [pc, #52]	; (1144 <_timer_start+0x50>)
    110e:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
    1110:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
    1112:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
    1114:	2300      	movs	r3, #0
    1116:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1118:	7a93      	ldrb	r3, [r2, #10]
    111a:	09db      	lsrs	r3, r3, #7
    111c:	d1fc      	bne.n	1118 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
    111e:	68e2      	ldr	r2, [r4, #12]
    1120:	7a93      	ldrb	r3, [r2, #10]
    1122:	09db      	lsrs	r3, r3, #7
    1124:	d1fc      	bne.n	1120 <_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    1126:	8813      	ldrh	r3, [r2, #0]
    1128:	2102      	movs	r1, #2
    112a:	430b      	orrs	r3, r1
    112c:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    112e:	7a93      	ldrb	r3, [r2, #10]
    1130:	09db      	lsrs	r3, r3, #7
    1132:	d1fc      	bne.n	112e <_timer_start+0x3a>
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
}
    1134:	bd10      	pop	{r4, pc}
    1136:	2000      	movs	r0, #0
    1138:	e7e3      	b.n	1102 <_timer_start+0xe>
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	00002a1c 	.word	0x00002a1c
    1140:	00000e19 	.word	0x00000e19
    1144:	e000e100 	.word	0xe000e100

00001148 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
    1148:	68c2      	ldr	r2, [r0, #12]
    114a:	7a93      	ldrb	r3, [r2, #10]
    114c:	09db      	lsrs	r3, r3, #7
    114e:	d1fc      	bne.n	114a <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    1150:	8810      	ldrh	r0, [r2, #0]
	return (bool)tmp;
    1152:	0780      	lsls	r0, r0, #30
    1154:	0fc0      	lsrs	r0, r0, #31
}
    1156:	4770      	bx	lr

00001158 <_timer_set_irq>:
 * \brief Set timer IRQ
 */
void _timer_set_irq(struct _timer_device *const dev)
{
	(void)dev;
}
    1158:	4770      	bx	lr

0000115a <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    115a:	2000      	movs	r0, #0
    115c:	4770      	bx	lr
	...

00001160 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1160:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1162:	4b07      	ldr	r3, [pc, #28]	; (1180 <RTC_Handler+0x20>)
    1164:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1166:	68e3      	ldr	r3, [r4, #12]
    1168:	7a1b      	ldrb	r3, [r3, #8]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    116a:	07db      	lsls	r3, r3, #31
    116c:	d507      	bpl.n	117e <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    116e:	6823      	ldr	r3, [r4, #0]
    1170:	2b00      	cmp	r3, #0
    1172:	d001      	beq.n	1178 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1174:	0020      	movs	r0, r4
    1176:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1178:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    117a:	2201      	movs	r2, #1
    117c:	721a      	strb	r2, [r3, #8]
}
    117e:	bd10      	pop	{r4, pc}
    1180:	20000740 	.word	0x20000740

00001184 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1184:	b510      	push	{r4, lr}
    1186:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1188:	4b1f      	ldr	r3, [pc, #124]	; (1208 <_usart_init+0x84>)
    118a:	18c3      	adds	r3, r0, r3
    118c:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    118e:	b2db      	uxtb	r3, r3
    1190:	2b02      	cmp	r3, #2
    1192:	d004      	beq.n	119e <_usart_init+0x1a>
	ASSERT(false);
    1194:	4a1d      	ldr	r2, [pc, #116]	; (120c <_usart_init+0x88>)
    1196:	491e      	ldr	r1, [pc, #120]	; (1210 <_usart_init+0x8c>)
    1198:	2000      	movs	r0, #0
    119a:	4b1e      	ldr	r3, [pc, #120]	; (1214 <_usart_init+0x90>)
    119c:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    119e:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    11a0:	07db      	lsls	r3, r3, #31
    11a2:	d418      	bmi.n	11d6 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11a4:	2203      	movs	r2, #3
    11a6:	69e3      	ldr	r3, [r4, #28]
    11a8:	421a      	tst	r2, r3
    11aa:	d1fc      	bne.n	11a6 <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    11ac:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    11ae:	079b      	lsls	r3, r3, #30
    11b0:	d50b      	bpl.n	11ca <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    11b2:	6823      	ldr	r3, [r4, #0]
    11b4:	2202      	movs	r2, #2
    11b6:	4393      	bics	r3, r2
    11b8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11ba:	3201      	adds	r2, #1
    11bc:	69e3      	ldr	r3, [r4, #28]
    11be:	421a      	tst	r2, r3
    11c0:	d1fc      	bne.n	11bc <_usart_init+0x38>
    11c2:	2202      	movs	r2, #2
    11c4:	69e3      	ldr	r3, [r4, #28]
    11c6:	421a      	tst	r2, r3
    11c8:	d1fc      	bne.n	11c4 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    11ca:	2305      	movs	r3, #5
    11cc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11ce:	2203      	movs	r2, #3
    11d0:	69e3      	ldr	r3, [r4, #28]
    11d2:	421a      	tst	r2, r3
    11d4:	d1fc      	bne.n	11d0 <_usart_init+0x4c>
    11d6:	2201      	movs	r2, #1
    11d8:	69e3      	ldr	r3, [r4, #28]
    11da:	421a      	tst	r2, r3
    11dc:	d1fc      	bne.n	11d8 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    11de:	4b0e      	ldr	r3, [pc, #56]	; (1218 <_usart_init+0x94>)
    11e0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11e2:	2203      	movs	r2, #3
    11e4:	69e3      	ldr	r3, [r4, #28]
    11e6:	421a      	tst	r2, r3
    11e8:	d1fc      	bne.n	11e4 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    11ea:	23c0      	movs	r3, #192	; 0xc0
    11ec:	029b      	lsls	r3, r3, #10
    11ee:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11f0:	2207      	movs	r2, #7
    11f2:	69e3      	ldr	r3, [r4, #28]
    11f4:	421a      	tst	r2, r3
    11f6:	d1fc      	bne.n	11f2 <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    11f8:	4b08      	ldr	r3, [pc, #32]	; (121c <_usart_init+0x98>)
    11fa:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    11fc:	2300      	movs	r3, #0
    11fe:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1200:	2230      	movs	r2, #48	; 0x30
    1202:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    1204:	2000      	movs	r0, #0
    1206:	bd10      	pop	{r4, pc}
    1208:	bdfff800 	.word	0xbdfff800
    120c:	0000025e 	.word	0x0000025e
    1210:	00002a34 	.word	0x00002a34
    1214:	00000e19 	.word	0x00000e19
    1218:	40100004 	.word	0x40100004
    121c:	ffff8a09 	.word	0xffff8a09

00001220 <_usart_async_init>:
{
    1220:	b570      	push	{r4, r5, r6, lr}
    1222:	0005      	movs	r5, r0
    1224:	000c      	movs	r4, r1
	ASSERT(device);
    1226:	1e43      	subs	r3, r0, #1
    1228:	4198      	sbcs	r0, r3
    122a:	b2c0      	uxtb	r0, r0
    122c:	22c4      	movs	r2, #196	; 0xc4
    122e:	4914      	ldr	r1, [pc, #80]	; (1280 <_usart_async_init+0x60>)
    1230:	4b14      	ldr	r3, [pc, #80]	; (1284 <_usart_async_init+0x64>)
    1232:	4798      	blx	r3
	init_status = _usart_init(hw);
    1234:	0020      	movs	r0, r4
    1236:	4b14      	ldr	r3, [pc, #80]	; (1288 <_usart_async_init+0x68>)
    1238:	4798      	blx	r3
	if (init_status) {
    123a:	2800      	cmp	r0, #0
    123c:	d000      	beq.n	1240 <_usart_async_init+0x20>
}
    123e:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1240:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM2) {
    1242:	4b12      	ldr	r3, [pc, #72]	; (128c <_usart_async_init+0x6c>)
    1244:	429c      	cmp	r4, r3
    1246:	d017      	beq.n	1278 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1248:	4b11      	ldr	r3, [pc, #68]	; (1290 <_usart_async_init+0x70>)
    124a:	469c      	mov	ip, r3
    124c:	4464      	add	r4, ip
    124e:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1250:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1252:	b2e3      	uxtb	r3, r4
    1254:	0622      	lsls	r2, r4, #24
    1256:	d4f2      	bmi.n	123e <_usart_async_init+0x1e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1258:	221f      	movs	r2, #31
    125a:	401a      	ands	r2, r3
    125c:	2301      	movs	r3, #1
    125e:	4093      	lsls	r3, r2
    1260:	4a0c      	ldr	r2, [pc, #48]	; (1294 <_usart_async_init+0x74>)
    1262:	2180      	movs	r1, #128	; 0x80
    1264:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1266:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    126a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    126e:	3101      	adds	r1, #1
    1270:	31ff      	adds	r1, #255	; 0xff
    1272:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1274:	6013      	str	r3, [r2, #0]
    1276:	e7e2      	b.n	123e <_usart_async_init+0x1e>
		_sercom2_dev = (struct _usart_async_device *)dev;
    1278:	4b07      	ldr	r3, [pc, #28]	; (1298 <_usart_async_init+0x78>)
    127a:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    127c:	230b      	movs	r3, #11
    127e:	e7eb      	b.n	1258 <_usart_async_init+0x38>
    1280:	00002a34 	.word	0x00002a34
    1284:	00000e19 	.word	0x00000e19
    1288:	00001185 	.word	0x00001185
    128c:	42001000 	.word	0x42001000
    1290:	bdfff800 	.word	0xbdfff800
    1294:	e000e100 	.word	0xe000e100
    1298:	20000744 	.word	0x20000744

0000129c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    129c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    129e:	6813      	ldr	r3, [r2, #0]
    12a0:	2102      	movs	r1, #2
    12a2:	430b      	orrs	r3, r1
    12a4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12a6:	3101      	adds	r1, #1
    12a8:	69d3      	ldr	r3, [r2, #28]
    12aa:	4219      	tst	r1, r3
    12ac:	d1fc      	bne.n	12a8 <_usart_async_enable+0xc>
}
    12ae:	4770      	bx	lr

000012b0 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    12b0:	6983      	ldr	r3, [r0, #24]
    12b2:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    12b4:	8519      	strh	r1, [r3, #40]	; 0x28
}
    12b6:	4770      	bx	lr

000012b8 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    12b8:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    12ba:	7e18      	ldrb	r0, [r3, #24]
    12bc:	2301      	movs	r3, #1
    12be:	4018      	ands	r0, r3
}
    12c0:	4770      	bx	lr

000012c2 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    12c2:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    12c4:	2201      	movs	r2, #1
    12c6:	759a      	strb	r2, [r3, #22]
}
    12c8:	4770      	bx	lr

000012ca <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    12ca:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    12cc:	2202      	movs	r2, #2
    12ce:	759a      	strb	r2, [r3, #22]
}
    12d0:	4770      	bx	lr
	...

000012d4 <SERCOM2_Handler>:

	return NULL;
}

void SERCOM2_Handler(void)
{
    12d4:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    12d6:	4b19      	ldr	r3, [pc, #100]	; (133c <SERCOM2_Handler+0x68>)
    12d8:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    12da:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    12dc:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    12de:	07db      	lsls	r3, r3, #31
    12e0:	d502      	bpl.n	12e8 <SERCOM2_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    12e2:	7da3      	ldrb	r3, [r4, #22]
    12e4:	07db      	lsls	r3, r3, #31
    12e6:	d40f      	bmi.n	1308 <SERCOM2_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    12e8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    12ea:	079b      	lsls	r3, r3, #30
    12ec:	d502      	bpl.n	12f4 <SERCOM2_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    12ee:	7da3      	ldrb	r3, [r4, #22]
    12f0:	079b      	lsls	r3, r3, #30
    12f2:	d40e      	bmi.n	1312 <SERCOM2_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    12f4:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    12f6:	075b      	lsls	r3, r3, #29
    12f8:	d515      	bpl.n	1326 <SERCOM2_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    12fa:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    12fc:	2337      	movs	r3, #55	; 0x37
    12fe:	421a      	tst	r2, r3
    1300:	d00c      	beq.n	131c <SERCOM2_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1302:	3308      	adds	r3, #8
    1304:	8363      	strh	r3, [r4, #26]
}
    1306:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1308:	2301      	movs	r3, #1
    130a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    130c:	6803      	ldr	r3, [r0, #0]
    130e:	4798      	blx	r3
    1310:	e7f9      	b.n	1306 <SERCOM2_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1312:	2302      	movs	r3, #2
    1314:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1316:	6883      	ldr	r3, [r0, #8]
    1318:	4798      	blx	r3
    131a:	e7f4      	b.n	1306 <SERCOM2_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    131c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    131e:	b2c9      	uxtb	r1, r1
    1320:	6843      	ldr	r3, [r0, #4]
    1322:	4798      	blx	r3
    1324:	e7ef      	b.n	1306 <SERCOM2_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1326:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1328:	09db      	lsrs	r3, r3, #7
    132a:	d0ec      	beq.n	1306 <SERCOM2_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    132c:	2380      	movs	r3, #128	; 0x80
    132e:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1330:	68c3      	ldr	r3, [r0, #12]
    1332:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1334:	8b63      	ldrh	r3, [r4, #26]
    1336:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1338:	8363      	strh	r3, [r4, #26]
}
    133a:	e7e4      	b.n	1306 <SERCOM2_Handler+0x32>
    133c:	20000744 	.word	0x20000744

00001340 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1340:	4b0f      	ldr	r3, [pc, #60]	; (1380 <_sysctrl_init_sources+0x40>)
    1342:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1344:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1346:	480f      	ldr	r0, [pc, #60]	; (1384 <_sysctrl_init_sources+0x44>)
    1348:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    134a:	0f89      	lsrs	r1, r1, #30
    134c:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    134e:	20a1      	movs	r0, #161	; 0xa1
    1350:	0040      	lsls	r0, r0, #1
    1352:	4301      	orrs	r1, r0
    1354:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1356:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1358:	699a      	ldr	r2, [r3, #24]
    135a:	2102      	movs	r1, #2
    135c:	430a      	orrs	r2, r1
    135e:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1360:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1362:	311d      	adds	r1, #29
    1364:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1366:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1368:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    136a:	2208      	movs	r2, #8
    136c:	68cb      	ldr	r3, [r1, #12]
    136e:	421a      	tst	r2, r3
    1370:	d0fc      	beq.n	136c <_sysctrl_init_sources+0x2c>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1372:	4a03      	ldr	r2, [pc, #12]	; (1380 <_sysctrl_init_sources+0x40>)
    1374:	6a13      	ldr	r3, [r2, #32]
    1376:	2180      	movs	r1, #128	; 0x80
    1378:	430b      	orrs	r3, r1
    137a:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    137c:	4770      	bx	lr
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	40000800 	.word	0x40000800
    1384:	0fff0000 	.word	0x0fff0000

00001388 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    1388:	2286      	movs	r2, #134	; 0x86
    138a:	01d2      	lsls	r2, r2, #7
    138c:	4b1d      	ldr	r3, [pc, #116]	; (1404 <_sysctrl_init_referenced_generators+0x7c>)
    138e:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1390:	2202      	movs	r2, #2
    1392:	4b1d      	ldr	r3, [pc, #116]	; (1408 <_sysctrl_init_referenced_generators+0x80>)
    1394:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1396:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1398:	320e      	adds	r2, #14
    139a:	68cb      	ldr	r3, [r1, #12]
    139c:	421a      	tst	r2, r3
    139e:	d0fc      	beq.n	139a <_sysctrl_init_referenced_generators+0x12>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    13a0:	4a1a      	ldr	r2, [pc, #104]	; (140c <_sysctrl_init_referenced_generators+0x84>)
    13a2:	4b19      	ldr	r3, [pc, #100]	; (1408 <_sysctrl_init_referenced_generators+0x80>)
    13a4:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    13a6:	4b1a      	ldr	r3, [pc, #104]	; (1410 <_sysctrl_init_referenced_generators+0x88>)
    13a8:	681b      	ldr	r3, [r3, #0]
    13aa:	0e9b      	lsrs	r3, r3, #26
    13ac:	2b3f      	cmp	r3, #63	; 0x3f
    13ae:	d01f      	beq.n	13f0 <_sysctrl_init_referenced_generators+0x68>
    13b0:	029b      	lsls	r3, r3, #10
    13b2:	2280      	movs	r2, #128	; 0x80
    13b4:	0092      	lsls	r2, r2, #2
    13b6:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    13b8:	4a13      	ldr	r2, [pc, #76]	; (1408 <_sysctrl_init_referenced_generators+0x80>)
    13ba:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    13bc:	2306      	movs	r3, #6
    13be:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    13c0:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    13c2:	075b      	lsls	r3, r3, #29
    13c4:	d517      	bpl.n	13f6 <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    13c6:	0011      	movs	r1, r2
	tmp &= mask;
    13c8:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    13ca:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    13cc:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    13ce:	2bd0      	cmp	r3, #208	; 0xd0
    13d0:	d1fb      	bne.n	13ca <_sysctrl_init_referenced_generators+0x42>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    13d2:	4a0d      	ldr	r2, [pc, #52]	; (1408 <_sysctrl_init_referenced_generators+0x80>)
    13d4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    13d6:	2180      	movs	r1, #128	; 0x80
    13d8:	430b      	orrs	r3, r1
    13da:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    13dc:	4a09      	ldr	r2, [pc, #36]	; (1404 <_sysctrl_init_referenced_generators+0x7c>)
    13de:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    13e0:	09db      	lsrs	r3, r3, #7
    13e2:	d1fc      	bne.n	13de <_sysctrl_init_referenced_generators+0x56>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    13e4:	4a08      	ldr	r2, [pc, #32]	; (1408 <_sysctrl_init_referenced_generators+0x80>)
    13e6:	6993      	ldr	r3, [r2, #24]
    13e8:	2102      	movs	r1, #2
    13ea:	438b      	bics	r3, r1
    13ec:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    13ee:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    13f0:	23fc      	movs	r3, #252	; 0xfc
    13f2:	01db      	lsls	r3, r3, #7
    13f4:	e7e0      	b.n	13b8 <_sysctrl_init_referenced_generators+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    13f6:	4904      	ldr	r1, [pc, #16]	; (1408 <_sysctrl_init_referenced_generators+0x80>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    13f8:	2210      	movs	r2, #16
    13fa:	68cb      	ldr	r3, [r1, #12]
    13fc:	421a      	tst	r2, r3
    13fe:	d0fc      	beq.n	13fa <_sysctrl_init_referenced_generators+0x72>
    1400:	e7e7      	b.n	13d2 <_sysctrl_init_referenced_generators+0x4a>
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	40000c00 	.word	0x40000c00
    1408:	40000800 	.word	0x40000800
    140c:	280a05dc 	.word	0x280a05dc
    1410:	00806024 	.word	0x00806024

00001414 <main>:
#include <atmel_start.h>
#include "touch_example.h"

int main(void)
{
    1414:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1416:	4b02      	ldr	r3, [pc, #8]	; (1420 <main+0xc>)
    1418:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
		touch_example();
    141a:	4c02      	ldr	r4, [pc, #8]	; (1424 <main+0x10>)
    141c:	47a0      	blx	r4
    141e:	e7fd      	b.n	141c <main+0x8>
    1420:	00000115 	.word	0x00000115
    1424:	00000825 	.word	0x00000825

00001428 <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
    1428:	b510      	push	{r4, lr}
	usart_async_enable(&USART);
    142a:	4802      	ldr	r0, [pc, #8]	; (1434 <datastreamer_init+0xc>)
    142c:	4b02      	ldr	r3, [pc, #8]	; (1438 <datastreamer_init+0x10>)
    142e:	4798      	blx	r3
}
    1430:	bd10      	pop	{r4, pc}
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	20000798 	.word	0x20000798
    1438:	00000dc5 	.word	0x00000dc5

0000143c <datastreamer_output>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_output(void)
{
    143c:	b5f0      	push	{r4, r5, r6, r7, lr}
    143e:	b087      	sub	sp, #28
    1440:	2313      	movs	r3, #19
    1442:	3b01      	subs	r3, #1
    1444:	b29b      	uxth	r3, r3
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
		for (i = 0; i < sizeof(data); i++) {
    1446:	2b00      	cmp	r3, #0
    1448:	d1fb      	bne.n	1442 <datastreamer_output+0x6>
	// Start token
//	datastreamer_transmit(0x55);

	// Frame Start
//	datastreamer_transmit(sequence);
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
    144a:	330e      	adds	r3, #14
    144c:	aa02      	add	r2, sp, #8
    144e:	4694      	mov	ip, r2
    1450:	4463      	add	r3, ip
    1452:	2200      	movs	r2, #0
    1454:	801a      	strh	r2, [r3, #0]
    1456:	881b      	ldrh	r3, [r3, #0]
    1458:	b29b      	uxth	r3, r3
    145a:	2b9f      	cmp	r3, #159	; 0x9f
    145c:	d900      	bls.n	1460 <datastreamer_output+0x24>
    145e:	e08b      	b.n	1578 <datastreamer_output+0x13c>

		/* Signals */
		u16temp_output = get_sensor_node_signal(count_bytes_out);
    1460:	240e      	movs	r4, #14
    1462:	4464      	add	r4, ip
    1464:	4f45      	ldr	r7, [pc, #276]	; (157c <datastreamer_output+0x140>)
    1466:	e01a      	b.n	149e <datastreamer_output+0x62>
		;
		}
		

		/* Reference */
		u16temp_output = get_sensor_node_reference(count_bytes_out);
    1468:	8820      	ldrh	r0, [r4, #0]
    146a:	b280      	uxth	r0, r0
    146c:	4d44      	ldr	r5, [pc, #272]	; (1580 <datastreamer_output+0x144>)
    146e:	47a8      	blx	r5
	//	datastreamer_transmit((uint8_t)u16temp_output);
	//	datastreamer_transmit((uint8_t)(u16temp_output >> 8u));

		/* Touch delta */
		temp_int_calc = get_sensor_node_signal(count_bytes_out);
    1470:	8820      	ldrh	r0, [r4, #0]
    1472:	b280      	uxth	r0, r0
    1474:	4b41      	ldr	r3, [pc, #260]	; (157c <datastreamer_output+0x140>)
    1476:	4798      	blx	r3
		temp_int_calc -= get_sensor_node_reference(count_bytes_out);
    1478:	8820      	ldrh	r0, [r4, #0]
    147a:	b280      	uxth	r0, r0
    147c:	47a8      	blx	r5
		u16temp_output = (uint16_t)(temp_int_calc);
	//	datastreamer_transmit((uint8_t)u16temp_output);
	//	datastreamer_transmit((uint8_t)(u16temp_output >> 8u));

		/* Comp Caps */
		u16temp_output = get_sensor_cc_val(count_bytes_out);
    147e:	8820      	ldrh	r0, [r4, #0]
    1480:	b280      	uxth	r0, r0
    1482:	4b40      	ldr	r3, [pc, #256]	; (1584 <datastreamer_output+0x148>)
    1484:	4798      	blx	r3
	//	datastreamer_transmit(u8temp_output);

#endif

		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
    1486:	8820      	ldrh	r0, [r4, #0]
    1488:	b280      	uxth	r0, r0
    148a:	4b3f      	ldr	r3, [pc, #252]	; (1588 <datastreamer_output+0x14c>)
    148c:	4798      	blx	r3
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
    148e:	8823      	ldrh	r3, [r4, #0]
    1490:	3301      	adds	r3, #1
    1492:	b29b      	uxth	r3, r3
    1494:	8023      	strh	r3, [r4, #0]
    1496:	8823      	ldrh	r3, [r4, #0]
    1498:	b29b      	uxth	r3, r3
    149a:	2b9f      	cmp	r3, #159	; 0x9f
    149c:	d86c      	bhi.n	1578 <datastreamer_output+0x13c>
		u16temp_output = get_sensor_node_signal(count_bytes_out);
    149e:	8820      	ldrh	r0, [r4, #0]
    14a0:	b280      	uxth	r0, r0
    14a2:	47b8      	blx	r7
    14a4:	9001      	str	r0, [sp, #4]
		char buff [8] = {};
    14a6:	2208      	movs	r2, #8
    14a8:	2100      	movs	r1, #0
    14aa:	a803      	add	r0, sp, #12
    14ac:	4b37      	ldr	r3, [pc, #220]	; (158c <datastreamer_output+0x150>)
    14ae:	4798      	blx	r3
		io_write(&USART.io, (uint8_t *)" ", 1);
    14b0:	2201      	movs	r2, #1
    14b2:	4937      	ldr	r1, [pc, #220]	; (1590 <datastreamer_output+0x154>)
    14b4:	4837      	ldr	r0, [pc, #220]	; (1594 <datastreamer_output+0x158>)
    14b6:	4b38      	ldr	r3, [pc, #224]	; (1598 <datastreamer_output+0x15c>)
    14b8:	4798      	blx	r3
		while (!usart_async_is_tx_empty(&USART))
    14ba:	4d36      	ldr	r5, [pc, #216]	; (1594 <datastreamer_output+0x158>)
    14bc:	4e37      	ldr	r6, [pc, #220]	; (159c <datastreamer_output+0x160>)
    14be:	0028      	movs	r0, r5
    14c0:	47b0      	blx	r6
    14c2:	2800      	cmp	r0, #0
    14c4:	d0fb      	beq.n	14be <datastreamer_output+0x82>
		itoa(count_bytes_out, buff, 10);
    14c6:	8820      	ldrh	r0, [r4, #0]
    14c8:	b280      	uxth	r0, r0
    14ca:	220a      	movs	r2, #10
    14cc:	a903      	add	r1, sp, #12
    14ce:	4b34      	ldr	r3, [pc, #208]	; (15a0 <datastreamer_output+0x164>)
    14d0:	4798      	blx	r3
		io_write(&USART.io, (uint8_t *)buff, strlen(buff));
    14d2:	a803      	add	r0, sp, #12
    14d4:	4b33      	ldr	r3, [pc, #204]	; (15a4 <datastreamer_output+0x168>)
    14d6:	4798      	blx	r3
    14d8:	b282      	uxth	r2, r0
    14da:	a903      	add	r1, sp, #12
    14dc:	482d      	ldr	r0, [pc, #180]	; (1594 <datastreamer_output+0x158>)
    14de:	4b2e      	ldr	r3, [pc, #184]	; (1598 <datastreamer_output+0x15c>)
    14e0:	4798      	blx	r3
		while (!usart_async_is_tx_empty(&USART))
    14e2:	4d2c      	ldr	r5, [pc, #176]	; (1594 <datastreamer_output+0x158>)
    14e4:	4e2d      	ldr	r6, [pc, #180]	; (159c <datastreamer_output+0x160>)
    14e6:	0028      	movs	r0, r5
    14e8:	47b0      	blx	r6
    14ea:	2800      	cmp	r0, #0
    14ec:	d0fb      	beq.n	14e6 <datastreamer_output+0xaa>
		io_write(&USART.io, (uint8_t *)" ", 1);
    14ee:	2201      	movs	r2, #1
    14f0:	4927      	ldr	r1, [pc, #156]	; (1590 <datastreamer_output+0x154>)
    14f2:	4828      	ldr	r0, [pc, #160]	; (1594 <datastreamer_output+0x158>)
    14f4:	4b28      	ldr	r3, [pc, #160]	; (1598 <datastreamer_output+0x15c>)
    14f6:	4798      	blx	r3
		while (!usart_async_is_tx_empty(&USART))
    14f8:	4d26      	ldr	r5, [pc, #152]	; (1594 <datastreamer_output+0x158>)
    14fa:	4e28      	ldr	r6, [pc, #160]	; (159c <datastreamer_output+0x160>)
    14fc:	0028      	movs	r0, r5
    14fe:	47b0      	blx	r6
    1500:	2800      	cmp	r0, #0
    1502:	d0fb      	beq.n	14fc <datastreamer_output+0xc0>
		io_write(&USART.io, (uint8_t *)" ", 1);
    1504:	2201      	movs	r2, #1
    1506:	4922      	ldr	r1, [pc, #136]	; (1590 <datastreamer_output+0x154>)
    1508:	4822      	ldr	r0, [pc, #136]	; (1594 <datastreamer_output+0x158>)
    150a:	4b23      	ldr	r3, [pc, #140]	; (1598 <datastreamer_output+0x15c>)
    150c:	4798      	blx	r3
		while (!usart_async_is_tx_empty(&USART))
    150e:	4d21      	ldr	r5, [pc, #132]	; (1594 <datastreamer_output+0x158>)
    1510:	4e22      	ldr	r6, [pc, #136]	; (159c <datastreamer_output+0x160>)
    1512:	0028      	movs	r0, r5
    1514:	47b0      	blx	r6
    1516:	2800      	cmp	r0, #0
    1518:	d0fb      	beq.n	1512 <datastreamer_output+0xd6>
		utoa(u16temp_output, buff, 10);
    151a:	220a      	movs	r2, #10
    151c:	a903      	add	r1, sp, #12
    151e:	9801      	ldr	r0, [sp, #4]
    1520:	4b21      	ldr	r3, [pc, #132]	; (15a8 <datastreamer_output+0x16c>)
    1522:	4798      	blx	r3
		io_write(&USART.io, (uint8_t *)buff, strlen(buff));
    1524:	a803      	add	r0, sp, #12
    1526:	4b1f      	ldr	r3, [pc, #124]	; (15a4 <datastreamer_output+0x168>)
    1528:	4798      	blx	r3
    152a:	b282      	uxth	r2, r0
    152c:	a903      	add	r1, sp, #12
    152e:	4819      	ldr	r0, [pc, #100]	; (1594 <datastreamer_output+0x158>)
    1530:	4b19      	ldr	r3, [pc, #100]	; (1598 <datastreamer_output+0x15c>)
    1532:	4798      	blx	r3
		while (!usart_async_is_tx_empty(&USART))
    1534:	4d17      	ldr	r5, [pc, #92]	; (1594 <datastreamer_output+0x158>)
    1536:	4e19      	ldr	r6, [pc, #100]	; (159c <datastreamer_output+0x160>)
    1538:	0028      	movs	r0, r5
    153a:	47b0      	blx	r6
    153c:	2800      	cmp	r0, #0
    153e:	d0fb      	beq.n	1538 <datastreamer_output+0xfc>
		io_write(&USART.io, (uint8_t *)" ", 1);
    1540:	2201      	movs	r2, #1
    1542:	4913      	ldr	r1, [pc, #76]	; (1590 <datastreamer_output+0x154>)
    1544:	4813      	ldr	r0, [pc, #76]	; (1594 <datastreamer_output+0x158>)
    1546:	4b14      	ldr	r3, [pc, #80]	; (1598 <datastreamer_output+0x15c>)
    1548:	4798      	blx	r3
		while (!usart_async_is_tx_empty(&USART))
    154a:	4d12      	ldr	r5, [pc, #72]	; (1594 <datastreamer_output+0x158>)
    154c:	4e13      	ldr	r6, [pc, #76]	; (159c <datastreamer_output+0x160>)
    154e:	0028      	movs	r0, r5
    1550:	47b0      	blx	r6
    1552:	2800      	cmp	r0, #0
    1554:	d0fb      	beq.n	154e <datastreamer_output+0x112>
		if(count_bytes_out==(DEF_NUM_CHANNELS-1))
    1556:	8823      	ldrh	r3, [r4, #0]
    1558:	b29b      	uxth	r3, r3
    155a:	2b9f      	cmp	r3, #159	; 0x9f
    155c:	d000      	beq.n	1560 <datastreamer_output+0x124>
    155e:	e783      	b.n	1468 <datastreamer_output+0x2c>
		io_write(&USART.io, (uint8_t *)"\n", 1);
    1560:	2201      	movs	r2, #1
    1562:	4912      	ldr	r1, [pc, #72]	; (15ac <datastreamer_output+0x170>)
    1564:	480b      	ldr	r0, [pc, #44]	; (1594 <datastreamer_output+0x158>)
    1566:	4b0c      	ldr	r3, [pc, #48]	; (1598 <datastreamer_output+0x15c>)
    1568:	4798      	blx	r3
		while (!usart_async_is_tx_empty(&USART))
    156a:	4d0a      	ldr	r5, [pc, #40]	; (1594 <datastreamer_output+0x158>)
    156c:	4e0b      	ldr	r6, [pc, #44]	; (159c <datastreamer_output+0x160>)
    156e:	0028      	movs	r0, r5
    1570:	47b0      	blx	r6
    1572:	2800      	cmp	r0, #0
    1574:	d0fb      	beq.n	156e <datastreamer_output+0x132>
    1576:	e777      	b.n	1468 <datastreamer_output+0x2c>
	/* Frame End */
//	datastreamer_transmit(sequence++);

	/* End token */
//	datastreamer_transmit(~0x55);
}
    1578:	b007      	add	sp, #28
    157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    157c:	00001741 	.word	0x00001741
    1580:	00001755 	.word	0x00001755
    1584:	00001769 	.word	0x00001769
    1588:	0000177d 	.word	0x0000177d
    158c:	000028dd 	.word	0x000028dd
    1590:	00002a50 	.word	0x00002a50
    1594:	20000798 	.word	0x20000798
    1598:	00000869 	.word	0x00000869
    159c:	00000df1 	.word	0x00000df1
    15a0:	000028d5 	.word	0x000028d5
    15a4:	000028ed 	.word	0x000028ed
    15a8:	00002971 	.word	0x00002971
    15ac:	00002a54 	.word	0x00002a54

000015b0 <qtm_measure_complete_callback>:
Output : none
Notes  :
============================================================================*/
static void qtm_measure_complete_callback(void)
{
	touch_postprocess_request = 1u;
    15b0:	2201      	movs	r2, #1
    15b2:	4b01      	ldr	r3, [pc, #4]	; (15b8 <qtm_measure_complete_callback+0x8>)
    15b4:	701a      	strb	r2, [r3, #0]
}
    15b6:	4770      	bx	lr
    15b8:	20000748 	.word	0x20000748

000015bc <touch_process>:
Input  : none
Output : none
Notes  :
============================================================================*/
void touch_process(void)
{
    15bc:	b510      	push	{r4, lr}
	touch_ret_t touch_ret;

	/* check the time_to_measure_touch_flag flag for Touch Acquisition */
	if (time_to_measure_touch_flag == 1u) {
    15be:	4b1d      	ldr	r3, [pc, #116]	; (1634 <touch_process+0x78>)
    15c0:	785b      	ldrb	r3, [r3, #1]
    15c2:	2b01      	cmp	r3, #1
    15c4:	d004      	beq.n	15d0 <touch_process+0x14>
			time_to_measure_touch_flag = 0u;
		}
	}

	/* check the flag for node level post processing */
	if (touch_postprocess_request == 1u) {
    15c6:	4b1b      	ldr	r3, [pc, #108]	; (1634 <touch_process+0x78>)
    15c8:	781b      	ldrb	r3, [r3, #0]
    15ca:	2b01      	cmp	r3, #1
    15cc:	d00a      	beq.n	15e4 <touch_process+0x28>

#if DEF_TOUCH_DATA_STREAMER_ENABLE == 1
		datastreamer_output();
#endif
	}
}
    15ce:	bd10      	pop	{r4, pc}
		touch_ret = qtm_ptc_start_measurement_seq(&qtlib_acq_set1, qtm_measure_complete_callback);
    15d0:	4919      	ldr	r1, [pc, #100]	; (1638 <touch_process+0x7c>)
    15d2:	481a      	ldr	r0, [pc, #104]	; (163c <touch_process+0x80>)
    15d4:	4b1a      	ldr	r3, [pc, #104]	; (1640 <touch_process+0x84>)
    15d6:	4798      	blx	r3
		if (TOUCH_SUCCESS == touch_ret) {
    15d8:	2800      	cmp	r0, #0
    15da:	d1f4      	bne.n	15c6 <touch_process+0xa>
			time_to_measure_touch_flag = 0u;
    15dc:	2200      	movs	r2, #0
    15de:	4b15      	ldr	r3, [pc, #84]	; (1634 <touch_process+0x78>)
    15e0:	705a      	strb	r2, [r3, #1]
    15e2:	e7f0      	b.n	15c6 <touch_process+0xa>
		touch_postprocess_request = 0u;
    15e4:	2200      	movs	r2, #0
    15e6:	4b13      	ldr	r3, [pc, #76]	; (1634 <touch_process+0x78>)
    15e8:	701a      	strb	r2, [r3, #0]
		touch_ret = qtm_acquisition_process();
    15ea:	4b16      	ldr	r3, [pc, #88]	; (1644 <touch_process+0x88>)
    15ec:	4798      	blx	r3
		if (TOUCH_SUCCESS == touch_ret) {
    15ee:	2800      	cmp	r0, #0
    15f0:	d10b      	bne.n	160a <touch_process+0x4e>
			touch_ret = qtm_key_sensors_process(&qtlib_key_set1);
    15f2:	4812      	ldr	r0, [pc, #72]	; (163c <touch_process+0x80>)
    15f4:	300c      	adds	r0, #12
    15f6:	4b14      	ldr	r3, [pc, #80]	; (1648 <touch_process+0x8c>)
    15f8:	4798      	blx	r3
			if (TOUCH_SUCCESS != touch_ret) {
    15fa:	2800      	cmp	r0, #0
    15fc:	d00a      	beq.n	1614 <touch_process+0x58>
	module_error_code = error + 1u;
    15fe:	2202      	movs	r2, #2
    1600:	4b0c      	ldr	r3, [pc, #48]	; (1634 <touch_process+0x78>)
    1602:	709a      	strb	r2, [r3, #2]
	datastreamer_output();
    1604:	4b11      	ldr	r3, [pc, #68]	; (164c <touch_process+0x90>)
    1606:	4798      	blx	r3
    1608:	e004      	b.n	1614 <touch_process+0x58>
	module_error_code = error + 1u;
    160a:	2201      	movs	r2, #1
    160c:	4b09      	ldr	r3, [pc, #36]	; (1634 <touch_process+0x78>)
    160e:	709a      	strb	r2, [r3, #2]
	datastreamer_output();
    1610:	4b0e      	ldr	r3, [pc, #56]	; (164c <touch_process+0x90>)
    1612:	4798      	blx	r3
		if ((0u != (qtlib_key_set1.qtm_touch_key_group_data->qtm_keys_status & 0x80u))) {
    1614:	4b09      	ldr	r3, [pc, #36]	; (163c <touch_process+0x80>)
    1616:	68db      	ldr	r3, [r3, #12]
    1618:	781b      	ldrb	r3, [r3, #0]
    161a:	2b7f      	cmp	r3, #127	; 0x7f
    161c:	d805      	bhi.n	162a <touch_process+0x6e>
			measurement_done_touch = 1u;
    161e:	2201      	movs	r2, #1
    1620:	4b04      	ldr	r3, [pc, #16]	; (1634 <touch_process+0x78>)
    1622:	70da      	strb	r2, [r3, #3]
		datastreamer_output();
    1624:	4b09      	ldr	r3, [pc, #36]	; (164c <touch_process+0x90>)
    1626:	4798      	blx	r3
}
    1628:	e7d1      	b.n	15ce <touch_process+0x12>
			time_to_measure_touch_flag = 1u;
    162a:	2201      	movs	r2, #1
    162c:	4b01      	ldr	r3, [pc, #4]	; (1634 <touch_process+0x78>)
    162e:	705a      	strb	r2, [r3, #1]
    1630:	e7f8      	b.n	1624 <touch_process+0x68>
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	20000748 	.word	0x20000748
    1638:	000015b1 	.word	0x000015b1
    163c:	20000000 	.word	0x20000000
    1640:	00002505 	.word	0x00002505
    1644:	00002085 	.word	0x00002085
    1648:	00001865 	.word	0x00001865
    164c:	0000143d 	.word	0x0000143d

00001650 <touch_timer_handler>:
Input  : none
Output : none
Notes  :
============================================================================*/
void touch_timer_handler(void)
{
    1650:	b510      	push	{r4, lr}
	/* Count complete - Measure touch sensors */
	time_to_measure_touch_flag = 1u;
    1652:	2201      	movs	r2, #1
    1654:	4b02      	ldr	r3, [pc, #8]	; (1660 <touch_timer_handler+0x10>)
    1656:	705a      	strb	r2, [r3, #1]
	qtm_update_qtlib_timer(DEF_TOUCH_MEASUREMENT_PERIOD_MS);
    1658:	2014      	movs	r0, #20
    165a:	4b02      	ldr	r3, [pc, #8]	; (1664 <touch_timer_handler+0x14>)
    165c:	4798      	blx	r3
}
    165e:	bd10      	pop	{r4, pc}
    1660:	20000748 	.word	0x20000748
    1664:	0000182d 	.word	0x0000182d

00001668 <Timer_task_cb>:

void Timer_task_cb(const struct timer_task *const timer_task)
{
    1668:	b510      	push	{r4, lr}
	touch_timer_handler();
    166a:	4b01      	ldr	r3, [pc, #4]	; (1670 <Timer_task_cb+0x8>)
    166c:	4798      	blx	r3
}
    166e:	bd10      	pop	{r4, pc}
    1670:	00001651 	.word	0x00001651

00001674 <touch_timer_config>:

void touch_timer_config(void)
{
    1674:	b570      	push	{r4, r5, r6, lr}
	static struct timer_task Timer_task;
	static uint8_t           timer_task_added = 0;

	if (timer_task_added) {
    1676:	4b0e      	ldr	r3, [pc, #56]	; (16b0 <touch_timer_config+0x3c>)
    1678:	791b      	ldrb	r3, [r3, #4]
    167a:	2b00      	cmp	r3, #0
    167c:	d111      	bne.n	16a2 <touch_timer_config+0x2e>
		timer_remove_task(&Timer, &Timer_task);
	}
#if (KRONO_GESTURE_ENABLE == 1u)
	Timer_task.interval = 1;
#else
	Timer_task.interval = DEF_TOUCH_MEASUREMENT_PERIOD_MS;
    167e:	4c0c      	ldr	r4, [pc, #48]	; (16b0 <touch_timer_config+0x3c>)
    1680:	2314      	movs	r3, #20
    1682:	6123      	str	r3, [r4, #16]
#endif
	Timer_task.cb   = Timer_task_cb;
    1684:	4b0b      	ldr	r3, [pc, #44]	; (16b4 <touch_timer_config+0x40>)
    1686:	6163      	str	r3, [r4, #20]
	Timer_task.mode = TIMER_TASK_REPEAT;
    1688:	2601      	movs	r6, #1
    168a:	7626      	strb	r6, [r4, #24]

	timer_add_task(&Timer, &Timer_task);
    168c:	0021      	movs	r1, r4
    168e:	3108      	adds	r1, #8
    1690:	4d09      	ldr	r5, [pc, #36]	; (16b8 <touch_timer_config+0x44>)
    1692:	0028      	movs	r0, r5
    1694:	4b09      	ldr	r3, [pc, #36]	; (16bc <touch_timer_config+0x48>)
    1696:	4798      	blx	r3
	timer_task_added = 1;
    1698:	7126      	strb	r6, [r4, #4]
	timer_start(&Timer);
    169a:	0028      	movs	r0, r5
    169c:	4b08      	ldr	r3, [pc, #32]	; (16c0 <touch_timer_config+0x4c>)
    169e:	4798      	blx	r3
}
    16a0:	bd70      	pop	{r4, r5, r6, pc}
		timer_remove_task(&Timer, &Timer_task);
    16a2:	4903      	ldr	r1, [pc, #12]	; (16b0 <touch_timer_config+0x3c>)
    16a4:	3108      	adds	r1, #8
    16a6:	4804      	ldr	r0, [pc, #16]	; (16b8 <touch_timer_config+0x44>)
    16a8:	4b06      	ldr	r3, [pc, #24]	; (16c4 <touch_timer_config+0x50>)
    16aa:	4798      	blx	r3
    16ac:	e7e7      	b.n	167e <touch_timer_config+0xa>
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	20000748 	.word	0x20000748
    16b4:	00001669 	.word	0x00001669
    16b8:	2000077c 	.word	0x2000077c
    16bc:	00000a19 	.word	0x00000a19
    16c0:	000009dd 	.word	0x000009dd
    16c4:	00000ac5 	.word	0x00000ac5

000016c8 <touch_init>:
{
    16c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	touch_timer_config();
    16ca:	4b13      	ldr	r3, [pc, #76]	; (1718 <touch_init+0x50>)
    16cc:	4798      	blx	r3
	qtm_ptc_init_acquisition_module(&qtlib_acq_set1);
    16ce:	4813      	ldr	r0, [pc, #76]	; (171c <touch_init+0x54>)
    16d0:	4b13      	ldr	r3, [pc, #76]	; (1720 <touch_init+0x58>)
    16d2:	4798      	blx	r3
	qtm_ptc_qtlib_assign_signal_memory(&touch_acq_signals_raw[0]);
    16d4:	4813      	ldr	r0, [pc, #76]	; (1724 <touch_init+0x5c>)
    16d6:	4b14      	ldr	r3, [pc, #80]	; (1728 <touch_init+0x60>)
    16d8:	4798      	blx	r3
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
    16da:	2400      	movs	r4, #0
		qtm_enable_sensor_node(&qtlib_acq_set1, sensor_nodes);
    16dc:	4d0f      	ldr	r5, [pc, #60]	; (171c <touch_init+0x54>)
    16de:	4f13      	ldr	r7, [pc, #76]	; (172c <touch_init+0x64>)
		qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_nodes);
    16e0:	4e13      	ldr	r6, [pc, #76]	; (1730 <touch_init+0x68>)
		qtm_enable_sensor_node(&qtlib_acq_set1, sensor_nodes);
    16e2:	0021      	movs	r1, r4
    16e4:	0028      	movs	r0, r5
    16e6:	47b8      	blx	r7
		qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_nodes);
    16e8:	0021      	movs	r1, r4
    16ea:	0028      	movs	r0, r5
    16ec:	47b0      	blx	r6
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
    16ee:	3401      	adds	r4, #1
    16f0:	b2a4      	uxth	r4, r4
    16f2:	2ca0      	cmp	r4, #160	; 0xa0
    16f4:	d1f5      	bne.n	16e2 <touch_init+0x1a>
    16f6:	4d0f      	ldr	r5, [pc, #60]	; (1734 <touch_init+0x6c>)
    16f8:	2400      	movs	r4, #0
		qtm_init_sensor_key(&qtlib_key_set1, sensor_nodes, &ptc_qtlib_node_stat1[sensor_nodes]);
    16fa:	4e08      	ldr	r6, [pc, #32]	; (171c <touch_init+0x54>)
    16fc:	360c      	adds	r6, #12
    16fe:	4f0e      	ldr	r7, [pc, #56]	; (1738 <touch_init+0x70>)
    1700:	b2e1      	uxtb	r1, r4
    1702:	002a      	movs	r2, r5
    1704:	0030      	movs	r0, r6
    1706:	47b8      	blx	r7
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
    1708:	3401      	adds	r4, #1
    170a:	b2a4      	uxth	r4, r4
    170c:	3506      	adds	r5, #6
    170e:	2ca0      	cmp	r4, #160	; 0xa0
    1710:	d1f6      	bne.n	1700 <touch_init+0x38>
	datastreamer_init();
    1712:	4b0a      	ldr	r3, [pc, #40]	; (173c <touch_init+0x74>)
    1714:	4798      	blx	r3
}
    1716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1718:	00001675 	.word	0x00001675
    171c:	20000000 	.word	0x20000000
    1720:	000023c5 	.word	0x000023c5
    1724:	20000bb0 	.word	0x20000bb0
    1728:	000024f1 	.word	0x000024f1
    172c:	000025f1 	.word	0x000025f1
    1730:	00002611 	.word	0x00002611
    1734:	200007f0 	.word	0x200007f0
    1738:	0000183d 	.word	0x0000183d
    173c:	00001429 	.word	0x00001429

00001740 <get_sensor_node_signal>:

uint16_t get_sensor_node_signal(uint16_t sensor_node)
{
	return (ptc_qtlib_node_stat1[sensor_node].node_acq_signals);
    1740:	0043      	lsls	r3, r0, #1
    1742:	1818      	adds	r0, r3, r0
    1744:	0040      	lsls	r0, r0, #1
    1746:	4b02      	ldr	r3, [pc, #8]	; (1750 <get_sensor_node_signal+0x10>)
    1748:	1818      	adds	r0, r3, r0
    174a:	8840      	ldrh	r0, [r0, #2]
}
    174c:	4770      	bx	lr
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	200007f0 	.word	0x200007f0

00001754 <get_sensor_node_reference>:
	ptc_qtlib_node_stat1[sensor_node].node_acq_signals = new_signal;
}

uint16_t get_sensor_node_reference(uint16_t sensor_node)
{
	return (qtlib_key_data_set1[sensor_node].channel_reference);
    1754:	0043      	lsls	r3, r0, #1
    1756:	1818      	adds	r0, r3, r0
    1758:	0080      	lsls	r0, r0, #2
    175a:	4b02      	ldr	r3, [pc, #8]	; (1764 <get_sensor_node_reference+0x10>)
    175c:	1818      	adds	r0, r3, r0
    175e:	8900      	ldrh	r0, [r0, #8]
}
    1760:	4770      	bx	lr
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	20000cf0 	.word	0x20000cf0

00001768 <get_sensor_cc_val>:
	qtlib_key_data_set1[sensor_node].channel_reference = new_reference;
}

uint16_t get_sensor_cc_val(uint16_t sensor_node)
{
	return (ptc_qtlib_node_stat1[sensor_node].node_comp_caps);
    1768:	0043      	lsls	r3, r0, #1
    176a:	1818      	adds	r0, r3, r0
    176c:	0040      	lsls	r0, r0, #1
    176e:	4b02      	ldr	r3, [pc, #8]	; (1778 <get_sensor_cc_val+0x10>)
    1770:	1818      	adds	r0, r3, r0
    1772:	8880      	ldrh	r0, [r0, #4]
}
    1774:	4770      	bx	lr
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	200007f0 	.word	0x200007f0

0000177c <get_sensor_state>:
	ptc_qtlib_node_stat1[sensor_node].node_comp_caps = new_cc_value;
}

uint8_t get_sensor_state(uint16_t sensor_node)
{
	return (qtlib_key_set1.qtm_touch_key_data[sensor_node].sensor_state);
    177c:	4b03      	ldr	r3, [pc, #12]	; (178c <get_sensor_state+0x10>)
    177e:	695a      	ldr	r2, [r3, #20]
    1780:	0043      	lsls	r3, r0, #1
    1782:	1818      	adds	r0, r3, r0
    1784:	0080      	lsls	r0, r0, #2
    1786:	5c10      	ldrb	r0, [r2, r0]
}
    1788:	4770      	bx	lr
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	20000000 	.word	0x20000000

00001790 <PTC_Handler>:
Input  : none
Output : none
Notes  : none
============================================================================*/
void PTC_Handler(void)
{
    1790:	b510      	push	{r4, lr}
	qtm_ptc_clear_interrupt();
    1792:	4b02      	ldr	r3, [pc, #8]	; (179c <PTC_Handler+0xc>)
    1794:	4798      	blx	r3
	qtm_samd21_ptc_handler_eoc();
    1796:	4b02      	ldr	r3, [pc, #8]	; (17a0 <PTC_Handler+0x10>)
    1798:	4798      	blx	r3
}
    179a:	bd10      	pop	{r4, pc}
    179c:	00002661 	.word	0x00002661
    17a0:	00002685 	.word	0x00002685

000017a4 <check_for_aks_block>:
    17a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    17a6:	2203      	movs	r2, #3
    17a8:	0013      	movs	r3, r2
    17aa:	434b      	muls	r3, r1
    17ac:	3209      	adds	r2, #9
    17ae:	0016      	movs	r6, r2
    17b0:	434e      	muls	r6, r1
    17b2:	6884      	ldr	r4, [r0, #8]
    17b4:	19a6      	adds	r6, r4, r6
    17b6:	68c5      	ldr	r5, [r0, #12]
    17b8:	6872      	ldr	r2, [r6, #4]
    17ba:	18eb      	adds	r3, r5, r3
    17bc:	8852      	ldrh	r2, [r2, #2]
    17be:	8936      	ldrh	r6, [r6, #8]
    17c0:	789f      	ldrb	r7, [r3, #2]
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	1b92      	subs	r2, r2, r6
    17c6:	1ad2      	subs	r2, r2, r3
    17c8:	6843      	ldr	r3, [r0, #4]
    17ca:	2000      	movs	r0, #0
    17cc:	881b      	ldrh	r3, [r3, #0]
    17ce:	0412      	lsls	r2, r2, #16
    17d0:	9301      	str	r3, [sp, #4]
    17d2:	0c12      	lsrs	r2, r2, #16
    17d4:	9b01      	ldr	r3, [sp, #4]
    17d6:	4298      	cmp	r0, r3
    17d8:	d022      	beq.n	1820 <check_for_aks_block+0x7c>
    17da:	4288      	cmp	r0, r1
    17dc:	d01a      	beq.n	1814 <check_for_aks_block+0x70>
    17de:	78ab      	ldrb	r3, [r5, #2]
    17e0:	42bb      	cmp	r3, r7
    17e2:	d117      	bne.n	1814 <check_for_aks_block+0x70>
    17e4:	7823      	ldrb	r3, [r4, #0]
    17e6:	337b      	adds	r3, #123	; 0x7b
    17e8:	061b      	lsls	r3, r3, #24
    17ea:	0e1b      	lsrs	r3, r3, #24
    17ec:	2b01      	cmp	r3, #1
    17ee:	d919      	bls.n	1824 <check_for_aks_block+0x80>
    17f0:	8923      	ldrh	r3, [r4, #8]
    17f2:	469c      	mov	ip, r3
    17f4:	6863      	ldr	r3, [r4, #4]
    17f6:	885b      	ldrh	r3, [r3, #2]
    17f8:	459c      	cmp	ip, r3
    17fa:	d20b      	bcs.n	1814 <check_for_aks_block+0x70>
    17fc:	4666      	mov	r6, ip
    17fe:	1b9b      	subs	r3, r3, r6
    1800:	782e      	ldrb	r6, [r5, #0]
    1802:	041b      	lsls	r3, r3, #16
    1804:	0c1b      	lsrs	r3, r3, #16
    1806:	42b3      	cmp	r3, r6
    1808:	d904      	bls.n	1814 <check_for_aks_block+0x70>
    180a:	1b9b      	subs	r3, r3, r6
    180c:	041b      	lsls	r3, r3, #16
    180e:	0c1b      	lsrs	r3, r3, #16
    1810:	429a      	cmp	r2, r3
    1812:	d307      	bcc.n	1824 <check_for_aks_block+0x80>
    1814:	3001      	adds	r0, #1
    1816:	0400      	lsls	r0, r0, #16
    1818:	0c00      	lsrs	r0, r0, #16
    181a:	3503      	adds	r5, #3
    181c:	340c      	adds	r4, #12
    181e:	e7d9      	b.n	17d4 <check_for_aks_block+0x30>
    1820:	2000      	movs	r0, #0
    1822:	e000      	b.n	1826 <check_for_aks_block+0x82>
    1824:	2001      	movs	r0, #1
    1826:	bcfe      	pop	{r1, r2, r3, r4, r5, r6, r7}
    1828:	bc02      	pop	{r1}
    182a:	4708      	bx	r1

0000182c <qtm_update_qtlib_timer>:
    182c:	4a02      	ldr	r2, [pc, #8]	; (1838 <qtm_update_qtlib_timer+0xc>)
    182e:	8813      	ldrh	r3, [r2, #0]
    1830:	18c0      	adds	r0, r0, r3
    1832:	8010      	strh	r0, [r2, #0]
    1834:	4770      	bx	lr
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	20000764 	.word	0x20000764

0000183c <qtm_init_sensor_key>:
    183c:	b510      	push	{r4, lr}
    183e:	230b      	movs	r3, #11
    1840:	2800      	cmp	r0, #0
    1842:	d00b      	beq.n	185c <qtm_init_sensor_key+0x20>
    1844:	2a00      	cmp	r2, #0
    1846:	d009      	beq.n	185c <qtm_init_sensor_key+0x20>
    1848:	3301      	adds	r3, #1
    184a:	000c      	movs	r4, r1
    184c:	435c      	muls	r4, r3
    184e:	6881      	ldr	r1, [r0, #8]
    1850:	3b0b      	subs	r3, #11
    1852:	550b      	strb	r3, [r1, r4]
    1854:	6883      	ldr	r3, [r0, #8]
    1856:	1919      	adds	r1, r3, r4
    1858:	2300      	movs	r3, #0
    185a:	604a      	str	r2, [r1, #4]
    185c:	0018      	movs	r0, r3
    185e:	bc10      	pop	{r4}
    1860:	bc02      	pop	{r1}
    1862:	4708      	bx	r1

00001864 <qtm_key_sensors_process>:
    1864:	b5f0      	push	{r4, r5, r6, r7, lr}
    1866:	0004      	movs	r4, r0
    1868:	b085      	sub	sp, #20
    186a:	200b      	movs	r0, #11
    186c:	2c00      	cmp	r4, #0
    186e:	d100      	bne.n	1872 <qtm_key_sensors_process+0xe>
    1870:	e275      	b.n	1d5e <qtm_key_sensors_process+0x4fa>
    1872:	2600      	movs	r6, #0
    1874:	9600      	str	r6, [sp, #0]
    1876:	9601      	str	r6, [sp, #4]
    1878:	6861      	ldr	r1, [r4, #4]
    187a:	880b      	ldrh	r3, [r1, #0]
    187c:	42b3      	cmp	r3, r6
    187e:	d800      	bhi.n	1882 <qtm_key_sensors_process+0x1e>
    1880:	e126      	b.n	1ad0 <qtm_key_sensors_process+0x26c>
    1882:	270c      	movs	r7, #12
    1884:	4377      	muls	r7, r6
    1886:	68a3      	ldr	r3, [r4, #8]
    1888:	19dd      	adds	r5, r3, r7
    188a:	782b      	ldrb	r3, [r5, #0]
    188c:	2b04      	cmp	r3, #4
    188e:	d06e      	beq.n	196e <qtm_key_sensors_process+0x10a>
    1890:	d805      	bhi.n	189e <qtm_key_sensors_process+0x3a>
    1892:	2b02      	cmp	r3, #2
    1894:	d01a      	beq.n	18cc <qtm_key_sensors_process+0x68>
    1896:	d82f      	bhi.n	18f8 <qtm_key_sensors_process+0x94>
    1898:	2b01      	cmp	r3, #1
    189a:	d00a      	beq.n	18b2 <qtm_key_sensors_process+0x4e>
    189c:	e114      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    189e:	2b85      	cmp	r3, #133	; 0x85
    18a0:	d100      	bne.n	18a4 <qtm_key_sensors_process+0x40>
    18a2:	e084      	b.n	19ae <qtm_key_sensors_process+0x14a>
    18a4:	2b86      	cmp	r3, #134	; 0x86
    18a6:	d100      	bne.n	18aa <qtm_key_sensors_process+0x46>
    18a8:	e0b2      	b.n	1a10 <qtm_key_sensors_process+0x1ac>
    18aa:	2b07      	cmp	r3, #7
    18ac:	d000      	beq.n	18b0 <qtm_key_sensors_process+0x4c>
    18ae:	e10b      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    18b0:	e0e3      	b.n	1a7a <qtm_key_sensors_process+0x216>
    18b2:	9301      	str	r3, [sp, #4]
    18b4:	231e      	movs	r3, #30
    18b6:	686a      	ldr	r2, [r5, #4]
    18b8:	7812      	ldrb	r2, [r2, #0]
    18ba:	421a      	tst	r2, r3
    18bc:	d000      	beq.n	18c0 <qtm_key_sensors_process+0x5c>
    18be:	e103      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    18c0:	3b1c      	subs	r3, #28
    18c2:	702b      	strb	r3, [r5, #0]
    18c4:	68a3      	ldr	r3, [r4, #8]
    18c6:	19df      	adds	r7, r3, r7
    18c8:	2308      	movs	r3, #8
    18ca:	e0fc      	b.n	1ac6 <qtm_key_sensors_process+0x262>
    18cc:	786a      	ldrb	r2, [r5, #1]
    18ce:	2a00      	cmp	r2, #0
    18d0:	d00f      	beq.n	18f2 <qtm_key_sensors_process+0x8e>
    18d2:	6869      	ldr	r1, [r5, #4]
    18d4:	2a04      	cmp	r2, #4
    18d6:	d901      	bls.n	18dc <qtm_key_sensors_process+0x78>
    18d8:	884b      	ldrh	r3, [r1, #2]
    18da:	e007      	b.n	18ec <qtm_key_sensors_process+0x88>
    18dc:	892b      	ldrh	r3, [r5, #8]
    18de:	8849      	ldrh	r1, [r1, #2]
    18e0:	428b      	cmp	r3, r1
    18e2:	d004      	beq.n	18ee <qtm_key_sensors_process+0x8a>
    18e4:	d901      	bls.n	18ea <qtm_key_sensors_process+0x86>
    18e6:	3b01      	subs	r3, #1
    18e8:	e000      	b.n	18ec <qtm_key_sensors_process+0x88>
    18ea:	3301      	adds	r3, #1
    18ec:	812b      	strh	r3, [r5, #8]
    18ee:	1e53      	subs	r3, r2, #1
    18f0:	e0e1      	b.n	1ab6 <qtm_key_sensors_process+0x252>
    18f2:	2303      	movs	r3, #3
    18f4:	702b      	strb	r3, [r5, #0]
    18f6:	e0e7      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    18f8:	686b      	ldr	r3, [r5, #4]
    18fa:	892a      	ldrh	r2, [r5, #8]
    18fc:	885b      	ldrh	r3, [r3, #2]
    18fe:	429a      	cmp	r2, r3
    1900:	d100      	bne.n	1904 <qtm_key_sensors_process+0xa0>
    1902:	e0e1      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    1904:	68e0      	ldr	r0, [r4, #12]
    1906:	d915      	bls.n	1934 <qtm_key_sensors_process+0xd0>
    1908:	1ad3      	subs	r3, r2, r3
    190a:	2203      	movs	r2, #3
    190c:	4372      	muls	r2, r6
    190e:	5c82      	ldrb	r2, [r0, r2]
    1910:	7948      	ldrb	r0, [r1, #5]
    1912:	4102      	asrs	r2, r0
    1914:	041b      	lsls	r3, r3, #16
    1916:	0612      	lsls	r2, r2, #24
    1918:	0c1b      	lsrs	r3, r3, #16
    191a:	0e12      	lsrs	r2, r2, #24
    191c:	4293      	cmp	r3, r2
    191e:	da00      	bge.n	1922 <qtm_key_sensors_process+0xbe>
    1920:	e0d2      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    1922:	790b      	ldrb	r3, [r1, #4]
    1924:	2b00      	cmp	r3, #0
    1926:	d100      	bne.n	192a <qtm_key_sensors_process+0xc6>
    1928:	e0ce      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    192a:	2307      	movs	r3, #7
    192c:	702b      	strb	r3, [r5, #0]
    192e:	6863      	ldr	r3, [r4, #4]
    1930:	791b      	ldrb	r3, [r3, #4]
    1932:	e018      	b.n	1966 <qtm_key_sensors_process+0x102>
    1934:	2103      	movs	r1, #3
    1936:	4371      	muls	r1, r6
    1938:	1841      	adds	r1, r0, r1
    193a:	1a9b      	subs	r3, r3, r2
    193c:	780a      	ldrb	r2, [r1, #0]
    193e:	041b      	lsls	r3, r3, #16
    1940:	0c1b      	lsrs	r3, r3, #16
    1942:	429a      	cmp	r2, r3
    1944:	d900      	bls.n	1948 <qtm_key_sensors_process+0xe4>
    1946:	e0bf      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    1948:	788b      	ldrb	r3, [r1, #2]
    194a:	2b00      	cmp	r3, #0
    194c:	d007      	beq.n	195e <qtm_key_sensors_process+0xfa>
    194e:	0031      	movs	r1, r6
    1950:	0020      	movs	r0, r4
    1952:	4ba8      	ldr	r3, [pc, #672]	; (1bf4 <qtm_key_sensors_process+0x390>)
    1954:	f000 fa0a 	bl	1d6c <qtm_key_sensors_process+0x508>
    1958:	2800      	cmp	r0, #0
    195a:	d000      	beq.n	195e <qtm_key_sensors_process+0xfa>
    195c:	e0b4      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    195e:	2304      	movs	r3, #4
    1960:	702b      	strb	r3, [r5, #0]
    1962:	6863      	ldr	r3, [r4, #4]
    1964:	789b      	ldrb	r3, [r3, #2]
    1966:	68a2      	ldr	r2, [r4, #8]
    1968:	19d7      	adds	r7, r2, r7
    196a:	707b      	strb	r3, [r7, #1]
    196c:	e0a4      	b.n	1ab8 <qtm_key_sensors_process+0x254>
    196e:	686b      	ldr	r3, [r5, #4]
    1970:	8929      	ldrh	r1, [r5, #8]
    1972:	885b      	ldrh	r3, [r3, #2]
    1974:	4299      	cmp	r1, r3
    1976:	d900      	bls.n	197a <qtm_key_sensors_process+0x116>
    1978:	e0a0      	b.n	1abc <qtm_key_sensors_process+0x258>
    197a:	2203      	movs	r2, #3
    197c:	4372      	muls	r2, r6
    197e:	68e0      	ldr	r0, [r4, #12]
    1980:	1882      	adds	r2, r0, r2
    1982:	1a5b      	subs	r3, r3, r1
    1984:	7811      	ldrb	r1, [r2, #0]
    1986:	041b      	lsls	r3, r3, #16
    1988:	0c1b      	lsrs	r3, r3, #16
    198a:	4299      	cmp	r1, r3
    198c:	d300      	bcc.n	1990 <qtm_key_sensors_process+0x12c>
    198e:	e095      	b.n	1abc <qtm_key_sensors_process+0x258>
    1990:	7893      	ldrb	r3, [r2, #2]
    1992:	2b00      	cmp	r3, #0
    1994:	d007      	beq.n	19a6 <qtm_key_sensors_process+0x142>
    1996:	0031      	movs	r1, r6
    1998:	0020      	movs	r0, r4
    199a:	4b96      	ldr	r3, [pc, #600]	; (1bf4 <qtm_key_sensors_process+0x390>)
    199c:	f000 f9e6 	bl	1d6c <qtm_key_sensors_process+0x508>
    19a0:	2800      	cmp	r0, #0
    19a2:	d000      	beq.n	19a6 <qtm_key_sensors_process+0x142>
    19a4:	e090      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    19a6:	786b      	ldrb	r3, [r5, #1]
    19a8:	2b00      	cmp	r3, #0
    19aa:	d050      	beq.n	1a4e <qtm_key_sensors_process+0x1ea>
    19ac:	e082      	b.n	1ab4 <qtm_key_sensors_process+0x250>
    19ae:	7a0b      	ldrb	r3, [r1, #8]
    19b0:	6822      	ldr	r2, [r4, #0]
    19b2:	7113      	strb	r3, [r2, #4]
    19b4:	68a3      	ldr	r3, [r4, #8]
    19b6:	19d9      	adds	r1, r3, r7
    19b8:	890b      	ldrh	r3, [r1, #8]
    19ba:	469c      	mov	ip, r3
    19bc:	684b      	ldr	r3, [r1, #4]
    19be:	885d      	ldrh	r5, [r3, #2]
    19c0:	45ac      	cmp	ip, r5
    19c2:	d907      	bls.n	19d4 <qtm_key_sensors_process+0x170>
    19c4:	2386      	movs	r3, #134	; 0x86
    19c6:	700b      	strb	r3, [r1, #0]
    19c8:	6863      	ldr	r3, [r4, #4]
    19ca:	68a2      	ldr	r2, [r4, #8]
    19cc:	789b      	ldrb	r3, [r3, #2]
    19ce:	19d7      	adds	r7, r2, r7
    19d0:	707b      	strb	r3, [r7, #1]
    19d2:	e04e      	b.n	1a72 <qtm_key_sensors_process+0x20e>
    19d4:	2003      	movs	r0, #3
    19d6:	4370      	muls	r0, r6
    19d8:	68e3      	ldr	r3, [r4, #12]
    19da:	1818      	adds	r0, r3, r0
    19dc:	7802      	ldrb	r2, [r0, #0]
    19de:	0013      	movs	r3, r2
    19e0:	7840      	ldrb	r0, [r0, #1]
    19e2:	3001      	adds	r0, #1
    19e4:	4103      	asrs	r3, r0
    19e6:	0018      	movs	r0, r3
    19e8:	4663      	mov	r3, ip
    19ea:	1a12      	subs	r2, r2, r0
    19ec:	2001      	movs	r0, #1
    19ee:	1aeb      	subs	r3, r5, r3
    19f0:	0612      	lsls	r2, r2, #24
    19f2:	041b      	lsls	r3, r3, #16
    19f4:	0e12      	lsrs	r2, r2, #24
    19f6:	0c1b      	lsrs	r3, r3, #16
    19f8:	9000      	str	r0, [sp, #0]
    19fa:	429a      	cmp	r2, r3
    19fc:	d364      	bcc.n	1ac8 <qtm_key_sensors_process+0x264>
    19fe:	2386      	movs	r3, #134	; 0x86
    1a00:	700b      	strb	r3, [r1, #0]
    1a02:	6863      	ldr	r3, [r4, #4]
    1a04:	68a2      	ldr	r2, [r4, #8]
    1a06:	789b      	ldrb	r3, [r3, #2]
    1a08:	19d7      	adds	r7, r2, r7
    1a0a:	707b      	strb	r3, [r7, #1]
    1a0c:	0003      	movs	r3, r0
    1a0e:	e032      	b.n	1a76 <qtm_key_sensors_process+0x212>
    1a10:	686b      	ldr	r3, [r5, #4]
    1a12:	8928      	ldrh	r0, [r5, #8]
    1a14:	885b      	ldrh	r3, [r3, #2]
    1a16:	469c      	mov	ip, r3
    1a18:	4298      	cmp	r0, r3
    1a1a:	d905      	bls.n	1a28 <qtm_key_sensors_process+0x1c4>
    1a1c:	786b      	ldrb	r3, [r5, #1]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d020      	beq.n	1a64 <qtm_key_sensors_process+0x200>
    1a22:	3b01      	subs	r3, #1
    1a24:	706b      	strb	r3, [r5, #1]
    1a26:	e01f      	b.n	1a68 <qtm_key_sensors_process+0x204>
    1a28:	2103      	movs	r1, #3
    1a2a:	4371      	muls	r1, r6
    1a2c:	68e3      	ldr	r3, [r4, #12]
    1a2e:	1859      	adds	r1, r3, r1
    1a30:	780a      	ldrb	r2, [r1, #0]
    1a32:	0013      	movs	r3, r2
    1a34:	7849      	ldrb	r1, [r1, #1]
    1a36:	3101      	adds	r1, #1
    1a38:	410b      	asrs	r3, r1
    1a3a:	0019      	movs	r1, r3
    1a3c:	4663      	mov	r3, ip
    1a3e:	1a52      	subs	r2, r2, r1
    1a40:	1a1b      	subs	r3, r3, r0
    1a42:	0612      	lsls	r2, r2, #24
    1a44:	041b      	lsls	r3, r3, #16
    1a46:	0e12      	lsrs	r2, r2, #24
    1a48:	0c1b      	lsrs	r3, r3, #16
    1a4a:	429a      	cmp	r2, r3
    1a4c:	d207      	bcs.n	1a5e <qtm_key_sensors_process+0x1fa>
    1a4e:	2385      	movs	r3, #133	; 0x85
    1a50:	702b      	strb	r3, [r5, #0]
    1a52:	6863      	ldr	r3, [r4, #4]
    1a54:	68a2      	ldr	r2, [r4, #8]
    1a56:	78db      	ldrb	r3, [r3, #3]
    1a58:	19d7      	adds	r7, r2, r7
    1a5a:	707b      	strb	r3, [r7, #1]
    1a5c:	e004      	b.n	1a68 <qtm_key_sensors_process+0x204>
    1a5e:	786b      	ldrb	r3, [r5, #1]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d104      	bne.n	1a6e <qtm_key_sensors_process+0x20a>
    1a64:	3303      	adds	r3, #3
    1a66:	702b      	strb	r3, [r5, #0]
    1a68:	2301      	movs	r3, #1
    1a6a:	9300      	str	r3, [sp, #0]
    1a6c:	e02c      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    1a6e:	3b01      	subs	r3, #1
    1a70:	706b      	strb	r3, [r5, #1]
    1a72:	2301      	movs	r3, #1
    1a74:	9300      	str	r3, [sp, #0]
    1a76:	9301      	str	r3, [sp, #4]
    1a78:	e026      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    1a7a:	686a      	ldr	r2, [r5, #4]
    1a7c:	892b      	ldrh	r3, [r5, #8]
    1a7e:	8852      	ldrh	r2, [r2, #2]
    1a80:	4293      	cmp	r3, r2
    1a82:	d91b      	bls.n	1abc <qtm_key_sensors_process+0x258>
    1a84:	1a9b      	subs	r3, r3, r2
    1a86:	2203      	movs	r2, #3
    1a88:	4372      	muls	r2, r6
    1a8a:	68e0      	ldr	r0, [r4, #12]
    1a8c:	7949      	ldrb	r1, [r1, #5]
    1a8e:	5c12      	ldrb	r2, [r2, r0]
    1a90:	410a      	asrs	r2, r1
    1a92:	041b      	lsls	r3, r3, #16
    1a94:	0612      	lsls	r2, r2, #24
    1a96:	0c1b      	lsrs	r3, r3, #16
    1a98:	0e12      	lsrs	r2, r2, #24
    1a9a:	4293      	cmp	r3, r2
    1a9c:	db0e      	blt.n	1abc <qtm_key_sensors_process+0x258>
    1a9e:	786b      	ldrb	r3, [r5, #1]
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d107      	bne.n	1ab4 <qtm_key_sensors_process+0x250>
    1aa4:	2203      	movs	r2, #3
    1aa6:	3301      	adds	r3, #1
    1aa8:	702b      	strb	r3, [r5, #0]
    1aaa:	68a3      	ldr	r3, [r4, #8]
    1aac:	19df      	adds	r7, r3, r7
    1aae:	687b      	ldr	r3, [r7, #4]
    1ab0:	701a      	strb	r2, [r3, #0]
    1ab2:	e009      	b.n	1ac8 <qtm_key_sensors_process+0x264>
    1ab4:	3b01      	subs	r3, #1
    1ab6:	706b      	strb	r3, [r5, #1]
    1ab8:	2301      	movs	r3, #1
    1aba:	e7dc      	b.n	1a76 <qtm_key_sensors_process+0x212>
    1abc:	2303      	movs	r3, #3
    1abe:	702b      	strb	r3, [r5, #0]
    1ac0:	68a3      	ldr	r3, [r4, #8]
    1ac2:	19df      	adds	r7, r3, r7
    1ac4:	2300      	movs	r3, #0
    1ac6:	707b      	strb	r3, [r7, #1]
    1ac8:	3601      	adds	r6, #1
    1aca:	0436      	lsls	r6, r6, #16
    1acc:	0c36      	lsrs	r6, r6, #16
    1ace:	e6d3      	b.n	1878 <qtm_key_sensors_process+0x14>
    1ad0:	6823      	ldr	r3, [r4, #0]
    1ad2:	781b      	ldrb	r3, [r3, #0]
    1ad4:	2b7f      	cmp	r3, #127	; 0x7f
    1ad6:	d91d      	bls.n	1b14 <qtm_key_sensors_process+0x2b0>
    1ad8:	2300      	movs	r3, #0
    1ada:	260c      	movs	r6, #12
    1adc:	2001      	movs	r0, #1
    1ade:	2708      	movs	r7, #8
    1ae0:	6862      	ldr	r2, [r4, #4]
    1ae2:	8812      	ldrh	r2, [r2, #0]
    1ae4:	429a      	cmp	r2, r3
    1ae6:	d910      	bls.n	1b0a <qtm_key_sensors_process+0x2a6>
    1ae8:	0032      	movs	r2, r6
    1aea:	435a      	muls	r2, r3
    1aec:	68a1      	ldr	r1, [r4, #8]
    1aee:	188a      	adds	r2, r1, r2
    1af0:	6855      	ldr	r5, [r2, #4]
    1af2:	7829      	ldrb	r1, [r5, #0]
    1af4:	4201      	tst	r1, r0
    1af6:	d104      	bne.n	1b02 <qtm_key_sensors_process+0x29e>
    1af8:	7812      	ldrb	r2, [r2, #0]
    1afa:	43ba      	bics	r2, r7
    1afc:	d001      	beq.n	1b02 <qtm_key_sensors_process+0x29e>
    1afe:	4301      	orrs	r1, r0
    1b00:	7029      	strb	r1, [r5, #0]
    1b02:	3301      	adds	r3, #1
    1b04:	041b      	lsls	r3, r3, #16
    1b06:	0c1b      	lsrs	r3, r3, #16
    1b08:	e7ea      	b.n	1ae0 <qtm_key_sensors_process+0x27c>
    1b0a:	237f      	movs	r3, #127	; 0x7f
    1b0c:	6822      	ldr	r2, [r4, #0]
    1b0e:	7811      	ldrb	r1, [r2, #0]
    1b10:	400b      	ands	r3, r1
    1b12:	7013      	strb	r3, [r2, #0]
    1b14:	9b01      	ldr	r3, [sp, #4]
    1b16:	2b00      	cmp	r3, #0
    1b18:	d107      	bne.n	1b2a <qtm_key_sensors_process+0x2c6>
    1b1a:	9a00      	ldr	r2, [sp, #0]
    1b1c:	2101      	movs	r1, #1
    1b1e:	6823      	ldr	r3, [r4, #0]
    1b20:	2a00      	cmp	r2, #0
    1b22:	d158      	bne.n	1bd6 <qtm_key_sensors_process+0x372>
    1b24:	781a      	ldrb	r2, [r3, #0]
    1b26:	438a      	bics	r2, r1
    1b28:	e057      	b.n	1bda <qtm_key_sensors_process+0x376>
    1b2a:	6863      	ldr	r3, [r4, #4]
    1b2c:	7a5b      	ldrb	r3, [r3, #9]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d0f3      	beq.n	1b1a <qtm_key_sensors_process+0x2b6>
    1b32:	2180      	movs	r1, #128	; 0x80
    1b34:	6822      	ldr	r2, [r4, #0]
    1b36:	7813      	ldrb	r3, [r2, #0]
    1b38:	4249      	negs	r1, r1
    1b3a:	430b      	orrs	r3, r1
    1b3c:	7013      	strb	r3, [r2, #0]
    1b3e:	6863      	ldr	r3, [r4, #4]
    1b40:	7a5b      	ldrb	r3, [r3, #9]
    1b42:	2b01      	cmp	r3, #1
    1b44:	d1e9      	bne.n	1b1a <qtm_key_sensors_process+0x2b6>
    1b46:	2200      	movs	r2, #0
    1b48:	9303      	str	r3, [sp, #12]
    1b4a:	6863      	ldr	r3, [r4, #4]
    1b4c:	8818      	ldrh	r0, [r3, #0]
    1b4e:	4282      	cmp	r2, r0
    1b50:	d2e3      	bcs.n	1b1a <qtm_key_sensors_process+0x2b6>
    1b52:	210c      	movs	r1, #12
    1b54:	4351      	muls	r1, r2
    1b56:	68a3      	ldr	r3, [r4, #8]
    1b58:	1859      	adds	r1, r3, r1
    1b5a:	9301      	str	r3, [sp, #4]
    1b5c:	780b      	ldrb	r3, [r1, #0]
    1b5e:	2608      	movs	r6, #8
    1b60:	001d      	movs	r5, r3
    1b62:	43b5      	bics	r5, r6
    1b64:	d029      	beq.n	1bba <qtm_key_sensors_process+0x356>
    1b66:	2b85      	cmp	r3, #133	; 0x85
    1b68:	d001      	beq.n	1b6e <qtm_key_sensors_process+0x30a>
    1b6a:	2b03      	cmp	r3, #3
    1b6c:	d12a      	bne.n	1bc4 <qtm_key_sensors_process+0x360>
    1b6e:	2303      	movs	r3, #3
    1b70:	4353      	muls	r3, r2
    1b72:	68e7      	ldr	r7, [r4, #12]
    1b74:	18fb      	adds	r3, r7, r3
    1b76:	789b      	ldrb	r3, [r3, #2]
    1b78:	469c      	mov	ip, r3
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d01d      	beq.n	1bba <qtm_key_sensors_process+0x356>
    1b7e:	2300      	movs	r3, #0
    1b80:	9302      	str	r3, [sp, #8]
    1b82:	4283      	cmp	r3, r0
    1b84:	d216      	bcs.n	1bb4 <qtm_key_sensors_process+0x350>
    1b86:	429a      	cmp	r2, r3
    1b88:	d010      	beq.n	1bac <qtm_key_sensors_process+0x348>
    1b8a:	250c      	movs	r5, #12
    1b8c:	435d      	muls	r5, r3
    1b8e:	9e01      	ldr	r6, [sp, #4]
    1b90:	5dad      	ldrb	r5, [r5, r6]
    1b92:	2d04      	cmp	r5, #4
    1b94:	d001      	beq.n	1b9a <qtm_key_sensors_process+0x336>
    1b96:	2d86      	cmp	r5, #134	; 0x86
    1b98:	d108      	bne.n	1bac <qtm_key_sensors_process+0x348>
    1b9a:	2503      	movs	r5, #3
    1b9c:	435d      	muls	r5, r3
    1b9e:	197d      	adds	r5, r7, r5
    1ba0:	78ad      	ldrb	r5, [r5, #2]
    1ba2:	4565      	cmp	r5, ip
    1ba4:	d102      	bne.n	1bac <qtm_key_sensors_process+0x348>
    1ba6:	2501      	movs	r5, #1
    1ba8:	0003      	movs	r3, r0
    1baa:	9502      	str	r5, [sp, #8]
    1bac:	3301      	adds	r3, #1
    1bae:	041b      	lsls	r3, r3, #16
    1bb0:	0c1b      	lsrs	r3, r3, #16
    1bb2:	e7e6      	b.n	1b82 <qtm_key_sensors_process+0x31e>
    1bb4:	9b02      	ldr	r3, [sp, #8]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d104      	bne.n	1bc4 <qtm_key_sensors_process+0x360>
    1bba:	6849      	ldr	r1, [r1, #4]
    1bbc:	9803      	ldr	r0, [sp, #12]
    1bbe:	780b      	ldrb	r3, [r1, #0]
    1bc0:	4383      	bics	r3, r0
    1bc2:	e003      	b.n	1bcc <qtm_key_sensors_process+0x368>
    1bc4:	6849      	ldr	r1, [r1, #4]
    1bc6:	9803      	ldr	r0, [sp, #12]
    1bc8:	780b      	ldrb	r3, [r1, #0]
    1bca:	4303      	orrs	r3, r0
    1bcc:	3201      	adds	r2, #1
    1bce:	0412      	lsls	r2, r2, #16
    1bd0:	700b      	strb	r3, [r1, #0]
    1bd2:	0c12      	lsrs	r2, r2, #16
    1bd4:	e7b9      	b.n	1b4a <qtm_key_sensors_process+0x2e6>
    1bd6:	781a      	ldrb	r2, [r3, #0]
    1bd8:	430a      	orrs	r2, r1
    1bda:	701a      	strb	r2, [r3, #0]
    1bdc:	6822      	ldr	r2, [r4, #0]
    1bde:	8852      	ldrh	r2, [r2, #2]
    1be0:	0011      	movs	r1, r2
    1be2:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <qtm_key_sensors_process+0x394>)
    1be4:	881b      	ldrh	r3, [r3, #0]
    1be6:	31c8      	adds	r1, #200	; 0xc8
    1be8:	428b      	cmp	r3, r1
    1bea:	d80d      	bhi.n	1c08 <qtm_key_sensors_process+0x3a4>
    1bec:	4293      	cmp	r3, r2
    1bee:	d305      	bcc.n	1bfc <qtm_key_sensors_process+0x398>
    1bf0:	2000      	movs	r0, #0
    1bf2:	e0b4      	b.n	1d5e <qtm_key_sensors_process+0x4fa>
    1bf4:	000017a5 	.word	0x000017a5
    1bf8:	20000764 	.word	0x20000764
    1bfc:	495a      	ldr	r1, [pc, #360]	; (1d68 <qtm_key_sensors_process+0x504>)
    1bfe:	1859      	adds	r1, r3, r1
    1c00:	1a89      	subs	r1, r1, r2
    1c02:	29c8      	cmp	r1, #200	; 0xc8
    1c04:	d9f4      	bls.n	1bf0 <qtm_key_sensors_process+0x38c>
    1c06:	3b01      	subs	r3, #1
    1c08:	1a9b      	subs	r3, r3, r2
    1c0a:	041b      	lsls	r3, r3, #16
    1c0c:	0c1b      	lsrs	r3, r3, #16
    1c0e:	2bc8      	cmp	r3, #200	; 0xc8
    1c10:	d9ee      	bls.n	1bf0 <qtm_key_sensors_process+0x38c>
    1c12:	6822      	ldr	r2, [r4, #0]
    1c14:	8851      	ldrh	r1, [r2, #2]
    1c16:	31c8      	adds	r1, #200	; 0xc8
    1c18:	3bc8      	subs	r3, #200	; 0xc8
    1c1a:	8051      	strh	r1, [r2, #2]
    1c1c:	7911      	ldrb	r1, [r2, #4]
    1c1e:	041b      	lsls	r3, r3, #16
    1c20:	0c1b      	lsrs	r3, r3, #16
    1c22:	2900      	cmp	r1, #0
    1c24:	d151      	bne.n	1cca <qtm_key_sensors_process+0x466>
    1c26:	7951      	ldrb	r1, [r2, #5]
    1c28:	2900      	cmp	r1, #0
    1c2a:	d001      	beq.n	1c30 <qtm_key_sensors_process+0x3cc>
    1c2c:	3901      	subs	r1, #1
    1c2e:	7151      	strb	r1, [r2, #5]
    1c30:	6821      	ldr	r1, [r4, #0]
    1c32:	798a      	ldrb	r2, [r1, #6]
    1c34:	2a00      	cmp	r2, #0
    1c36:	d001      	beq.n	1c3c <qtm_key_sensors_process+0x3d8>
    1c38:	3a01      	subs	r2, #1
    1c3a:	718a      	strb	r2, [r1, #6]
    1c3c:	6866      	ldr	r6, [r4, #4]
    1c3e:	79b2      	ldrb	r2, [r6, #6]
    1c40:	2a00      	cmp	r2, #0
    1c42:	d01e      	beq.n	1c82 <qtm_key_sensors_process+0x41e>
    1c44:	6827      	ldr	r7, [r4, #0]
    1c46:	7979      	ldrb	r1, [r7, #5]
    1c48:	2900      	cmp	r1, #0
    1c4a:	d11a      	bne.n	1c82 <qtm_key_sensors_process+0x41e>
    1c4c:	8832      	ldrh	r2, [r6, #0]
    1c4e:	9200      	str	r2, [sp, #0]
    1c50:	9800      	ldr	r0, [sp, #0]
    1c52:	040a      	lsls	r2, r1, #16
    1c54:	0c12      	lsrs	r2, r2, #16
    1c56:	4290      	cmp	r0, r2
    1c58:	d911      	bls.n	1c7e <qtm_key_sensors_process+0x41a>
    1c5a:	220c      	movs	r2, #12
    1c5c:	434a      	muls	r2, r1
    1c5e:	68a5      	ldr	r5, [r4, #8]
    1c60:	18aa      	adds	r2, r5, r2
    1c62:	7815      	ldrb	r5, [r2, #0]
    1c64:	2d03      	cmp	r5, #3
    1c66:	d001      	beq.n	1c6c <qtm_key_sensors_process+0x408>
    1c68:	2d08      	cmp	r5, #8
    1c6a:	d106      	bne.n	1c7a <qtm_key_sensors_process+0x416>
    1c6c:	6850      	ldr	r0, [r2, #4]
    1c6e:	8915      	ldrh	r5, [r2, #8]
    1c70:	8840      	ldrh	r0, [r0, #2]
    1c72:	42a8      	cmp	r0, r5
    1c74:	d901      	bls.n	1c7a <qtm_key_sensors_process+0x416>
    1c76:	3501      	adds	r5, #1
    1c78:	8115      	strh	r5, [r2, #8]
    1c7a:	3101      	adds	r1, #1
    1c7c:	e7e8      	b.n	1c50 <qtm_key_sensors_process+0x3ec>
    1c7e:	79b2      	ldrb	r2, [r6, #6]
    1c80:	717a      	strb	r2, [r7, #5]
    1c82:	6866      	ldr	r6, [r4, #4]
    1c84:	79f2      	ldrb	r2, [r6, #7]
    1c86:	2a00      	cmp	r2, #0
    1c88:	d021      	beq.n	1cce <qtm_key_sensors_process+0x46a>
    1c8a:	6827      	ldr	r7, [r4, #0]
    1c8c:	79b9      	ldrb	r1, [r7, #6]
    1c8e:	2900      	cmp	r1, #0
    1c90:	d11d      	bne.n	1cce <qtm_key_sensors_process+0x46a>
    1c92:	8832      	ldrh	r2, [r6, #0]
    1c94:	9200      	str	r2, [sp, #0]
    1c96:	9800      	ldr	r0, [sp, #0]
    1c98:	040a      	lsls	r2, r1, #16
    1c9a:	0c12      	lsrs	r2, r2, #16
    1c9c:	4290      	cmp	r0, r2
    1c9e:	d911      	bls.n	1cc4 <qtm_key_sensors_process+0x460>
    1ca0:	220c      	movs	r2, #12
    1ca2:	434a      	muls	r2, r1
    1ca4:	68a0      	ldr	r0, [r4, #8]
    1ca6:	1882      	adds	r2, r0, r2
    1ca8:	7815      	ldrb	r5, [r2, #0]
    1caa:	2d03      	cmp	r5, #3
    1cac:	d001      	beq.n	1cb2 <qtm_key_sensors_process+0x44e>
    1cae:	2d08      	cmp	r5, #8
    1cb0:	d106      	bne.n	1cc0 <qtm_key_sensors_process+0x45c>
    1cb2:	6850      	ldr	r0, [r2, #4]
    1cb4:	8915      	ldrh	r5, [r2, #8]
    1cb6:	8840      	ldrh	r0, [r0, #2]
    1cb8:	42a8      	cmp	r0, r5
    1cba:	d201      	bcs.n	1cc0 <qtm_key_sensors_process+0x45c>
    1cbc:	3d01      	subs	r5, #1
    1cbe:	8115      	strh	r5, [r2, #8]
    1cc0:	3101      	adds	r1, #1
    1cc2:	e7e8      	b.n	1c96 <qtm_key_sensors_process+0x432>
    1cc4:	79f2      	ldrb	r2, [r6, #7]
    1cc6:	71ba      	strb	r2, [r7, #6]
    1cc8:	e001      	b.n	1cce <qtm_key_sensors_process+0x46a>
    1cca:	3901      	subs	r1, #1
    1ccc:	7111      	strb	r1, [r2, #4]
    1cce:	6862      	ldr	r2, [r4, #4]
    1cd0:	78d2      	ldrb	r2, [r2, #3]
    1cd2:	2100      	movs	r1, #0
    1cd4:	2a00      	cmp	r2, #0
    1cd6:	d09a      	beq.n	1c0e <qtm_key_sensors_process+0x3aa>
    1cd8:	6862      	ldr	r2, [r4, #4]
    1cda:	8812      	ldrh	r2, [r2, #0]
    1cdc:	428a      	cmp	r2, r1
    1cde:	d996      	bls.n	1c0e <qtm_key_sensors_process+0x3aa>
    1ce0:	250c      	movs	r5, #12
    1ce2:	434d      	muls	r5, r1
    1ce4:	68a2      	ldr	r2, [r4, #8]
    1ce6:	1956      	adds	r6, r2, r5
    1ce8:	7832      	ldrb	r2, [r6, #0]
    1cea:	2a85      	cmp	r2, #133	; 0x85
    1cec:	d133      	bne.n	1d56 <qtm_key_sensors_process+0x4f2>
    1cee:	7872      	ldrb	r2, [r6, #1]
    1cf0:	2a00      	cmp	r2, #0
    1cf2:	d002      	beq.n	1cfa <qtm_key_sensors_process+0x496>
    1cf4:	3a01      	subs	r2, #1
    1cf6:	7072      	strb	r2, [r6, #1]
    1cf8:	e02d      	b.n	1d56 <qtm_key_sensors_process+0x4f2>
    1cfa:	2001      	movs	r0, #1
    1cfc:	7030      	strb	r0, [r6, #0]
    1cfe:	68a0      	ldr	r0, [r4, #8]
    1d00:	1945      	adds	r5, r0, r5
    1d02:	2003      	movs	r0, #3
    1d04:	686d      	ldr	r5, [r5, #4]
    1d06:	7028      	strb	r0, [r5, #0]
    1d08:	2503      	movs	r5, #3
    1d0a:	434d      	muls	r5, r1
    1d0c:	68e0      	ldr	r0, [r4, #12]
    1d0e:	1945      	adds	r5, r0, r5
    1d10:	78af      	ldrb	r7, [r5, #2]
    1d12:	2f00      	cmp	r7, #0
    1d14:	d01f      	beq.n	1d56 <qtm_key_sensors_process+0x4f2>
    1d16:	6860      	ldr	r0, [r4, #4]
    1d18:	8805      	ldrh	r5, [r0, #0]
    1d1a:	4295      	cmp	r5, r2
    1d1c:	d91b      	bls.n	1d56 <qtm_key_sensors_process+0x4f2>
    1d1e:	2503      	movs	r5, #3
    1d20:	4355      	muls	r5, r2
    1d22:	68e0      	ldr	r0, [r4, #12]
    1d24:	1945      	adds	r5, r0, r5
    1d26:	78ad      	ldrb	r5, [r5, #2]
    1d28:	42bd      	cmp	r5, r7
    1d2a:	d110      	bne.n	1d4e <qtm_key_sensors_process+0x4ea>
    1d2c:	250c      	movs	r5, #12
    1d2e:	4355      	muls	r5, r2
    1d30:	68a0      	ldr	r0, [r4, #8]
    1d32:	9500      	str	r5, [sp, #0]
    1d34:	1946      	adds	r6, r0, r5
    1d36:	2501      	movs	r5, #1
    1d38:	6870      	ldr	r0, [r6, #4]
    1d3a:	7800      	ldrb	r0, [r0, #0]
    1d3c:	4228      	tst	r0, r5
    1d3e:	d006      	beq.n	1d4e <qtm_key_sensors_process+0x4ea>
    1d40:	7035      	strb	r5, [r6, #0]
    1d42:	9d00      	ldr	r5, [sp, #0]
    1d44:	68a0      	ldr	r0, [r4, #8]
    1d46:	1945      	adds	r5, r0, r5
    1d48:	2003      	movs	r0, #3
    1d4a:	686d      	ldr	r5, [r5, #4]
    1d4c:	7028      	strb	r0, [r5, #0]
    1d4e:	3201      	adds	r2, #1
    1d50:	0412      	lsls	r2, r2, #16
    1d52:	0c12      	lsrs	r2, r2, #16
    1d54:	e7df      	b.n	1d16 <qtm_key_sensors_process+0x4b2>
    1d56:	3101      	adds	r1, #1
    1d58:	0409      	lsls	r1, r1, #16
    1d5a:	0c09      	lsrs	r1, r1, #16
    1d5c:	e7bc      	b.n	1cd8 <qtm_key_sensors_process+0x474>
    1d5e:	b005      	add	sp, #20
    1d60:	bcf0      	pop	{r4, r5, r6, r7}
    1d62:	bc02      	pop	{r1}
    1d64:	4708      	bx	r1
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	0000ffff 	.word	0x0000ffff
    1d6c:	4718      	bx	r3
    1d6e:	46c0      	nop			; (mov r8, r8)

00001d70 <sync_config>:
    1d70:	217f      	movs	r1, #127	; 0x7f
    1d72:	4a04      	ldr	r2, [pc, #16]	; (1d84 <sync_config+0x14>)
    1d74:	7853      	ldrb	r3, [r2, #1]
    1d76:	438b      	bics	r3, r1
    1d78:	b2db      	uxtb	r3, r3
    1d7a:	2b00      	cmp	r3, #0
    1d7c:	d001      	beq.n	1d82 <sync_config+0x12>
    1d7e:	7853      	ldrb	r3, [r2, #1]
    1d80:	e7f9      	b.n	1d76 <sync_config+0x6>
    1d82:	4770      	bx	lr
    1d84:	42004c00 	.word	0x42004c00

00001d88 <charge_share_test>:
    1d88:	4b20      	ldr	r3, [pc, #128]	; (1e0c <charge_share_test+0x84>)
    1d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d8c:	681c      	ldr	r4, [r3, #0]
    1d8e:	2306      	movs	r3, #6
    1d90:	4343      	muls	r3, r0
    1d92:	001a      	movs	r2, r3
    1d94:	68a3      	ldr	r3, [r4, #8]
    1d96:	2000      	movs	r0, #0
    1d98:	189a      	adds	r2, r3, r2
    1d9a:	8853      	ldrh	r3, [r2, #2]
    1d9c:	428b      	cmp	r3, r1
    1d9e:	d033      	beq.n	1e08 <charge_share_test+0x80>
    1da0:	d201      	bcs.n	1da6 <charge_share_test+0x1e>
    1da2:	1ac9      	subs	r1, r1, r3
    1da4:	e000      	b.n	1da8 <charge_share_test+0x20>
    1da6:	1a59      	subs	r1, r3, r1
    1da8:	6824      	ldr	r4, [r4, #0]
    1daa:	b289      	uxth	r1, r1
    1dac:	78a3      	ldrb	r3, [r4, #2]
    1dae:	2b40      	cmp	r3, #64	; 0x40
    1db0:	d100      	bne.n	1db4 <charge_share_test+0x2c>
    1db2:	0849      	lsrs	r1, r1, #1
    1db4:	2001      	movs	r0, #1
    1db6:	2984      	cmp	r1, #132	; 0x84
    1db8:	d826      	bhi.n	1e08 <charge_share_test+0x80>
    1dba:	2000      	movs	r0, #0
    1dbc:	2905      	cmp	r1, #5
    1dbe:	d923      	bls.n	1e08 <charge_share_test+0x80>
    1dc0:	8897      	ldrh	r7, [r2, #4]
    1dc2:	220f      	movs	r2, #15
    1dc4:	003d      	movs	r5, r7
    1dc6:	04bb      	lsls	r3, r7, #18
    1dc8:	30cf      	adds	r0, #207	; 0xcf
    1dca:	123e      	asrs	r6, r7, #8
    1dcc:	0f9b      	lsrs	r3, r3, #30
    1dce:	4343      	muls	r3, r0
    1dd0:	4016      	ands	r6, r2
    1dd2:	38ba      	subs	r0, #186	; 0xba
    1dd4:	4346      	muls	r6, r0
    1dd6:	113f      	asrs	r7, r7, #4
    1dd8:	4015      	ands	r5, r2
    1dda:	403a      	ands	r2, r7
    1ddc:	199b      	adds	r3, r3, r6
    1dde:	0052      	lsls	r2, r2, #1
    1de0:	189a      	adds	r2, r3, r2
    1de2:	b293      	uxth	r3, r2
    1de4:	2d05      	cmp	r5, #5
    1de6:	d904      	bls.n	1df2 <charge_share_test+0x6a>
    1de8:	3301      	adds	r3, #1
    1dea:	3d05      	subs	r5, #5
    1dec:	b29b      	uxth	r3, r3
    1dee:	b2ed      	uxtb	r5, r5
    1df0:	e7f8      	b.n	1de4 <charge_share_test+0x5c>
    1df2:	78e2      	ldrb	r2, [r4, #3]
    1df4:	4806      	ldr	r0, [pc, #24]	; (1e10 <charge_share_test+0x88>)
    1df6:	0692      	lsls	r2, r2, #26
    1df8:	0f92      	lsrs	r2, r2, #30
    1dfa:	0052      	lsls	r2, r2, #1
    1dfc:	5a10      	ldrh	r0, [r2, r0]
    1dfe:	4341      	muls	r1, r0
    1e00:	b288      	uxth	r0, r1
    1e02:	4283      	cmp	r3, r0
    1e04:	4180      	sbcs	r0, r0
    1e06:	4240      	negs	r0, r0
    1e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	20001474 	.word	0x20001474
    1e10:	00002a5a 	.word	0x00002a5a

00001e14 <select_next_channel_to_measure>:
    1e14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e16:	2406      	movs	r4, #6
    1e18:	2501      	movs	r5, #1
    1e1a:	490c      	ldr	r1, [pc, #48]	; (1e4c <select_next_channel_to_measure+0x38>)
    1e1c:	4a0c      	ldr	r2, [pc, #48]	; (1e50 <select_next_channel_to_measure+0x3c>)
    1e1e:	6809      	ldr	r1, [r1, #0]
    1e20:	8813      	ldrh	r3, [r2, #0]
    1e22:	6808      	ldr	r0, [r1, #0]
    1e24:	8800      	ldrh	r0, [r0, #0]
    1e26:	4283      	cmp	r3, r0
    1e28:	d20b      	bcs.n	1e42 <select_next_channel_to_measure+0x2e>
    1e2a:	0026      	movs	r6, r4
    1e2c:	435e      	muls	r6, r3
    1e2e:	688f      	ldr	r7, [r1, #8]
    1e30:	5df6      	ldrb	r6, [r6, r7]
    1e32:	422e      	tst	r6, r5
    1e34:	d102      	bne.n	1e3c <select_next_channel_to_measure+0x28>
    1e36:	3301      	adds	r3, #1
    1e38:	b29b      	uxth	r3, r3
    1e3a:	e7f4      	b.n	1e26 <select_next_channel_to_measure+0x12>
    1e3c:	8013      	strh	r3, [r2, #0]
    1e3e:	2000      	movs	r0, #0
    1e40:	e002      	b.n	1e48 <select_next_channel_to_measure+0x34>
    1e42:	2300      	movs	r3, #0
    1e44:	2001      	movs	r0, #1
    1e46:	8013      	strh	r3, [r2, #0]
    1e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	20001474 	.word	0x20001474
    1e50:	20000768 	.word	0x20000768

00001e54 <qtm_measure_node>:
    1e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e56:	4c66      	ldr	r4, [pc, #408]	; (1ff0 <qtm_measure_node+0x19c>)
    1e58:	b087      	sub	sp, #28
    1e5a:	0007      	movs	r7, r0
    1e5c:	47a0      	blx	r4
    1e5e:	2102      	movs	r1, #2
    1e60:	4b64      	ldr	r3, [pc, #400]	; (1ff4 <qtm_measure_node+0x1a0>)
    1e62:	4d65      	ldr	r5, [pc, #404]	; (1ff8 <qtm_measure_node+0x1a4>)
    1e64:	781a      	ldrb	r2, [r3, #0]
    1e66:	0026      	movs	r6, r4
    1e68:	438a      	bics	r2, r1
    1e6a:	701a      	strb	r2, [r3, #0]
    1e6c:	00fa      	lsls	r2, r7, #3
    1e6e:	9203      	str	r2, [sp, #12]
    1e70:	682a      	ldr	r2, [r5, #0]
    1e72:	00f9      	lsls	r1, r7, #3
    1e74:	6852      	ldr	r2, [r2, #4]
    1e76:	001c      	movs	r4, r3
    1e78:	1852      	adds	r2, r2, r1
    1e7a:	7892      	ldrb	r2, [r2, #2]
    1e7c:	4b5f      	ldr	r3, [pc, #380]	; (1ffc <qtm_measure_node+0x1a8>)
    1e7e:	0751      	lsls	r1, r2, #29
    1e80:	d401      	bmi.n	1e86 <qtm_measure_node+0x32>
    1e82:	6919      	ldr	r1, [r3, #16]
    1e84:	e01d      	b.n	1ec2 <qtm_measure_node+0x6e>
    1e86:	0711      	lsls	r1, r2, #28
    1e88:	d405      	bmi.n	1e96 <qtm_measure_node+0x42>
    1e8a:	2080      	movs	r0, #128	; 0x80
    1e8c:	6919      	ldr	r1, [r3, #16]
    1e8e:	4a5c      	ldr	r2, [pc, #368]	; (2000 <STACK_SIZE>)
    1e90:	0140      	lsls	r0, r0, #5
    1e92:	4011      	ands	r1, r2
    1e94:	e006      	b.n	1ea4 <qtm_measure_node+0x50>
    1e96:	06d1      	lsls	r1, r2, #27
    1e98:	d409      	bmi.n	1eae <qtm_measure_node+0x5a>
    1e9a:	2080      	movs	r0, #128	; 0x80
    1e9c:	6919      	ldr	r1, [r3, #16]
    1e9e:	4a58      	ldr	r2, [pc, #352]	; (2000 <STACK_SIZE>)
    1ea0:	0180      	lsls	r0, r0, #6
    1ea2:	4011      	ands	r1, r2
    1ea4:	4301      	orrs	r1, r0
    1ea6:	6119      	str	r1, [r3, #16]
    1ea8:	6959      	ldr	r1, [r3, #20]
    1eaa:	400a      	ands	r2, r1
    1eac:	e007      	b.n	1ebe <qtm_measure_node+0x6a>
    1eae:	6919      	ldr	r1, [r3, #16]
    1eb0:	0692      	lsls	r2, r2, #26
    1eb2:	d406      	bmi.n	1ec2 <qtm_measure_node+0x6e>
    1eb4:	20c0      	movs	r0, #192	; 0xc0
    1eb6:	0180      	lsls	r0, r0, #6
    1eb8:	4301      	orrs	r1, r0
    1eba:	6119      	str	r1, [r3, #16]
    1ebc:	695a      	ldr	r2, [r3, #20]
    1ebe:	4302      	orrs	r2, r0
    1ec0:	e004      	b.n	1ecc <qtm_measure_node+0x78>
    1ec2:	4a4f      	ldr	r2, [pc, #316]	; (2000 <STACK_SIZE>)
    1ec4:	4011      	ands	r1, r2
    1ec6:	6119      	str	r1, [r3, #16]
    1ec8:	6959      	ldr	r1, [r3, #20]
    1eca:	400a      	ands	r2, r1
    1ecc:	615a      	str	r2, [r3, #20]
    1ece:	47b0      	blx	r6
    1ed0:	682b      	ldr	r3, [r5, #0]
    1ed2:	00fa      	lsls	r2, r7, #3
    1ed4:	685b      	ldr	r3, [r3, #4]
    1ed6:	189b      	adds	r3, r3, r2
    1ed8:	885b      	ldrh	r3, [r3, #2]
    1eda:	8223      	strh	r3, [r4, #16]
    1edc:	47b0      	blx	r6
    1ede:	682b      	ldr	r3, [r5, #0]
    1ee0:	00fa      	lsls	r2, r7, #3
    1ee2:	685b      	ldr	r3, [r3, #4]
    1ee4:	5a9b      	ldrh	r3, [r3, r2]
    1ee6:	8263      	strh	r3, [r4, #18]
    1ee8:	47b0      	blx	r6
    1eea:	2306      	movs	r3, #6
    1eec:	682a      	ldr	r2, [r5, #0]
    1eee:	435f      	muls	r7, r3
    1ef0:	6893      	ldr	r3, [r2, #8]
    1ef2:	19db      	adds	r3, r3, r7
    1ef4:	889b      	ldrh	r3, [r3, #4]
    1ef6:	8323      	strh	r3, [r4, #24]
    1ef8:	6893      	ldr	r3, [r2, #8]
    1efa:	19db      	adds	r3, r3, r7
    1efc:	7819      	ldrb	r1, [r3, #0]
    1efe:	0789      	lsls	r1, r1, #30
    1f00:	d501      	bpl.n	1f06 <qtm_measure_node+0xb2>
    1f02:	2105      	movs	r1, #5
    1f04:	7019      	strb	r1, [r3, #0]
    1f06:	6893      	ldr	r3, [r2, #8]
    1f08:	5ddf      	ldrb	r7, [r3, r7]
    1f0a:	47b0      	blx	r6
    1f0c:	06ff      	lsls	r7, r7, #27
    1f0e:	0f7f      	lsrs	r7, r7, #29
    1f10:	233f      	movs	r3, #63	; 0x3f
    1f12:	2f00      	cmp	r7, #0
    1f14:	d108      	bne.n	1f28 <qtm_measure_node+0xd4>
    1f16:	682b      	ldr	r3, [r5, #0]
    1f18:	9a03      	ldr	r2, [sp, #12]
    1f1a:	685b      	ldr	r3, [r3, #4]
    1f1c:	189b      	adds	r3, r3, r2
    1f1e:	795b      	ldrb	r3, [r3, #5]
    1f20:	4a38      	ldr	r2, [pc, #224]	; (2004 <STACK_SIZE+0x4>)
    1f22:	091b      	lsrs	r3, r3, #4
    1f24:	18d3      	adds	r3, r2, r3
    1f26:	7a1b      	ldrb	r3, [r3, #8]
    1f28:	76a3      	strb	r3, [r4, #26]
    1f2a:	47b0      	blx	r6
    1f2c:	682b      	ldr	r3, [r5, #0]
    1f2e:	9a03      	ldr	r2, [sp, #12]
    1f30:	685b      	ldr	r3, [r3, #4]
    1f32:	4f30      	ldr	r7, [pc, #192]	; (1ff4 <qtm_measure_node+0x1a0>)
    1f34:	189b      	adds	r3, r3, r2
    1f36:	791b      	ldrb	r3, [r3, #4]
    1f38:	091b      	lsrs	r3, r3, #4
    1f3a:	76e3      	strb	r3, [r4, #27]
    1f3c:	47b0      	blx	r6
    1f3e:	2103      	movs	r1, #3
    1f40:	682b      	ldr	r3, [r5, #0]
    1f42:	9a03      	ldr	r2, [sp, #12]
    1f44:	685b      	ldr	r3, [r3, #4]
    1f46:	189b      	adds	r3, r3, r2
    1f48:	791a      	ldrb	r2, [r3, #4]
    1f4a:	7923      	ldrb	r3, [r4, #4]
    1f4c:	400a      	ands	r2, r1
    1f4e:	438b      	bics	r3, r1
    1f50:	4313      	orrs	r3, r2
    1f52:	7123      	strb	r3, [r4, #4]
    1f54:	47b0      	blx	r6
    1f56:	2107      	movs	r1, #7
    1f58:	682b      	ldr	r3, [r5, #0]
    1f5a:	2502      	movs	r5, #2
    1f5c:	9a03      	ldr	r2, [sp, #12]
    1f5e:	685b      	ldr	r3, [r3, #4]
    1f60:	189b      	adds	r3, r3, r2
    1f62:	799a      	ldrb	r2, [r3, #6]
    1f64:	7b63      	ldrb	r3, [r4, #13]
    1f66:	400a      	ands	r2, r1
    1f68:	438b      	bics	r3, r1
    1f6a:	4313      	orrs	r3, r2
    1f6c:	7363      	strb	r3, [r4, #13]
    1f6e:	47b0      	blx	r6
    1f70:	7823      	ldrb	r3, [r4, #0]
    1f72:	432b      	orrs	r3, r5
    1f74:	7023      	strb	r3, [r4, #0]
    1f76:	4b24      	ldr	r3, [pc, #144]	; (2008 <STACK_SIZE+0x8>)
    1f78:	685b      	ldr	r3, [r3, #4]
    1f7a:	9303      	str	r3, [sp, #12]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d02e      	beq.n	1fde <qtm_measure_node+0x18a>
    1f80:	2401      	movs	r4, #1
    1f82:	47b0      	blx	r6
    1f84:	7b3b      	ldrb	r3, [r7, #12]
    1f86:	071b      	lsls	r3, r3, #28
    1f88:	0f1b      	lsrs	r3, r3, #28
    1f8a:	9304      	str	r3, [sp, #16]
    1f8c:	47b0      	blx	r6
    1f8e:	793b      	ldrb	r3, [r7, #4]
    1f90:	079b      	lsls	r3, r3, #30
    1f92:	0f9b      	lsrs	r3, r3, #30
    1f94:	9305      	str	r3, [sp, #20]
    1f96:	47b0      	blx	r6
    1f98:	783b      	ldrb	r3, [r7, #0]
    1f9a:	43ab      	bics	r3, r5
    1f9c:	703b      	strb	r3, [r7, #0]
    1f9e:	47b0      	blx	r6
    1fa0:	797b      	ldrb	r3, [r7, #5]
    1fa2:	431c      	orrs	r4, r3
    1fa4:	47b0      	blx	r6
    1fa6:	2108      	movs	r1, #8
    1fa8:	432c      	orrs	r4, r5
    1faa:	4b18      	ldr	r3, [pc, #96]	; (200c <STACK_SIZE+0xc>)
    1fac:	b2e4      	uxtb	r4, r4
    1fae:	717c      	strb	r4, [r7, #5]
    1fb0:	681a      	ldr	r2, [r3, #0]
    1fb2:	7813      	ldrb	r3, [r2, #0]
    1fb4:	430b      	orrs	r3, r1
    1fb6:	7013      	strb	r3, [r2, #0]
    1fb8:	47b0      	blx	r6
    1fba:	7b7c      	ldrb	r4, [r7, #13]
    1fbc:	47b0      	blx	r6
    1fbe:	2207      	movs	r2, #7
    1fc0:	7b7b      	ldrb	r3, [r7, #13]
    1fc2:	b2e4      	uxtb	r4, r4
    1fc4:	4393      	bics	r3, r2
    1fc6:	737b      	strb	r3, [r7, #13]
    1fc8:	9a05      	ldr	r2, [sp, #20]
    1fca:	4b11      	ldr	r3, [pc, #68]	; (2010 <STACK_SIZE+0x10>)
    1fcc:	9400      	str	r4, [sp, #0]
    1fce:	9904      	ldr	r1, [sp, #16]
    1fd0:	2000      	movs	r0, #0
    1fd2:	9c03      	ldr	r4, [sp, #12]
    1fd4:	47a0      	blx	r4
    1fd6:	47b0      	blx	r6
    1fd8:	783b      	ldrb	r3, [r7, #0]
    1fda:	431d      	orrs	r5, r3
    1fdc:	703d      	strb	r5, [r7, #0]
    1fde:	47b0      	blx	r6
    1fe0:	2280      	movs	r2, #128	; 0x80
    1fe2:	7b7b      	ldrb	r3, [r7, #13]
    1fe4:	4252      	negs	r2, r2
    1fe6:	4313      	orrs	r3, r2
    1fe8:	737b      	strb	r3, [r7, #13]
    1fea:	b007      	add	sp, #28
    1fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	00001d71 	.word	0x00001d71
    1ff4:	42004c00 	.word	0x42004c00
    1ff8:	20001474 	.word	0x20001474
    1ffc:	42004400 	.word	0x42004400
    2000:	ffffcfff 	.word	0xffffcfff
    2004:	00002a5a 	.word	0x00002a5a
    2008:	20000768 	.word	0x20000768
    200c:	20001470 	.word	0x20001470
    2010:	42004c0d 	.word	0x42004c0d

00002014 <qtm_load_group_config.isra.1>:
    2014:	4b15      	ldr	r3, [pc, #84]	; (206c <qtm_load_group_config.isra.1+0x58>)
    2016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2018:	681b      	ldr	r3, [r3, #0]
    201a:	681b      	ldr	r3, [r3, #0]
    201c:	789a      	ldrb	r2, [r3, #2]
    201e:	2a40      	cmp	r2, #64	; 0x40
    2020:	d101      	bne.n	2026 <qtm_load_group_config.isra.1+0x12>
    2022:	4a13      	ldr	r2, [pc, #76]	; (2070 <qtm_load_group_config.isra.1+0x5c>)
    2024:	e003      	b.n	202e <qtm_load_group_config.isra.1+0x1a>
    2026:	2002      	movs	r0, #2
    2028:	2a80      	cmp	r2, #128	; 0x80
    202a:	d11d      	bne.n	2068 <qtm_load_group_config.isra.1+0x54>
    202c:	4a11      	ldr	r2, [pc, #68]	; (2074 <qtm_load_group_config.isra.1+0x60>)
    202e:	2104      	movs	r1, #4
    2030:	240f      	movs	r4, #15
    2032:	7812      	ldrb	r2, [r2, #0]
    2034:	4311      	orrs	r1, r2
    2036:	9101      	str	r1, [sp, #4]
    2038:	791b      	ldrb	r3, [r3, #4]
    203a:	401c      	ands	r4, r3
    203c:	2b0f      	cmp	r3, #15
    203e:	d900      	bls.n	2042 <qtm_load_group_config.isra.1+0x2e>
    2040:	2410      	movs	r4, #16
    2042:	2360      	movs	r3, #96	; 0x60
    2044:	4e0c      	ldr	r6, [pc, #48]	; (2078 <qtm_load_group_config.isra.1+0x64>)
    2046:	431c      	orrs	r4, r3
    2048:	47b0      	blx	r6
    204a:	2304      	movs	r3, #4
    204c:	2500      	movs	r5, #0
    204e:	4f0b      	ldr	r7, [pc, #44]	; (207c <qtm_load_group_config.isra.1+0x68>)
    2050:	b2e4      	uxtb	r4, r4
    2052:	703b      	strb	r3, [r7, #0]
    2054:	47b0      	blx	r6
    2056:	713d      	strb	r5, [r7, #4]
    2058:	47b0      	blx	r6
    205a:	733c      	strb	r4, [r7, #12]
    205c:	47b0      	blx	r6
    205e:	466b      	mov	r3, sp
    2060:	0028      	movs	r0, r5
    2062:	791a      	ldrb	r2, [r3, #4]
    2064:	4b06      	ldr	r3, [pc, #24]	; (2080 <qtm_load_group_config.isra.1+0x6c>)
    2066:	77da      	strb	r2, [r3, #31]
    2068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	20001474 	.word	0x20001474
    2070:	00002a58 	.word	0x00002a58
    2074:	00002a59 	.word	0x00002a59
    2078:	00001d71 	.word	0x00001d71
    207c:	42004c00 	.word	0x42004c00
    2080:	42004c01 	.word	0x42004c01

00002084 <qtm_acquisition_process>:
    2084:	2203      	movs	r2, #3
    2086:	b5f0      	push	{r4, r5, r6, r7, lr}
    2088:	4bbd      	ldr	r3, [pc, #756]	; (2380 <qtm_acquisition_process+0x2fc>)
    208a:	b087      	sub	sp, #28
    208c:	7a1b      	ldrb	r3, [r3, #8]
    208e:	9204      	str	r2, [sp, #16]
    2090:	2b00      	cmp	r3, #0
    2092:	d100      	bne.n	2096 <qtm_acquisition_process+0x12>
    2094:	e191      	b.n	23ba <qtm_acquisition_process+0x336>
    2096:	4bbb      	ldr	r3, [pc, #748]	; (2384 <qtm_acquisition_process+0x300>)
    2098:	681d      	ldr	r5, [r3, #0]
    209a:	4bbb      	ldr	r3, [pc, #748]	; (2388 <qtm_acquisition_process+0x304>)
    209c:	681b      	ldr	r3, [r3, #0]
    209e:	9305      	str	r3, [sp, #20]
    20a0:	2300      	movs	r3, #0
    20a2:	9302      	str	r3, [sp, #8]
    20a4:	9304      	str	r3, [sp, #16]
    20a6:	6829      	ldr	r1, [r5, #0]
    20a8:	9a02      	ldr	r2, [sp, #8]
    20aa:	880b      	ldrh	r3, [r1, #0]
    20ac:	4293      	cmp	r3, r2
    20ae:	d800      	bhi.n	20b2 <qtm_acquisition_process+0x2e>
    20b0:	e174      	b.n	239c <qtm_acquisition_process+0x318>
    20b2:	9b02      	ldr	r3, [sp, #8]
    20b4:	9a05      	ldr	r2, [sp, #20]
    20b6:	005b      	lsls	r3, r3, #1
    20b8:	5a9c      	ldrh	r4, [r3, r2]
    20ba:	2306      	movs	r3, #6
    20bc:	9a02      	ldr	r2, [sp, #8]
    20be:	2707      	movs	r7, #7
    20c0:	4353      	muls	r3, r2
    20c2:	9303      	str	r3, [sp, #12]
    20c4:	9a03      	ldr	r2, [sp, #12]
    20c6:	68ab      	ldr	r3, [r5, #8]
    20c8:	4694      	mov	ip, r2
    20ca:	4463      	add	r3, ip
    20cc:	9301      	str	r3, [sp, #4]
    20ce:	9801      	ldr	r0, [sp, #4]
    20d0:	9b02      	ldr	r3, [sp, #8]
    20d2:	7800      	ldrb	r0, [r0, #0]
    20d4:	00de      	lsls	r6, r3, #3
    20d6:	686b      	ldr	r3, [r5, #4]
    20d8:	0880      	lsrs	r0, r0, #2
    20da:	199b      	adds	r3, r3, r6
    20dc:	799a      	ldrb	r2, [r3, #6]
    20de:	4038      	ands	r0, r7
    20e0:	2804      	cmp	r0, #4
    20e2:	d900      	bls.n	20e6 <qtm_acquisition_process+0x62>
    20e4:	e145      	b.n	2372 <qtm_acquisition_process+0x2ee>
    20e6:	f000 fb23 	bl	2730 <__gnu_thumb1_case_uhi>
    20ea:	0005      	.short	0x0005
    20ec:	010a0011 	.word	0x010a0011
    20f0:	014500e8 	.word	0x014500e8
    20f4:	7959      	ldrb	r1, [r3, #5]
    20f6:	230f      	movs	r3, #15
    20f8:	400b      	ands	r3, r1
    20fa:	2100      	movs	r1, #0
    20fc:	429a      	cmp	r2, r3
    20fe:	d901      	bls.n	2104 <qtm_acquisition_process+0x80>
    2100:	1ad2      	subs	r2, r2, r3
    2102:	b2d1      	uxtb	r1, r2
    2104:	410c      	asrs	r4, r1
    2106:	9b01      	ldr	r3, [sp, #4]
    2108:	805c      	strh	r4, [r3, #2]
    210a:	e133      	b.n	2374 <qtm_acquisition_process+0x2f0>
    210c:	4114      	asrs	r4, r2
    210e:	9b01      	ldr	r3, [sp, #4]
    2110:	b2a4      	uxth	r4, r4
    2112:	805c      	strh	r4, [r3, #2]
    2114:	8898      	ldrh	r0, [r3, #4]
    2116:	4b9d      	ldr	r3, [pc, #628]	; (238c <qtm_acquisition_process+0x308>)
    2118:	429c      	cmp	r4, r3
    211a:	d904      	bls.n	2126 <qtm_acquisition_process+0xa2>
    211c:	4b9c      	ldr	r3, [pc, #624]	; (2390 <qtm_acquisition_process+0x30c>)
    211e:	18e4      	adds	r4, r4, r3
    2120:	b2a4      	uxth	r4, r4
    2122:	2301      	movs	r3, #1
    2124:	e002      	b.n	212c <qtm_acquisition_process+0xa8>
    2126:	1b1c      	subs	r4, r3, r4
    2128:	2300      	movs	r3, #0
    212a:	b2a4      	uxth	r4, r4
    212c:	788a      	ldrb	r2, [r1, #2]
    212e:	2a40      	cmp	r2, #64	; 0x40
    2130:	d103      	bne.n	213a <qtm_acquisition_process+0xb6>
    2132:	0864      	lsrs	r4, r4, #1
    2134:	2b00      	cmp	r3, #0
    2136:	d002      	beq.n	213e <qtm_acquisition_process+0xba>
    2138:	e00b      	b.n	2152 <qtm_acquisition_process+0xce>
    213a:	2b00      	cmp	r3, #0
    213c:	d009      	beq.n	2152 <qtm_acquisition_process+0xce>
    213e:	4b95      	ldr	r3, [pc, #596]	; (2394 <qtm_acquisition_process+0x310>)
    2140:	2100      	movs	r1, #0
    2142:	4298      	cmp	r0, r3
    2144:	d106      	bne.n	2154 <qtm_acquisition_process+0xd0>
    2146:	2381      	movs	r3, #129	; 0x81
    2148:	9a01      	ldr	r2, [sp, #4]
    214a:	7013      	strb	r3, [r2, #0]
    214c:	3b73      	subs	r3, #115	; 0x73
    214e:	9304      	str	r3, [sp, #16]
    2150:	e002      	b.n	2158 <qtm_acquisition_process+0xd4>
    2152:	2101      	movs	r1, #1
    2154:	2c04      	cmp	r4, #4
    2156:	d833      	bhi.n	21c0 <qtm_acquisition_process+0x13c>
    2158:	9a03      	ldr	r2, [sp, #12]
    215a:	68ab      	ldr	r3, [r5, #8]
    215c:	189b      	adds	r3, r3, r2
    215e:	781a      	ldrb	r2, [r3, #0]
    2160:	0651      	lsls	r1, r2, #25
    2162:	d423      	bmi.n	21ac <qtm_acquisition_process+0x128>
    2164:	b252      	sxtb	r2, r2
    2166:	2a00      	cmp	r2, #0
    2168:	db22      	blt.n	21b0 <qtm_acquisition_process+0x12c>
    216a:	682a      	ldr	r2, [r5, #0]
    216c:	78d1      	ldrb	r1, [r2, #3]
    216e:	2203      	movs	r2, #3
    2170:	400a      	ands	r2, r1
    2172:	2a02      	cmp	r2, #2
    2174:	d107      	bne.n	2186 <qtm_acquisition_process+0x102>
    2176:	686b      	ldr	r3, [r5, #4]
    2178:	320d      	adds	r2, #13
    217a:	199e      	adds	r6, r3, r6
    217c:	7933      	ldrb	r3, [r6, #4]
    217e:	4393      	bics	r3, r2
    2180:	7133      	strb	r3, [r6, #4]
    2182:	2309      	movs	r3, #9
    2184:	e00e      	b.n	21a4 <qtm_acquisition_process+0x120>
    2186:	2a01      	cmp	r2, #1
    2188:	d110      	bne.n	21ac <qtm_acquisition_process+0x128>
    218a:	686b      	ldr	r3, [r5, #4]
    218c:	320e      	adds	r2, #14
    218e:	199b      	adds	r3, r3, r6
    2190:	7919      	ldrb	r1, [r3, #4]
    2192:	400a      	ands	r2, r1
    2194:	711a      	strb	r2, [r3, #4]
    2196:	2230      	movs	r2, #48	; 0x30
    2198:	686b      	ldr	r3, [r5, #4]
    219a:	199e      	adds	r6, r3, r6
    219c:	7933      	ldrb	r3, [r6, #4]
    219e:	4313      	orrs	r3, r2
    21a0:	7133      	strb	r3, [r6, #4]
    21a2:	230d      	movs	r3, #13
    21a4:	68aa      	ldr	r2, [r5, #8]
    21a6:	9903      	ldr	r1, [sp, #12]
    21a8:	5453      	strb	r3, [r2, r1]
    21aa:	e001      	b.n	21b0 <qtm_acquisition_process+0x12c>
    21ac:	2201      	movs	r2, #1
    21ae:	701a      	strb	r2, [r3, #0]
    21b0:	68a9      	ldr	r1, [r5, #8]
    21b2:	9b03      	ldr	r3, [sp, #12]
    21b4:	468c      	mov	ip, r1
    21b6:	0480      	lsls	r0, r0, #18
    21b8:	0c80      	lsrs	r0, r0, #18
    21ba:	4463      	add	r3, ip
    21bc:	8098      	strh	r0, [r3, #4]
    21be:	e0d9      	b.n	2374 <qtm_acquisition_process+0x2f0>
    21c0:	270f      	movs	r7, #15
    21c2:	0482      	lsls	r2, r0, #18
    21c4:	1203      	asrs	r3, r0, #8
    21c6:	1106      	asrs	r6, r0, #4
    21c8:	0f92      	lsrs	r2, r2, #30
    21ca:	403b      	ands	r3, r7
    21cc:	403e      	ands	r6, r7
    21ce:	4038      	ands	r0, r7
    21d0:	2900      	cmp	r1, #0
    21d2:	d138      	bne.n	2246 <qtm_acquisition_process+0x1c2>
    21d4:	2ccf      	cmp	r4, #207	; 0xcf
    21d6:	d90c      	bls.n	21f2 <qtm_acquisition_process+0x16e>
    21d8:	2a03      	cmp	r2, #3
    21da:	d00a      	beq.n	21f2 <qtm_acquisition_process+0x16e>
    21dc:	3201      	adds	r2, #1
    21de:	3ccf      	subs	r4, #207	; 0xcf
    21e0:	b2d2      	uxtb	r2, r2
    21e2:	b2a4      	uxth	r4, r4
    21e4:	e7f6      	b.n	21d4 <qtm_acquisition_process+0x150>
    21e6:	2b0f      	cmp	r3, #15
    21e8:	d007      	beq.n	21fa <qtm_acquisition_process+0x176>
    21ea:	3301      	adds	r3, #1
    21ec:	3c15      	subs	r4, #21
    21ee:	b2db      	uxtb	r3, r3
    21f0:	b2a4      	uxth	r4, r4
    21f2:	2c15      	cmp	r4, #21
    21f4:	d8f7      	bhi.n	21e6 <qtm_acquisition_process+0x162>
    21f6:	2b0f      	cmp	r3, #15
    21f8:	d10c      	bne.n	2214 <qtm_acquisition_process+0x190>
    21fa:	230f      	movs	r3, #15
    21fc:	2a03      	cmp	r2, #3
    21fe:	d009      	beq.n	2214 <qtm_acquisition_process+0x190>
    2200:	3201      	adds	r2, #1
    2202:	b2d2      	uxtb	r2, r2
    2204:	2305      	movs	r3, #5
    2206:	e005      	b.n	2214 <qtm_acquisition_process+0x190>
    2208:	2e0e      	cmp	r6, #14
    220a:	d805      	bhi.n	2218 <qtm_acquisition_process+0x194>
    220c:	3601      	adds	r6, #1
    220e:	3c02      	subs	r4, #2
    2210:	b2f6      	uxtb	r6, r6
    2212:	b2a4      	uxth	r4, r4
    2214:	2c02      	cmp	r4, #2
    2216:	d8f7      	bhi.n	2208 <qtm_acquisition_process+0x184>
    2218:	2e0f      	cmp	r6, #15
    221a:	d104      	bne.n	2226 <qtm_acquisition_process+0x1a2>
    221c:	2b0f      	cmp	r3, #15
    221e:	d038      	beq.n	2292 <qtm_acquisition_process+0x20e>
    2220:	2605      	movs	r6, #5
    2222:	3301      	adds	r3, #1
    2224:	b2db      	uxtb	r3, r3
    2226:	2a03      	cmp	r2, #3
    2228:	d000      	beq.n	222c <qtm_acquisition_process+0x1a8>
    222a:	e0c0      	b.n	23ae <qtm_acquisition_process+0x32a>
    222c:	2b0f      	cmp	r3, #15
    222e:	d000      	beq.n	2232 <qtm_acquisition_process+0x1ae>
    2230:	e0bd      	b.n	23ae <qtm_acquisition_process+0x32a>
    2232:	2e0f      	cmp	r6, #15
    2234:	d000      	beq.n	2238 <qtm_acquisition_process+0x1b4>
    2236:	e0ba      	b.n	23ae <qtm_acquisition_process+0x32a>
    2238:	e02e      	b.n	2298 <qtm_acquisition_process+0x214>
    223a:	2a00      	cmp	r2, #0
    223c:	d00c      	beq.n	2258 <qtm_acquisition_process+0x1d4>
    223e:	3a01      	subs	r2, #1
    2240:	3ccf      	subs	r4, #207	; 0xcf
    2242:	b2d2      	uxtb	r2, r2
    2244:	b2a4      	uxth	r4, r4
    2246:	2ccf      	cmp	r4, #207	; 0xcf
    2248:	d8f7      	bhi.n	223a <qtm_acquisition_process+0x1b6>
    224a:	e005      	b.n	2258 <qtm_acquisition_process+0x1d4>
    224c:	2b00      	cmp	r3, #0
    224e:	d007      	beq.n	2260 <qtm_acquisition_process+0x1dc>
    2250:	3b01      	subs	r3, #1
    2252:	3c15      	subs	r4, #21
    2254:	b2db      	uxtb	r3, r3
    2256:	b2a4      	uxth	r4, r4
    2258:	2c15      	cmp	r4, #21
    225a:	d8f7      	bhi.n	224c <qtm_acquisition_process+0x1c8>
    225c:	2b00      	cmp	r3, #0
    225e:	d10b      	bne.n	2278 <qtm_acquisition_process+0x1f4>
    2260:	1e13      	subs	r3, r2, #0
    2262:	d009      	beq.n	2278 <qtm_acquisition_process+0x1f4>
    2264:	3a01      	subs	r2, #1
    2266:	b2d2      	uxtb	r2, r2
    2268:	230a      	movs	r3, #10
    226a:	e005      	b.n	2278 <qtm_acquisition_process+0x1f4>
    226c:	2e00      	cmp	r6, #0
    226e:	d007      	beq.n	2280 <qtm_acquisition_process+0x1fc>
    2270:	3e01      	subs	r6, #1
    2272:	3c02      	subs	r4, #2
    2274:	b2f6      	uxtb	r6, r6
    2276:	b2a4      	uxth	r4, r4
    2278:	2c02      	cmp	r4, #2
    227a:	d8f7      	bhi.n	226c <qtm_acquisition_process+0x1e8>
    227c:	2e00      	cmp	r6, #0
    227e:	d112      	bne.n	22a6 <qtm_acquisition_process+0x222>
    2280:	2b00      	cmp	r3, #0
    2282:	d100      	bne.n	2286 <qtm_acquisition_process+0x202>
    2284:	e097      	b.n	23b6 <qtm_acquisition_process+0x332>
    2286:	3b01      	subs	r3, #1
    2288:	b2db      	uxtb	r3, r3
    228a:	260a      	movs	r6, #10
    228c:	2c02      	cmp	r4, #2
    228e:	d8da      	bhi.n	2246 <qtm_acquisition_process+0x1c2>
    2290:	e009      	b.n	22a6 <qtm_acquisition_process+0x222>
    2292:	2a03      	cmp	r2, #3
    2294:	d000      	beq.n	2298 <qtm_acquisition_process+0x214>
    2296:	e08a      	b.n	23ae <qtm_acquisition_process+0x32a>
    2298:	2c02      	cmp	r4, #2
    229a:	d800      	bhi.n	229e <qtm_acquisition_process+0x21a>
    229c:	e082      	b.n	23a4 <qtm_acquisition_process+0x320>
    229e:	200f      	movs	r0, #15
    22a0:	2203      	movs	r2, #3
    22a2:	0006      	movs	r6, r0
    22a4:	0003      	movs	r3, r0
    22a6:	0312      	lsls	r2, r2, #12
    22a8:	021b      	lsls	r3, r3, #8
    22aa:	b297      	uxth	r7, r2
    22ac:	431f      	orrs	r7, r3
    22ae:	4338      	orrs	r0, r7
    22b0:	0136      	lsls	r6, r6, #4
    22b2:	9b01      	ldr	r3, [sp, #4]
    22b4:	4330      	orrs	r0, r6
    22b6:	8098      	strh	r0, [r3, #4]
    22b8:	e05c      	b.n	2374 <qtm_acquisition_process+0x2f0>
    22ba:	4114      	asrs	r4, r2
    22bc:	791f      	ldrb	r7, [r3, #4]
    22be:	b2a4      	uxth	r4, r4
    22c0:	093f      	lsrs	r7, r7, #4
    22c2:	2f03      	cmp	r7, #3
    22c4:	d010      	beq.n	22e8 <qtm_acquisition_process+0x264>
    22c6:	0021      	movs	r1, r4
    22c8:	9802      	ldr	r0, [sp, #8]
    22ca:	4b33      	ldr	r3, [pc, #204]	; (2398 <qtm_acquisition_process+0x314>)
    22cc:	4798      	blx	r3
    22ce:	2800      	cmp	r0, #0
    22d0:	d101      	bne.n	22d6 <qtm_acquisition_process+0x252>
    22d2:	3701      	adds	r7, #1
    22d4:	e001      	b.n	22da <qtm_acquisition_process+0x256>
    22d6:	2f00      	cmp	r7, #0
    22d8:	d103      	bne.n	22e2 <qtm_acquisition_process+0x25e>
    22da:	2301      	movs	r3, #1
    22dc:	9a01      	ldr	r2, [sp, #4]
    22de:	7013      	strb	r3, [r2, #0]
    22e0:	e003      	b.n	22ea <qtm_acquisition_process+0x266>
    22e2:	3f01      	subs	r7, #1
    22e4:	b2ff      	uxtb	r7, r7
    22e6:	e000      	b.n	22ea <qtm_acquisition_process+0x266>
    22e8:	2702      	movs	r7, #2
    22ea:	220f      	movs	r2, #15
    22ec:	686b      	ldr	r3, [r5, #4]
    22ee:	013f      	lsls	r7, r7, #4
    22f0:	199b      	adds	r3, r3, r6
    22f2:	7919      	ldrb	r1, [r3, #4]
    22f4:	400a      	ands	r2, r1
    22f6:	711a      	strb	r2, [r3, #4]
    22f8:	686b      	ldr	r3, [r5, #4]
    22fa:	199e      	adds	r6, r3, r6
    22fc:	e020      	b.n	2340 <qtm_acquisition_process+0x2bc>
    22fe:	791f      	ldrb	r7, [r3, #4]
    2300:	4114      	asrs	r4, r2
    2302:	230f      	movs	r3, #15
    2304:	b2a4      	uxth	r4, r4
    2306:	401f      	ands	r7, r3
    2308:	d011      	beq.n	232e <qtm_acquisition_process+0x2aa>
    230a:	0021      	movs	r1, r4
    230c:	9802      	ldr	r0, [sp, #8]
    230e:	4b22      	ldr	r3, [pc, #136]	; (2398 <qtm_acquisition_process+0x314>)
    2310:	4798      	blx	r3
    2312:	2800      	cmp	r0, #0
    2314:	d102      	bne.n	231c <qtm_acquisition_process+0x298>
    2316:	3f01      	subs	r7, #1
    2318:	b2ff      	uxtb	r7, r7
    231a:	e001      	b.n	2320 <qtm_acquisition_process+0x29c>
    231c:	2f03      	cmp	r7, #3
    231e:	d103      	bne.n	2328 <qtm_acquisition_process+0x2a4>
    2320:	2301      	movs	r3, #1
    2322:	9a01      	ldr	r2, [sp, #4]
    2324:	7013      	strb	r3, [r2, #0]
    2326:	e003      	b.n	2330 <qtm_acquisition_process+0x2ac>
    2328:	3701      	adds	r7, #1
    232a:	b2ff      	uxtb	r7, r7
    232c:	e000      	b.n	2330 <qtm_acquisition_process+0x2ac>
    232e:	2701      	movs	r7, #1
    2330:	210f      	movs	r1, #15
    2332:	686b      	ldr	r3, [r5, #4]
    2334:	199b      	adds	r3, r3, r6
    2336:	791a      	ldrb	r2, [r3, #4]
    2338:	438a      	bics	r2, r1
    233a:	711a      	strb	r2, [r3, #4]
    233c:	686b      	ldr	r3, [r5, #4]
    233e:	199e      	adds	r6, r3, r6
    2340:	7933      	ldrb	r3, [r6, #4]
    2342:	431f      	orrs	r7, r3
    2344:	7137      	strb	r7, [r6, #4]
    2346:	68a9      	ldr	r1, [r5, #8]
    2348:	9b03      	ldr	r3, [sp, #12]
    234a:	468c      	mov	ip, r1
    234c:	4463      	add	r3, ip
    234e:	001a      	movs	r2, r3
    2350:	805c      	strh	r4, [r3, #2]
    2352:	781b      	ldrb	r3, [r3, #0]
    2354:	2b01      	cmp	r3, #1
    2356:	d10d      	bne.n	2374 <qtm_acquisition_process+0x2f0>
    2358:	4b0c      	ldr	r3, [pc, #48]	; (238c <qtm_acquisition_process+0x308>)
    235a:	429c      	cmp	r4, r3
    235c:	d902      	bls.n	2364 <qtm_acquisition_process+0x2e0>
    235e:	4b0c      	ldr	r3, [pc, #48]	; (2390 <qtm_acquisition_process+0x30c>)
    2360:	18e4      	adds	r4, r4, r3
    2362:	e000      	b.n	2366 <qtm_acquisition_process+0x2e2>
    2364:	1b1c      	subs	r4, r3, r4
    2366:	b2a4      	uxth	r4, r4
    2368:	2c05      	cmp	r4, #5
    236a:	d903      	bls.n	2374 <qtm_acquisition_process+0x2f0>
    236c:	2345      	movs	r3, #69	; 0x45
    236e:	7013      	strb	r3, [r2, #0]
    2370:	e000      	b.n	2374 <qtm_acquisition_process+0x2f0>
    2372:	e7fe      	b.n	2372 <qtm_acquisition_process+0x2ee>
    2374:	9b02      	ldr	r3, [sp, #8]
    2376:	3301      	adds	r3, #1
    2378:	b29b      	uxth	r3, r3
    237a:	9302      	str	r3, [sp, #8]
    237c:	e693      	b.n	20a6 <qtm_acquisition_process+0x22>
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	20000768 	.word	0x20000768
    2384:	20001474 	.word	0x20001474
    2388:	20001478 	.word	0x20001478
    238c:	000001ff 	.word	0x000001ff
    2390:	fffffe01 	.word	0xfffffe01
    2394:	00003fff 	.word	0x00003fff
    2398:	00001d89 	.word	0x00001d89
    239c:	2202      	movs	r2, #2
    239e:	4b08      	ldr	r3, [pc, #32]	; (23c0 <qtm_acquisition_process+0x33c>)
    23a0:	721a      	strb	r2, [r3, #8]
    23a2:	e00a      	b.n	23ba <qtm_acquisition_process+0x336>
    23a4:	260f      	movs	r6, #15
    23a6:	2203      	movs	r2, #3
    23a8:	0030      	movs	r0, r6
    23aa:	0033      	movs	r3, r6
    23ac:	e77b      	b.n	22a6 <qtm_acquisition_process+0x222>
    23ae:	2c02      	cmp	r4, #2
    23b0:	d900      	bls.n	23b4 <qtm_acquisition_process+0x330>
    23b2:	e70f      	b.n	21d4 <qtm_acquisition_process+0x150>
    23b4:	e777      	b.n	22a6 <qtm_acquisition_process+0x222>
    23b6:	001e      	movs	r6, r3
    23b8:	e775      	b.n	22a6 <qtm_acquisition_process+0x222>
    23ba:	9804      	ldr	r0, [sp, #16]
    23bc:	b007      	add	sp, #28
    23be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23c0:	20000768 	.word	0x20000768

000023c4 <qtm_ptc_init_acquisition_module>:
    23c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    23c6:	2480      	movs	r4, #128	; 0x80
    23c8:	493f      	ldr	r1, [pc, #252]	; (24c8 <qtm_ptc_init_acquisition_module+0x104>)
    23ca:	4b40      	ldr	r3, [pc, #256]	; (24cc <qtm_ptc_init_acquisition_module+0x108>)
    23cc:	690a      	ldr	r2, [r1, #16]
    23ce:	00e4      	lsls	r4, r4, #3
    23d0:	401a      	ands	r2, r3
    23d2:	4322      	orrs	r2, r4
    23d4:	610a      	str	r2, [r1, #16]
    23d6:	694a      	ldr	r2, [r1, #20]
    23d8:	260b      	movs	r6, #11
    23da:	4013      	ands	r3, r2
    23dc:	4323      	orrs	r3, r4
    23de:	614b      	str	r3, [r1, #20]
    23e0:	2800      	cmp	r0, #0
    23e2:	d06e      	beq.n	24c2 <qtm_ptc_init_acquisition_module+0xfe>
    23e4:	6803      	ldr	r3, [r0, #0]
    23e6:	8819      	ldrh	r1, [r3, #0]
    23e8:	2300      	movs	r3, #0
    23ea:	9300      	str	r3, [sp, #0]
    23ec:	9301      	str	r3, [sp, #4]
    23ee:	b29a      	uxth	r2, r3
    23f0:	4291      	cmp	r1, r2
    23f2:	d90c      	bls.n	240e <qtm_ptc_init_acquisition_module+0x4a>
    23f4:	6844      	ldr	r4, [r0, #4]
    23f6:	00da      	lsls	r2, r3, #3
    23f8:	18a2      	adds	r2, r4, r2
    23fa:	8814      	ldrh	r4, [r2, #0]
    23fc:	9d01      	ldr	r5, [sp, #4]
    23fe:	3301      	adds	r3, #1
    2400:	4325      	orrs	r5, r4
    2402:	9501      	str	r5, [sp, #4]
    2404:	8852      	ldrh	r2, [r2, #2]
    2406:	9c00      	ldr	r4, [sp, #0]
    2408:	4314      	orrs	r4, r2
    240a:	9400      	str	r4, [sp, #0]
    240c:	e7ef      	b.n	23ee <qtm_ptc_init_acquisition_module+0x2a>
    240e:	9b00      	ldr	r3, [sp, #0]
    2410:	2602      	movs	r6, #2
    2412:	2b00      	cmp	r3, #0
    2414:	d055      	beq.n	24c2 <qtm_ptc_init_acquisition_module+0xfe>
    2416:	9b01      	ldr	r3, [sp, #4]
    2418:	9a00      	ldr	r2, [sp, #0]
    241a:	041b      	lsls	r3, r3, #16
    241c:	431a      	orrs	r2, r3
    241e:	4694      	mov	ip, r2
    2420:	2000      	movs	r0, #0
    2422:	2101      	movs	r1, #1
    2424:	240f      	movs	r4, #15
    2426:	4f2a      	ldr	r7, [pc, #168]	; (24d0 <qtm_ptc_init_acquisition_module+0x10c>)
    2428:	370e      	adds	r7, #14
    242a:	4663      	mov	r3, ip
    242c:	40c3      	lsrs	r3, r0
    242e:	420b      	tst	r3, r1
    2430:	d025      	beq.n	247e <qtm_ptc_init_acquisition_module+0xba>
    2432:	5dc3      	ldrb	r3, [r0, r7]
    2434:	2b1f      	cmp	r3, #31
    2436:	d80e      	bhi.n	2456 <qtm_ptc_init_acquisition_module+0x92>
    2438:	4d26      	ldr	r5, [pc, #152]	; (24d4 <qtm_ptc_init_acquisition_module+0x110>)
    243a:	085a      	lsrs	r2, r3, #1
    243c:	1952      	adds	r2, r2, r5
    243e:	7815      	ldrb	r5, [r2, #0]
    2440:	420b      	tst	r3, r1
    2442:	d003      	beq.n	244c <qtm_ptc_init_acquisition_module+0x88>
    2444:	2610      	movs	r6, #16
    2446:	4025      	ands	r5, r4
    2448:	4335      	orrs	r5, r6
    244a:	e001      	b.n	2450 <qtm_ptc_init_acquisition_module+0x8c>
    244c:	43a5      	bics	r5, r4
    244e:	430d      	orrs	r5, r1
    2450:	7015      	strb	r5, [r2, #0]
    2452:	4a21      	ldr	r2, [pc, #132]	; (24d8 <qtm_ptc_init_acquisition_module+0x114>)
    2454:	e00f      	b.n	2476 <qtm_ptc_init_acquisition_module+0xb2>
    2456:	3b20      	subs	r3, #32
    2458:	4d20      	ldr	r5, [pc, #128]	; (24dc <qtm_ptc_init_acquisition_module+0x118>)
    245a:	b2db      	uxtb	r3, r3
    245c:	085a      	lsrs	r2, r3, #1
    245e:	1952      	adds	r2, r2, r5
    2460:	7815      	ldrb	r5, [r2, #0]
    2462:	420b      	tst	r3, r1
    2464:	d003      	beq.n	246e <qtm_ptc_init_acquisition_module+0xaa>
    2466:	2610      	movs	r6, #16
    2468:	4025      	ands	r5, r4
    246a:	4335      	orrs	r5, r6
    246c:	e001      	b.n	2472 <qtm_ptc_init_acquisition_module+0xae>
    246e:	43a5      	bics	r5, r4
    2470:	430d      	orrs	r5, r1
    2472:	7015      	strb	r5, [r2, #0]
    2474:	4a1a      	ldr	r2, [pc, #104]	; (24e0 <qtm_ptc_init_acquisition_module+0x11c>)
    2476:	189b      	adds	r3, r3, r2
    2478:	781a      	ldrb	r2, [r3, #0]
    247a:	430a      	orrs	r2, r1
    247c:	701a      	strb	r2, [r3, #0]
    247e:	3001      	adds	r0, #1
    2480:	2820      	cmp	r0, #32
    2482:	d1d2      	bne.n	242a <qtm_ptc_init_acquisition_module+0x66>
    2484:	4d17      	ldr	r5, [pc, #92]	; (24e4 <qtm_ptc_init_acquisition_module+0x120>)
    2486:	47a8      	blx	r5
    2488:	2300      	movs	r3, #0
    248a:	4c17      	ldr	r4, [pc, #92]	; (24e8 <qtm_ptc_init_acquisition_module+0x124>)
    248c:	4f17      	ldr	r7, [pc, #92]	; (24ec <qtm_ptc_init_acquisition_module+0x128>)
    248e:	7023      	strb	r3, [r4, #0]
    2490:	7a3e      	ldrb	r6, [r7, #8]
    2492:	2e00      	cmp	r6, #0
    2494:	d10a      	bne.n	24ac <qtm_ptc_init_acquisition_module+0xe8>
    2496:	47a8      	blx	r5
    2498:	466b      	mov	r3, sp
    249a:	889b      	ldrh	r3, [r3, #4]
    249c:	82e3      	strh	r3, [r4, #22]
    249e:	47a8      	blx	r5
    24a0:	466b      	mov	r3, sp
    24a2:	881b      	ldrh	r3, [r3, #0]
    24a4:	82a3      	strh	r3, [r4, #20]
    24a6:	2301      	movs	r3, #1
    24a8:	723b      	strb	r3, [r7, #8]
    24aa:	e00a      	b.n	24c2 <qtm_ptc_init_acquisition_module+0xfe>
    24ac:	2600      	movs	r6, #0
    24ae:	47a8      	blx	r5
    24b0:	8ae3      	ldrh	r3, [r4, #22]
    24b2:	9a01      	ldr	r2, [sp, #4]
    24b4:	431a      	orrs	r2, r3
    24b6:	82e2      	strh	r2, [r4, #22]
    24b8:	47a8      	blx	r5
    24ba:	8aa3      	ldrh	r3, [r4, #20]
    24bc:	9a00      	ldr	r2, [sp, #0]
    24be:	431a      	orrs	r2, r3
    24c0:	82a2      	strh	r2, [r4, #20]
    24c2:	0030      	movs	r0, r6
    24c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	42004400 	.word	0x42004400
    24cc:	fffff8ff 	.word	0xfffff8ff
    24d0:	00002a5a 	.word	0x00002a5a
    24d4:	41004430 	.word	0x41004430
    24d8:	41004440 	.word	0x41004440
    24dc:	410044b0 	.word	0x410044b0
    24e0:	410044c0 	.word	0x410044c0
    24e4:	00001d71 	.word	0x00001d71
    24e8:	42004c00 	.word	0x42004c00
    24ec:	20000768 	.word	0x20000768

000024f0 <qtm_ptc_qtlib_assign_signal_memory>:
    24f0:	230b      	movs	r3, #11
    24f2:	2800      	cmp	r0, #0
    24f4:	d002      	beq.n	24fc <qtm_ptc_qtlib_assign_signal_memory+0xc>
    24f6:	4b02      	ldr	r3, [pc, #8]	; (2500 <qtm_ptc_qtlib_assign_signal_memory+0x10>)
    24f8:	6018      	str	r0, [r3, #0]
    24fa:	2300      	movs	r3, #0
    24fc:	0018      	movs	r0, r3
    24fe:	4770      	bx	lr
    2500:	20001478 	.word	0x20001478

00002504 <qtm_ptc_start_measurement_seq>:
    2504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2506:	0007      	movs	r7, r0
    2508:	9100      	str	r1, [sp, #0]
    250a:	240b      	movs	r4, #11
    250c:	2900      	cmp	r1, #0
    250e:	d057      	beq.n	25c0 <qtm_ptc_start_measurement_seq+0xbc>
    2510:	2800      	cmp	r0, #0
    2512:	d055      	beq.n	25c0 <qtm_ptc_start_measurement_seq+0xbc>
    2514:	4d2b      	ldr	r5, [pc, #172]	; (25c4 <qtm_ptc_start_measurement_seq+0xc0>)
    2516:	3c08      	subs	r4, #8
    2518:	7a2b      	ldrb	r3, [r5, #8]
    251a:	2b00      	cmp	r3, #0
    251c:	d050      	beq.n	25c0 <qtm_ptc_start_measurement_seq+0xbc>
    251e:	2b04      	cmp	r3, #4
    2520:	d101      	bne.n	2526 <qtm_ptc_start_measurement_seq+0x22>
    2522:	2401      	movs	r4, #1
    2524:	e04c      	b.n	25c0 <qtm_ptc_start_measurement_seq+0xbc>
    2526:	227f      	movs	r2, #127	; 0x7f
    2528:	4e27      	ldr	r6, [pc, #156]	; (25c8 <qtm_ptc_start_measurement_seq+0xc4>)
    252a:	7b73      	ldrb	r3, [r6, #13]
    252c:	4393      	bics	r3, r2
    252e:	9301      	str	r3, [sp, #4]
    2530:	d1f7      	bne.n	2522 <qtm_ptc_start_measurement_seq+0x1e>
    2532:	2402      	movs	r4, #2
    2534:	6803      	ldr	r3, [r0, #0]
    2536:	795b      	ldrb	r3, [r3, #5]
    2538:	3b01      	subs	r3, #1
    253a:	42a3      	cmp	r3, r4
    253c:	d840      	bhi.n	25c0 <qtm_ptc_start_measurement_seq+0xbc>
    253e:	4b23      	ldr	r3, [pc, #140]	; (25cc <qtm_ptc_start_measurement_seq+0xc8>)
    2540:	4798      	blx	r3
    2542:	7833      	ldrb	r3, [r6, #0]
    2544:	43a3      	bics	r3, r4
    2546:	7033      	strb	r3, [r6, #0]
    2548:	4b21      	ldr	r3, [pc, #132]	; (25d0 <qtm_ptc_start_measurement_seq+0xcc>)
    254a:	601f      	str	r7, [r3, #0]
    254c:	9b00      	ldr	r3, [sp, #0]
    254e:	60eb      	str	r3, [r5, #12]
    2550:	4b20      	ldr	r3, [pc, #128]	; (25d4 <qtm_ptc_start_measurement_seq+0xd0>)
    2552:	4798      	blx	r3
    2554:	2280      	movs	r2, #128	; 0x80
    2556:	4b20      	ldr	r3, [pc, #128]	; (25d8 <qtm_ptc_start_measurement_seq+0xd4>)
    2558:	04d2      	lsls	r2, r2, #19
    255a:	67da      	str	r2, [r3, #124]	; 0x7c
    255c:	2307      	movs	r3, #7
    255e:	72b3      	strb	r3, [r6, #10]
    2560:	4b1a      	ldr	r3, [pc, #104]	; (25cc <qtm_ptc_start_measurement_seq+0xc8>)
    2562:	4798      	blx	r3
    2564:	2201      	movs	r2, #1
    2566:	7a73      	ldrb	r3, [r6, #9]
    2568:	2180      	movs	r1, #128	; 0x80
    256a:	4313      	orrs	r3, r2
    256c:	7273      	strb	r3, [r6, #9]
    256e:	4b1b      	ldr	r3, [pc, #108]	; (25dc <qtm_ptc_start_measurement_seq+0xd8>)
    2570:	20c6      	movs	r0, #198	; 0xc6
    2572:	701a      	strb	r2, [r3, #0]
    2574:	23c0      	movs	r3, #192	; 0xc0
    2576:	26ff      	movs	r6, #255	; 0xff
    2578:	4a19      	ldr	r2, [pc, #100]	; (25e0 <qtm_ptc_start_measurement_seq+0xdc>)
    257a:	005b      	lsls	r3, r3, #1
    257c:	04c9      	lsls	r1, r1, #19
    257e:	50d1      	str	r1, [r2, r3]
    2580:	0080      	lsls	r0, r0, #2
    2582:	5813      	ldr	r3, [r2, r0]
    2584:	683a      	ldr	r2, [r7, #0]
    2586:	0436      	lsls	r6, r6, #16
    2588:	7951      	ldrb	r1, [r2, #5]
    258a:	4a16      	ldr	r2, [pc, #88]	; (25e4 <qtm_ptc_start_measurement_seq+0xe0>)
    258c:	0589      	lsls	r1, r1, #22
    258e:	4031      	ands	r1, r6
    2590:	401a      	ands	r2, r3
    2592:	000b      	movs	r3, r1
    2594:	4313      	orrs	r3, r2
    2596:	4a12      	ldr	r2, [pc, #72]	; (25e0 <qtm_ptc_start_measurement_seq+0xdc>)
    2598:	5013      	str	r3, [r2, r0]
    259a:	0013      	movs	r3, r2
    259c:	2280      	movs	r2, #128	; 0x80
    259e:	04d2      	lsls	r2, r2, #19
    25a0:	601a      	str	r2, [r3, #0]
    25a2:	466b      	mov	r3, sp
    25a4:	889b      	ldrh	r3, [r3, #4]
    25a6:	802b      	strh	r3, [r5, #0]
    25a8:	4b0f      	ldr	r3, [pc, #60]	; (25e8 <qtm_ptc_start_measurement_seq+0xe4>)
    25aa:	4798      	blx	r3
    25ac:	1e06      	subs	r6, r0, #0
    25ae:	d106      	bne.n	25be <qtm_ptc_start_measurement_seq+0xba>
    25b0:	2304      	movs	r3, #4
    25b2:	8828      	ldrh	r0, [r5, #0]
    25b4:	722b      	strb	r3, [r5, #8]
    25b6:	4b0d      	ldr	r3, [pc, #52]	; (25ec <qtm_ptc_start_measurement_seq+0xe8>)
    25b8:	4798      	blx	r3
    25ba:	0034      	movs	r4, r6
    25bc:	e000      	b.n	25c0 <qtm_ptc_start_measurement_seq+0xbc>
    25be:	722c      	strb	r4, [r5, #8]
    25c0:	0020      	movs	r0, r4
    25c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    25c4:	20000768 	.word	0x20000768
    25c8:	42004c00 	.word	0x42004c00
    25cc:	00001d71 	.word	0x00001d71
    25d0:	20001474 	.word	0x20001474
    25d4:	00002015 	.word	0x00002015
    25d8:	e000e104 	.word	0xe000e104
    25dc:	2000070e 	.word	0x2000070e
    25e0:	e000e100 	.word	0xe000e100
    25e4:	ff00ffff 	.word	0xff00ffff
    25e8:	00001e15 	.word	0x00001e15
    25ec:	00001e55 	.word	0x00001e55

000025f0 <qtm_enable_sensor_node>:
    25f0:	230b      	movs	r3, #11
    25f2:	2800      	cmp	r0, #0
    25f4:	d00a      	beq.n	260c <qtm_enable_sensor_node+0x1c>
    25f6:	6803      	ldr	r3, [r0, #0]
    25f8:	881a      	ldrh	r2, [r3, #0]
    25fa:	2302      	movs	r3, #2
    25fc:	428a      	cmp	r2, r1
    25fe:	d305      	bcc.n	260c <qtm_enable_sensor_node+0x1c>
    2600:	3304      	adds	r3, #4
    2602:	4359      	muls	r1, r3
    2604:	6882      	ldr	r2, [r0, #8]
    2606:	3b05      	subs	r3, #5
    2608:	548b      	strb	r3, [r1, r2]
    260a:	2300      	movs	r3, #0
    260c:	0018      	movs	r0, r3
    260e:	4770      	bx	lr

00002610 <qtm_calibrate_sensor_node>:
    2610:	0002      	movs	r2, r0
    2612:	b510      	push	{r4, lr}
    2614:	200b      	movs	r0, #11
    2616:	2a00      	cmp	r2, #0
    2618:	d01f      	beq.n	265a <qtm_calibrate_sensor_node+0x4a>
    261a:	6813      	ldr	r3, [r2, #0]
    261c:	3809      	subs	r0, #9
    261e:	881c      	ldrh	r4, [r3, #0]
    2620:	428c      	cmp	r4, r1
    2622:	d31a      	bcc.n	265a <qtm_calibrate_sensor_node+0x4a>
    2624:	789b      	ldrb	r3, [r3, #2]
    2626:	6892      	ldr	r2, [r2, #8]
    2628:	2b40      	cmp	r3, #64	; 0x40
    262a:	d105      	bne.n	2638 <qtm_calibrate_sensor_node+0x28>
    262c:	208d      	movs	r0, #141	; 0x8d
    262e:	3b3a      	subs	r3, #58	; 0x3a
    2630:	434b      	muls	r3, r1
    2632:	0080      	lsls	r0, r0, #2
    2634:	18d3      	adds	r3, r2, r3
    2636:	e007      	b.n	2648 <qtm_calibrate_sensor_node+0x38>
    2638:	3b80      	subs	r3, #128	; 0x80
    263a:	b2db      	uxtb	r3, r3
    263c:	2b01      	cmp	r3, #1
    263e:	d805      	bhi.n	264c <qtm_calibrate_sensor_node+0x3c>
    2640:	2306      	movs	r3, #6
    2642:	434b      	muls	r3, r1
    2644:	4805      	ldr	r0, [pc, #20]	; (265c <qtm_calibrate_sensor_node+0x4c>)
    2646:	18d3      	adds	r3, r2, r3
    2648:	8098      	strh	r0, [r3, #4]
    264a:	2000      	movs	r0, #0
    264c:	2306      	movs	r3, #6
    264e:	4359      	muls	r1, r3
    2650:	1851      	adds	r1, r2, r1
    2652:	2202      	movs	r2, #2
    2654:	780b      	ldrb	r3, [r1, #0]
    2656:	4313      	orrs	r3, r2
    2658:	700b      	strb	r3, [r1, #0]
    265a:	bd10      	pop	{r4, pc}
    265c:	00000567 	.word	0x00000567

00002660 <qtm_ptc_clear_interrupt>:
    2660:	2002      	movs	r0, #2
    2662:	4b07      	ldr	r3, [pc, #28]	; (2680 <qtm_ptc_clear_interrupt+0x20>)
    2664:	7a9a      	ldrb	r2, [r3, #10]
    2666:	b2d2      	uxtb	r2, r2
    2668:	4202      	tst	r2, r0
    266a:	d002      	beq.n	2672 <qtm_ptc_clear_interrupt+0x12>
    266c:	7a99      	ldrb	r1, [r3, #10]
    266e:	4301      	orrs	r1, r0
    2670:	7299      	strb	r1, [r3, #10]
    2672:	2101      	movs	r1, #1
    2674:	420a      	tst	r2, r1
    2676:	d002      	beq.n	267e <qtm_ptc_clear_interrupt+0x1e>
    2678:	7a9a      	ldrb	r2, [r3, #10]
    267a:	430a      	orrs	r2, r1
    267c:	729a      	strb	r2, [r3, #10]
    267e:	4770      	bx	lr
    2680:	42004c00 	.word	0x42004c00

00002684 <qtm_samd21_ptc_handler_eoc>:
    2684:	b570      	push	{r4, r5, r6, lr}
    2686:	4b21      	ldr	r3, [pc, #132]	; (270c <qtm_samd21_ptc_handler_eoc+0x88>)
    2688:	4798      	blx	r3
    268a:	2202      	movs	r2, #2
    268c:	4c20      	ldr	r4, [pc, #128]	; (2710 <qtm_samd21_ptc_handler_eoc+0x8c>)
    268e:	7823      	ldrb	r3, [r4, #0]
    2690:	4393      	bics	r3, r2
    2692:	7023      	strb	r3, [r4, #0]
    2694:	4b1f      	ldr	r3, [pc, #124]	; (2714 <qtm_samd21_ptc_handler_eoc+0x90>)
    2696:	4798      	blx	r3
    2698:	8ba1      	ldrh	r1, [r4, #28]
    269a:	8ba0      	ldrh	r0, [r4, #28]
    269c:	4c1e      	ldr	r4, [pc, #120]	; (2718 <qtm_samd21_ptc_handler_eoc+0x94>)
    269e:	4a1f      	ldr	r2, [pc, #124]	; (271c <qtm_samd21_ptc_handler_eoc+0x98>)
    26a0:	8823      	ldrh	r3, [r4, #0]
    26a2:	6812      	ldr	r2, [r2, #0]
    26a4:	005b      	lsls	r3, r3, #1
    26a6:	52d0      	strh	r0, [r2, r3]
    26a8:	4b1d      	ldr	r3, [pc, #116]	; (2720 <qtm_samd21_ptc_handler_eoc+0x9c>)
    26aa:	b289      	uxth	r1, r1
    26ac:	781b      	ldrb	r3, [r3, #0]
    26ae:	0025      	movs	r5, r4
    26b0:	2b01      	cmp	r3, #1
    26b2:	d002      	beq.n	26ba <qtm_samd21_ptc_handler_eoc+0x36>
    26b4:	2b02      	cmp	r3, #2
    26b6:	d00f      	beq.n	26d8 <qtm_samd21_ptc_handler_eoc+0x54>
    26b8:	e027      	b.n	270a <qtm_samd21_ptc_handler_eoc+0x86>
    26ba:	8823      	ldrh	r3, [r4, #0]
    26bc:	3301      	adds	r3, #1
    26be:	8023      	strh	r3, [r4, #0]
    26c0:	4b18      	ldr	r3, [pc, #96]	; (2724 <qtm_samd21_ptc_handler_eoc+0xa0>)
    26c2:	4798      	blx	r3
    26c4:	2800      	cmp	r0, #0
    26c6:	d105      	bne.n	26d4 <qtm_samd21_ptc_handler_eoc+0x50>
    26c8:	4b17      	ldr	r3, [pc, #92]	; (2728 <qtm_samd21_ptc_handler_eoc+0xa4>)
    26ca:	8820      	ldrh	r0, [r4, #0]
    26cc:	4798      	blx	r3
    26ce:	2304      	movs	r3, #4
    26d0:	7223      	strb	r3, [r4, #8]
    26d2:	e01a      	b.n	270a <qtm_samd21_ptc_handler_eoc+0x86>
    26d4:	68e3      	ldr	r3, [r4, #12]
    26d6:	e017      	b.n	2708 <qtm_samd21_ptc_handler_eoc+0x84>
    26d8:	4b14      	ldr	r3, [pc, #80]	; (272c <qtm_samd21_ptc_handler_eoc+0xa8>)
    26da:	681e      	ldr	r6, [r3, #0]
    26dc:	8823      	ldrh	r3, [r4, #0]
    26de:	6872      	ldr	r2, [r6, #4]
    26e0:	00dc      	lsls	r4, r3, #3
    26e2:	1914      	adds	r4, r2, r4
    26e4:	220f      	movs	r2, #15
    26e6:	7960      	ldrb	r0, [r4, #5]
    26e8:	4010      	ands	r0, r2
    26ea:	79a2      	ldrb	r2, [r4, #6]
    26ec:	2400      	movs	r4, #0
    26ee:	4290      	cmp	r0, r2
    26f0:	d201      	bcs.n	26f6 <qtm_samd21_ptc_handler_eoc+0x72>
    26f2:	1a12      	subs	r2, r2, r0
    26f4:	b2d4      	uxtb	r4, r2
    26f6:	2206      	movs	r2, #6
    26f8:	40e1      	lsrs	r1, r4
    26fa:	4353      	muls	r3, r2
    26fc:	68b0      	ldr	r0, [r6, #8]
    26fe:	18c3      	adds	r3, r0, r3
    2700:	8059      	strh	r1, [r3, #2]
    2702:	2302      	movs	r3, #2
    2704:	722b      	strb	r3, [r5, #8]
    2706:	692b      	ldr	r3, [r5, #16]
    2708:	4798      	blx	r3
    270a:	bd70      	pop	{r4, r5, r6, pc}
    270c:	00001d71 	.word	0x00001d71
    2710:	42004c00 	.word	0x42004c00
    2714:	00002661 	.word	0x00002661
    2718:	20000768 	.word	0x20000768
    271c:	20001478 	.word	0x20001478
    2720:	2000070e 	.word	0x2000070e
    2724:	00001e15 	.word	0x00001e15
    2728:	00001e55 	.word	0x00001e55
    272c:	20001474 	.word	0x20001474

00002730 <__gnu_thumb1_case_uhi>:
    2730:	b403      	push	{r0, r1}
    2732:	4671      	mov	r1, lr
    2734:	0849      	lsrs	r1, r1, #1
    2736:	0040      	lsls	r0, r0, #1
    2738:	0049      	lsls	r1, r1, #1
    273a:	5a09      	ldrh	r1, [r1, r0]
    273c:	0049      	lsls	r1, r1, #1
    273e:	448e      	add	lr, r1
    2740:	bc03      	pop	{r0, r1}
    2742:	4770      	bx	lr

00002744 <__udivsi3>:
    2744:	2200      	movs	r2, #0
    2746:	0843      	lsrs	r3, r0, #1
    2748:	428b      	cmp	r3, r1
    274a:	d374      	bcc.n	2836 <__udivsi3+0xf2>
    274c:	0903      	lsrs	r3, r0, #4
    274e:	428b      	cmp	r3, r1
    2750:	d35f      	bcc.n	2812 <__udivsi3+0xce>
    2752:	0a03      	lsrs	r3, r0, #8
    2754:	428b      	cmp	r3, r1
    2756:	d344      	bcc.n	27e2 <__udivsi3+0x9e>
    2758:	0b03      	lsrs	r3, r0, #12
    275a:	428b      	cmp	r3, r1
    275c:	d328      	bcc.n	27b0 <__udivsi3+0x6c>
    275e:	0c03      	lsrs	r3, r0, #16
    2760:	428b      	cmp	r3, r1
    2762:	d30d      	bcc.n	2780 <__udivsi3+0x3c>
    2764:	22ff      	movs	r2, #255	; 0xff
    2766:	0209      	lsls	r1, r1, #8
    2768:	ba12      	rev	r2, r2
    276a:	0c03      	lsrs	r3, r0, #16
    276c:	428b      	cmp	r3, r1
    276e:	d302      	bcc.n	2776 <__udivsi3+0x32>
    2770:	1212      	asrs	r2, r2, #8
    2772:	0209      	lsls	r1, r1, #8
    2774:	d065      	beq.n	2842 <__udivsi3+0xfe>
    2776:	0b03      	lsrs	r3, r0, #12
    2778:	428b      	cmp	r3, r1
    277a:	d319      	bcc.n	27b0 <__udivsi3+0x6c>
    277c:	e000      	b.n	2780 <__udivsi3+0x3c>
    277e:	0a09      	lsrs	r1, r1, #8
    2780:	0bc3      	lsrs	r3, r0, #15
    2782:	428b      	cmp	r3, r1
    2784:	d301      	bcc.n	278a <__udivsi3+0x46>
    2786:	03cb      	lsls	r3, r1, #15
    2788:	1ac0      	subs	r0, r0, r3
    278a:	4152      	adcs	r2, r2
    278c:	0b83      	lsrs	r3, r0, #14
    278e:	428b      	cmp	r3, r1
    2790:	d301      	bcc.n	2796 <__udivsi3+0x52>
    2792:	038b      	lsls	r3, r1, #14
    2794:	1ac0      	subs	r0, r0, r3
    2796:	4152      	adcs	r2, r2
    2798:	0b43      	lsrs	r3, r0, #13
    279a:	428b      	cmp	r3, r1
    279c:	d301      	bcc.n	27a2 <__udivsi3+0x5e>
    279e:	034b      	lsls	r3, r1, #13
    27a0:	1ac0      	subs	r0, r0, r3
    27a2:	4152      	adcs	r2, r2
    27a4:	0b03      	lsrs	r3, r0, #12
    27a6:	428b      	cmp	r3, r1
    27a8:	d301      	bcc.n	27ae <__udivsi3+0x6a>
    27aa:	030b      	lsls	r3, r1, #12
    27ac:	1ac0      	subs	r0, r0, r3
    27ae:	4152      	adcs	r2, r2
    27b0:	0ac3      	lsrs	r3, r0, #11
    27b2:	428b      	cmp	r3, r1
    27b4:	d301      	bcc.n	27ba <__udivsi3+0x76>
    27b6:	02cb      	lsls	r3, r1, #11
    27b8:	1ac0      	subs	r0, r0, r3
    27ba:	4152      	adcs	r2, r2
    27bc:	0a83      	lsrs	r3, r0, #10
    27be:	428b      	cmp	r3, r1
    27c0:	d301      	bcc.n	27c6 <__udivsi3+0x82>
    27c2:	028b      	lsls	r3, r1, #10
    27c4:	1ac0      	subs	r0, r0, r3
    27c6:	4152      	adcs	r2, r2
    27c8:	0a43      	lsrs	r3, r0, #9
    27ca:	428b      	cmp	r3, r1
    27cc:	d301      	bcc.n	27d2 <__udivsi3+0x8e>
    27ce:	024b      	lsls	r3, r1, #9
    27d0:	1ac0      	subs	r0, r0, r3
    27d2:	4152      	adcs	r2, r2
    27d4:	0a03      	lsrs	r3, r0, #8
    27d6:	428b      	cmp	r3, r1
    27d8:	d301      	bcc.n	27de <__udivsi3+0x9a>
    27da:	020b      	lsls	r3, r1, #8
    27dc:	1ac0      	subs	r0, r0, r3
    27de:	4152      	adcs	r2, r2
    27e0:	d2cd      	bcs.n	277e <__udivsi3+0x3a>
    27e2:	09c3      	lsrs	r3, r0, #7
    27e4:	428b      	cmp	r3, r1
    27e6:	d301      	bcc.n	27ec <__udivsi3+0xa8>
    27e8:	01cb      	lsls	r3, r1, #7
    27ea:	1ac0      	subs	r0, r0, r3
    27ec:	4152      	adcs	r2, r2
    27ee:	0983      	lsrs	r3, r0, #6
    27f0:	428b      	cmp	r3, r1
    27f2:	d301      	bcc.n	27f8 <__udivsi3+0xb4>
    27f4:	018b      	lsls	r3, r1, #6
    27f6:	1ac0      	subs	r0, r0, r3
    27f8:	4152      	adcs	r2, r2
    27fa:	0943      	lsrs	r3, r0, #5
    27fc:	428b      	cmp	r3, r1
    27fe:	d301      	bcc.n	2804 <__udivsi3+0xc0>
    2800:	014b      	lsls	r3, r1, #5
    2802:	1ac0      	subs	r0, r0, r3
    2804:	4152      	adcs	r2, r2
    2806:	0903      	lsrs	r3, r0, #4
    2808:	428b      	cmp	r3, r1
    280a:	d301      	bcc.n	2810 <__udivsi3+0xcc>
    280c:	010b      	lsls	r3, r1, #4
    280e:	1ac0      	subs	r0, r0, r3
    2810:	4152      	adcs	r2, r2
    2812:	08c3      	lsrs	r3, r0, #3
    2814:	428b      	cmp	r3, r1
    2816:	d301      	bcc.n	281c <__udivsi3+0xd8>
    2818:	00cb      	lsls	r3, r1, #3
    281a:	1ac0      	subs	r0, r0, r3
    281c:	4152      	adcs	r2, r2
    281e:	0883      	lsrs	r3, r0, #2
    2820:	428b      	cmp	r3, r1
    2822:	d301      	bcc.n	2828 <__udivsi3+0xe4>
    2824:	008b      	lsls	r3, r1, #2
    2826:	1ac0      	subs	r0, r0, r3
    2828:	4152      	adcs	r2, r2
    282a:	0843      	lsrs	r3, r0, #1
    282c:	428b      	cmp	r3, r1
    282e:	d301      	bcc.n	2834 <__udivsi3+0xf0>
    2830:	004b      	lsls	r3, r1, #1
    2832:	1ac0      	subs	r0, r0, r3
    2834:	4152      	adcs	r2, r2
    2836:	1a41      	subs	r1, r0, r1
    2838:	d200      	bcs.n	283c <__udivsi3+0xf8>
    283a:	4601      	mov	r1, r0
    283c:	4152      	adcs	r2, r2
    283e:	4610      	mov	r0, r2
    2840:	4770      	bx	lr
    2842:	e7ff      	b.n	2844 <__udivsi3+0x100>
    2844:	b501      	push	{r0, lr}
    2846:	2000      	movs	r0, #0
    2848:	f000 f806 	bl	2858 <__aeabi_idiv0>
    284c:	bd02      	pop	{r1, pc}
    284e:	46c0      	nop			; (mov r8, r8)

00002850 <__aeabi_uidivmod>:
    2850:	2900      	cmp	r1, #0
    2852:	d0f7      	beq.n	2844 <__udivsi3+0x100>
    2854:	e776      	b.n	2744 <__udivsi3>
    2856:	4770      	bx	lr

00002858 <__aeabi_idiv0>:
    2858:	4770      	bx	lr
    285a:	46c0      	nop			; (mov r8, r8)

0000285c <__libc_init_array>:
    285c:	b570      	push	{r4, r5, r6, lr}
    285e:	2600      	movs	r6, #0
    2860:	4d0c      	ldr	r5, [pc, #48]	; (2894 <__libc_init_array+0x38>)
    2862:	4c0d      	ldr	r4, [pc, #52]	; (2898 <__libc_init_array+0x3c>)
    2864:	1b64      	subs	r4, r4, r5
    2866:	10a4      	asrs	r4, r4, #2
    2868:	42a6      	cmp	r6, r4
    286a:	d109      	bne.n	2880 <__libc_init_array+0x24>
    286c:	2600      	movs	r6, #0
    286e:	f000 f91f 	bl	2ab0 <_init>
    2872:	4d0a      	ldr	r5, [pc, #40]	; (289c <__libc_init_array+0x40>)
    2874:	4c0a      	ldr	r4, [pc, #40]	; (28a0 <__libc_init_array+0x44>)
    2876:	1b64      	subs	r4, r4, r5
    2878:	10a4      	asrs	r4, r4, #2
    287a:	42a6      	cmp	r6, r4
    287c:	d105      	bne.n	288a <__libc_init_array+0x2e>
    287e:	bd70      	pop	{r4, r5, r6, pc}
    2880:	00b3      	lsls	r3, r6, #2
    2882:	58eb      	ldr	r3, [r5, r3]
    2884:	4798      	blx	r3
    2886:	3601      	adds	r6, #1
    2888:	e7ee      	b.n	2868 <__libc_init_array+0xc>
    288a:	00b3      	lsls	r3, r6, #2
    288c:	58eb      	ldr	r3, [r5, r3]
    288e:	4798      	blx	r3
    2890:	3601      	adds	r6, #1
    2892:	e7f2      	b.n	287a <__libc_init_array+0x1e>
    2894:	00002abc 	.word	0x00002abc
    2898:	00002abc 	.word	0x00002abc
    289c:	00002abc 	.word	0x00002abc
    28a0:	00002ac0 	.word	0x00002ac0

000028a4 <__itoa>:
    28a4:	1e93      	subs	r3, r2, #2
    28a6:	b510      	push	{r4, lr}
    28a8:	000c      	movs	r4, r1
    28aa:	2b22      	cmp	r3, #34	; 0x22
    28ac:	d904      	bls.n	28b8 <__itoa+0x14>
    28ae:	2300      	movs	r3, #0
    28b0:	001c      	movs	r4, r3
    28b2:	700b      	strb	r3, [r1, #0]
    28b4:	0020      	movs	r0, r4
    28b6:	bd10      	pop	{r4, pc}
    28b8:	2a0a      	cmp	r2, #10
    28ba:	d109      	bne.n	28d0 <__itoa+0x2c>
    28bc:	2800      	cmp	r0, #0
    28be:	da07      	bge.n	28d0 <__itoa+0x2c>
    28c0:	232d      	movs	r3, #45	; 0x2d
    28c2:	700b      	strb	r3, [r1, #0]
    28c4:	2101      	movs	r1, #1
    28c6:	4240      	negs	r0, r0
    28c8:	1861      	adds	r1, r4, r1
    28ca:	f000 f817 	bl	28fc <__utoa>
    28ce:	e7f1      	b.n	28b4 <__itoa+0x10>
    28d0:	2100      	movs	r1, #0
    28d2:	e7f9      	b.n	28c8 <__itoa+0x24>

000028d4 <itoa>:
    28d4:	b510      	push	{r4, lr}
    28d6:	f7ff ffe5 	bl	28a4 <__itoa>
    28da:	bd10      	pop	{r4, pc}

000028dc <memset>:
    28dc:	0003      	movs	r3, r0
    28de:	1882      	adds	r2, r0, r2
    28e0:	4293      	cmp	r3, r2
    28e2:	d100      	bne.n	28e6 <memset+0xa>
    28e4:	4770      	bx	lr
    28e6:	7019      	strb	r1, [r3, #0]
    28e8:	3301      	adds	r3, #1
    28ea:	e7f9      	b.n	28e0 <memset+0x4>

000028ec <strlen>:
    28ec:	2300      	movs	r3, #0
    28ee:	5cc2      	ldrb	r2, [r0, r3]
    28f0:	3301      	adds	r3, #1
    28f2:	2a00      	cmp	r2, #0
    28f4:	d1fb      	bne.n	28ee <strlen+0x2>
    28f6:	1e58      	subs	r0, r3, #1
    28f8:	4770      	bx	lr
	...

000028fc <__utoa>:
    28fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    28fe:	0017      	movs	r7, r2
    2900:	b08f      	sub	sp, #60	; 0x3c
    2902:	2225      	movs	r2, #37	; 0x25
    2904:	0006      	movs	r6, r0
    2906:	000d      	movs	r5, r1
    2908:	a804      	add	r0, sp, #16
    290a:	4918      	ldr	r1, [pc, #96]	; (296c <__utoa+0x70>)
    290c:	f000 f834 	bl	2978 <memcpy>
    2910:	aa04      	add	r2, sp, #16
    2912:	1ebb      	subs	r3, r7, #2
    2914:	2400      	movs	r4, #0
    2916:	9203      	str	r2, [sp, #12]
    2918:	2b22      	cmp	r3, #34	; 0x22
    291a:	d905      	bls.n	2928 <__utoa+0x2c>
    291c:	702c      	strb	r4, [r5, #0]
    291e:	0025      	movs	r5, r4
    2920:	0028      	movs	r0, r5
    2922:	b00f      	add	sp, #60	; 0x3c
    2924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2926:	9c01      	ldr	r4, [sp, #4]
    2928:	1c63      	adds	r3, r4, #1
    292a:	9301      	str	r3, [sp, #4]
    292c:	18eb      	adds	r3, r5, r3
    292e:	9300      	str	r3, [sp, #0]
    2930:	0030      	movs	r0, r6
    2932:	3b01      	subs	r3, #1
    2934:	0039      	movs	r1, r7
    2936:	9302      	str	r3, [sp, #8]
    2938:	f7ff ff8a 	bl	2850 <__aeabi_uidivmod>
    293c:	9b03      	ldr	r3, [sp, #12]
    293e:	9a02      	ldr	r2, [sp, #8]
    2940:	5c5b      	ldrb	r3, [r3, r1]
    2942:	0030      	movs	r0, r6
    2944:	7013      	strb	r3, [r2, #0]
    2946:	0039      	movs	r1, r7
    2948:	f7ff fefc 	bl	2744 <__udivsi3>
    294c:	1e06      	subs	r6, r0, #0
    294e:	d1ea      	bne.n	2926 <__utoa+0x2a>
    2950:	9b00      	ldr	r3, [sp, #0]
    2952:	7018      	strb	r0, [r3, #0]
    2954:	002b      	movs	r3, r5
    2956:	1b5a      	subs	r2, r3, r5
    2958:	4294      	cmp	r4, r2
    295a:	dde1      	ble.n	2920 <__utoa+0x24>
    295c:	781a      	ldrb	r2, [r3, #0]
    295e:	5d29      	ldrb	r1, [r5, r4]
    2960:	7019      	strb	r1, [r3, #0]
    2962:	552a      	strb	r2, [r5, r4]
    2964:	3301      	adds	r3, #1
    2966:	3c01      	subs	r4, #1
    2968:	e7f5      	b.n	2956 <__utoa+0x5a>
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	00002a88 	.word	0x00002a88

00002970 <utoa>:
    2970:	b510      	push	{r4, lr}
    2972:	f7ff ffc3 	bl	28fc <__utoa>
    2976:	bd10      	pop	{r4, pc}

00002978 <memcpy>:
    2978:	2300      	movs	r3, #0
    297a:	b510      	push	{r4, lr}
    297c:	429a      	cmp	r2, r3
    297e:	d100      	bne.n	2982 <memcpy+0xa>
    2980:	bd10      	pop	{r4, pc}
    2982:	5ccc      	ldrb	r4, [r1, r3]
    2984:	54c4      	strb	r4, [r0, r3]
    2986:	3301      	adds	r3, #1
    2988:	e7f8      	b.n	297c <memcpy+0x4>
    298a:	0000      	movs	r0, r0
    298c:	682f2e2e 	.word	0x682f2e2e
    2990:	732f6c61 	.word	0x732f6c61
    2994:	682f6372 	.word	0x682f6372
    2998:	695f6c61 	.word	0x695f6c61
    299c:	00632e6f 	.word	0x00632e6f
    29a0:	682f2e2e 	.word	0x682f2e2e
    29a4:	732f6c61 	.word	0x732f6c61
    29a8:	682f6372 	.word	0x682f6372
    29ac:	745f6c61 	.word	0x745f6c61
    29b0:	72656d69 	.word	0x72656d69
    29b4:	0000632e 	.word	0x0000632e
    29b8:	682f2e2e 	.word	0x682f2e2e
    29bc:	732f6c61 	.word	0x732f6c61
    29c0:	682f6372 	.word	0x682f6372
    29c4:	755f6c61 	.word	0x755f6c61
    29c8:	74726173 	.word	0x74726173
    29cc:	7973615f 	.word	0x7973615f
    29d0:	632e636e 	.word	0x632e636e
    29d4:	00000000 	.word	0x00000000
    29d8:	682f2e2e 	.word	0x682f2e2e
    29dc:	752f6c61 	.word	0x752f6c61
    29e0:	736c6974 	.word	0x736c6974
    29e4:	6372732f 	.word	0x6372732f
    29e8:	6974752f 	.word	0x6974752f
    29ec:	6c5f736c 	.word	0x6c5f736c
    29f0:	2e747369 	.word	0x2e747369
    29f4:	00000063 	.word	0x00000063
    29f8:	682f2e2e 	.word	0x682f2e2e
    29fc:	752f6c61 	.word	0x752f6c61
    2a00:	736c6974 	.word	0x736c6974
    2a04:	6372732f 	.word	0x6372732f
    2a08:	6974752f 	.word	0x6974752f
    2a0c:	725f736c 	.word	0x725f736c
    2a10:	62676e69 	.word	0x62676e69
    2a14:	65666675 	.word	0x65666675
    2a18:	00632e72 	.word	0x00632e72
    2a1c:	682f2e2e 	.word	0x682f2e2e
    2a20:	722f6c70 	.word	0x722f6c70
    2a24:	682f6374 	.word	0x682f6374
    2a28:	725f6c70 	.word	0x725f6c70
    2a2c:	632e6374 	.word	0x632e6374
    2a30:	00000000 	.word	0x00000000
    2a34:	682f2e2e 	.word	0x682f2e2e
    2a38:	732f6c70 	.word	0x732f6c70
    2a3c:	6f637265 	.word	0x6f637265
    2a40:	70682f6d 	.word	0x70682f6d
    2a44:	65735f6c 	.word	0x65735f6c
    2a48:	6d6f6372 	.word	0x6d6f6372
    2a4c:	0000632e 	.word	0x0000632e
    2a50:	00000020 	.word	0x00000020
    2a54:	0000000a 	.word	0x0000000a
    2a58:	a080      	.short	0xa080

00002a5a <multipliers_tau_calc>:
    2a5a:	0007 0013 0035 0090                         ....5...

00002a62 <gain_setting_int_cap>:
    2a62:	1c3f 050b 0103                              ?.....

00002a68 <PTC_XY_PINS>:
    2a68:	0302 0504 0706 2120 2322 2524 2726 2928     ...... !"#$%&'()
    2a78:	0908 0b0a 1110 1312 1514 1716 2d2c 2f2e     ............,-./
    2a88:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
    2a98:	6867 6a69 6c6b 6e6d 706f 7271 7473 7675     ghijklmnopqrstuv
    2aa8:	7877 7a79 0000 0000                         wxyz....

00002ab0 <_init>:
    2ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ab2:	46c0      	nop			; (mov r8, r8)
    2ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2ab6:	bc08      	pop	{r3}
    2ab8:	469e      	mov	lr, r3
    2aba:	4770      	bx	lr

00002abc <__init_array_start>:
    2abc:	000000dd 	.word	0x000000dd

00002ac0 <_fini>:
    2ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2ac6:	bc08      	pop	{r3}
    2ac8:	469e      	mov	lr, r3
    2aca:	4770      	bx	lr

00002acc <__fini_array_start>:
    2acc:	000000b5 	.word	0x000000b5
